<?php
/**
 * @file
 * Module file for the GovDelivery API wrapper module
 */

/**
 * Sets the menu path used in the admin UI
 */
define('GOVDELIVERY_API_MENU_PATH', 'admin/config/services/govdelivery-api');

/**
 * Sets the number of seconds for which the API will be deemed to be healthy
 */
define('GOVDELIVERY_API_DEFAULT_HEALTHY_INTERVAL', 60);

/**
 * Sets the number of seconds for which the API will be deemed to be unhealthy
 */
define('GOVDELIVERY_API_DEFAULT_UNHEALTHY_INTERVAL', 30);

/**
 * Sets the default time allowed when checking the API status
 */
define('GOVDELIVERY_API_DEFAULT_TIMEOUT_INTERVAL', 5);


/**
 * Implements hook_permission().
 */
function govdelivery_api_permission() {
  return array(
    'administer govdelivery api' => array(
      'title' => t('Administer the GovDelivery API'),
      'description' => t('Carry out administration functions via the GovDelivery API'),
    ),
    'create govdelivery categories' => array(
      'title' => t('Create GovDelivery categories'),
      'description' => t('Create new categories via the GovDelivery API'),
    ),
    'view govdelivery categories' => array(
      'title' => t('View GovDelivery categories'),
      'description' => t('View categories from GovDelivery'),
    ),
    'edit govdelivery categories' => array(
      'title' => t('Edit GovDelivery categories'),
      'description' => t('Edit categories via the GovDelivery API'),
    ),
    'delete govdelivery categories' => array(
      'title' => t('Delete GovDelivery categories'),
      'description' => t('Delete categories via the GovDelivery API'),
    ),
    'view govdelivery topics' => array(
      'title' => t('View GovDelivery topics'),
      'description' => t('View topics from GovDelivery'),
    ),
    'edit govdelivery topics' => array(
      'title' => t('Edit GovDelivery topics'),
      'description' => t('Edit topics from GovDelivery'),
    ),
    'manage govdelivery quick subscribe pages' => array(
      'title' => t('Manage GovDelivery quick subscribe pages'),
      'description' => t('View, create, edit and delete quick subscribe pages'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function govdelivery_api_menu() {
  $items = array();

  $items[GOVDELIVERY_API_MENU_PATH] = array(
    'title' => t('GovDelivery API'),
    'description' => t('Configure the GovDelivery API settings.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_api_settings_form'),
    'access arguments' => array('administer govdelivery api'),
    'weight' => -15,
    'file' => 'govdelivery_api.admin.inc',
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/settings'] = array(
    'title' => t('Settings'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/settings/password'] = array(
    'title' => t('Change password'),
    'description' => t('Change the password stored for the GovDelivery API. Note that this does not change the GovDelivery password itself.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_api_password_form'),
    'access arguments' => array('administer govdelivery api'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => -10,
    'file' => 'govdelivery_api.admin.inc',
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories'] = array(
    'title' => t('Categories'),
    'description' => t('View a list of GovDelivery categories'),
    //'page callback' => 'drupal_get_form',
    'page callback' => '_govdelivery_api_get_form',
    'page arguments' => array('govdelivery_api_categories_form'),
    'access arguments' => array('view govdelivery categories'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
    'file' => 'govdelivery_api.categories.admin.inc',
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories/create'] = array(
    'title' => t('Create category'),
    'description' => t('Create a new category using the GovDelivery API.'),
    //'page callback' => 'drupal_get_form',
    'page callback' => '_govdelivery_api_get_form',
    'page arguments' => array('govdelivery_api_category_create_form'),
    'access arguments' => array('create govdelivery categories'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => -9,
    'file' => 'govdelivery_api.categories.admin.inc',
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories/%'] = array(
    'title' => t('View category'),
    'description' => t('View category details.'),
    'page callback' => '_govdelivery_api_category_view',
    'page arguments' => array(5),
    'access arguments' => array('edit govdelivery categories'),
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories/%/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -20,
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit the category.'),
    //'page callback' => 'drupal_get_form',
    'page callback' => '_govdelivery_api_get_form',
    'page arguments' => array('govdelivery_api_category_edit_form', 5),
    'access arguments' => array('edit govdelivery categories'),
    'file' => 'govdelivery_api.categories.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/categories/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete the category.'),
    //'page callback' => 'drupal_get_form',
    'page callback' => '_govdelivery_api_get_form',
    'page arguments' => array('govdelivery_api_category_delete_form', 5),
    'access arguments' => array('delete govdelivery categories'),
    'file' => 'govdelivery_api.categories.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/topics'] = array(
    'title' => t('Topics'),
    'description' => t('View topics from the GovDelivery API.'),
    //'page callback' => 'drupal_get_form',
    'page callback' => '_govdelivery_api_get_form',
    'page arguments' => array('govdelivery_api_topics_form'),
    'access arguments' => array('view govdelivery topics'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9,
    'file' => 'govdelivery_api.topics.admin.inc',
  );
  $items[GOVDELIVERY_API_MENU_PATH . '/topics/%/edit'] = array(
    'title' => t('Edit topic'),
    'description' => t('Edit the topic.'),
    //'page callback' => 'drupal_get_form',
    'page arguments' => array('govdelivery_api_topic_edit_form', 5),
    'access arguments' => array('edit govdelivery topics'),
    'file' => 'govdelivery_api.topics.admin.inc',
  );

  $items[GOVDELIVERY_API_MENU_PATH . '/quick-subscribe-pages'] = array(
    'title' => t('Quick subscribe pages'),
    'description' => t('View a list of GovDirectory Quick Subscribe pages'),
    'page arguments' => array('govdelivery_api_quick_subscribe_pages_form'),
    'access arguments' => array('manage govdelivery quick subscribe pages'),
    'file' => 'govdelivery_api.quick_subscribe_pages.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items[GOVDELIVERY_API_MENU_PATH . '/quick-subscribe-pages/create'] = array(
    'title' => t('Create quick subscribe page'),
    'description' => t('Create a new GovDelivery quick subscribe page.'),
    'page arguments' => array('govdelivery_api_quick_subscribe_page_create_form'),
    'access arguments' => array('manage govdelivery quick subscribe pages'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => -9,
    'file' => 'govdelivery_api.quick_subscribe_pages.admin.inc',
  );

  $items[GOVDELIVERY_API_MENU_PATH . '/quick-subscribe-pages/%/edit'] = array(
    'title' => t('Edit'),
    'description' => t('Edit GovDelivery quick subscribe page.'),
    'page arguments' => array('govdelivery_api_quick_subscribe_page_create_form', 5),
    'access arguments' => array('manage govdelivery quick subscribe pages'),
    'file' => 'govdelivery_api.quick_subscribe_pages.admin.inc',
  );

  $items[GOVDELIVERY_API_MENU_PATH . '/quick-subscribe-pages/%/delete'] = array(
    'title' => t('Delete'),
    'description' => t('Delete GovDelivery quick subscribe page.'),
    'page arguments' => array('govdelivery_api_quick_subscribe_page_delete_form', 5),
    'access arguments' => array('manage govdelivery quick subscribe pages'),
    'file' => 'govdelivery_api.quick_subscribe_pages.admin.inc',
  );
  return $items;
}


/**
 * Creates a GovDelivery category
 */
function govdelivery_api_create_category($params = array()) {
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $category = $api->create($params);
    $api_status = _govdelivery_api_set_api_status($category->success);
    return $category;
  }
  catch (Exception $e) {
    watchdog('gov_delivery_api', 'An error occurred creating the category. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object->setErrorMessage(t('An error occurred creating the category. The error message was: %message', array('%message' => $e->getMessage())));
  }
}


/**
 * Gets a list of GovDelivery categories
 */
function govdelivery_api_get_categories($category_code = NULL) {
  // Create a new instance of the GovDeliveryCategories API endpoint
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $categories = $api->read($category_code);
    $api_status = _govdelivery_api_set_api_status($categories->success);
    return $categories;
  }
  catch (GovDeliveryException $e) {
    watchdog('gov_delivery_api', 'An error occurred retrieving category data. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $return_object->setErrorMessage(t('An error occurred retrieving category data. The error message was: %message', array('%message' => $e->getMessage())));
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object;
  }
}


/**
 * Updates a GovDelivery category
 */
function govdelivery_api_update_category($params = array()) {
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $category = $api->update($params);
    $api_status = _govdelivery_api_set_api_status($category->success);
    return $category;
  }
  catch (Exception $e) {
    watchdog('gov_delivery_api', 'An error occurred updating the category. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object->setErrorMessage(t('An error occurred updating the category. The error message was: %message', array('%message' => $e->getMessage())));
  }
}


/**
 * Deletes a GovDelivery category
 */
function govdelivery_api_delete_category($category_code = NULL) {
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $delete = $api->delete($category_code);
    module_invoke_all('govdelivery_category_delete', $category_code);
    $api_status = _govdelivery_api_set_api_status($delete->success);
    return $delete;
  }
  catch (GovDeliveryException $e) {
    watchdog('gov_delivery_api', 'An error occurred deleting the category. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $return_object->setErrorMessage(t('An error occurred deleting the category. The error message was: %message', array('%message' => $e->getMessage())));
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object;
  }
}


/**
 * Helper function to generate the next GovDelivery category code.
 *
 * This function attempts to guess the next category code for the GovDelivery
 * API. It does this by going through the existing category codes and finding
 * the one with the largest number at the end. It then increments it by 1.
 *
 * Category codes are based on the pattern [account-code]_C[integer]. We
 * therefore remove the first part of the string, leaving just the integer at
 * the end. We then find the largest and increment by one. It's not very
 * scientific, but it doesn't have to be, as GovDelivery will ensure that
 * category codes don't collide when they're created. If a category code already
 * exists, it will just generate a new one.
 *
 * @param GovDeliveryResult $categories
 *   GovDeliveryResult object containing all existing categories
 *
 * @return string
 *   Suggested new category code based on incrementing the number at the end
 *   of the latest category code. It's not essential that this is unique; if
 *   we try to create a category with an existing ID, GovDelivery will
 *   automatically generate a new one.
 */
function _govdelivery_api_next_category_code($categories) {
  $prefix = variable_get('govdelivery_api_account_code') . '_C';
  $latest = 1;
  foreach ($categories as $category) {
    $cat_id = intval(str_replace($prefix, '', $category->code));
    if ($cat_id >= $latest) {
      $latest = $cat_id + 1;
    }
  }
  return "$prefix$latest";
}


/**
 * Implements hook_govdelivery_category_operations().
 */
function govdelivery_api_govdelivery_category_operations() {
  return array(
    'test' => t('Test'),
  );
}


/**
 * Utility function - returns an array of GovDelivery account details
 */
function _govdelivery_api_account_details() {

  // Use `drupal_static()` to avoid having to check the variables more than
  // once per request.
  $account_details = &drupal_static(__FUNCTION__);

  if (!isset($account_details)) {
    // Regex to determine whether the password has been encrypted in the database.
    // When passwords are encrypted, they are stored as a serialized array, which
    // is itself serialized in the database. In order to check whether we're using
    // an encrypted password, we can't just use `unserialize()` as this throws a
    // notice if the subject is just a string. We therefore test to see if the
    // stored password matches a regex that looks like a serialized array. If so,
    // we assume it's encrypted and decrypt it.
    // @todo Check for the existence of the Encrypt module when installing,
    // using `hook_requirements()` and encourage users to install it to keep
    // the password safe.
    $password_pattern = "/^a:[0-9]+:{.*}/";

    // Get the password
    $password = variable_get('govdelivery_api_password');

    // Create the account details array
    $account_details = array(
      'user_name' => variable_get('govdelivery_api_username'),
      'password' => (function_exists('decrypt') && preg_match($password_pattern, $password)) ? decrypt($password) : $password,
      'account_code' => variable_get('govdelivery_api_account_code'),
      'dev' => variable_get('govdelivery_api_dev_status', 'FALSE'),
      'base_url' => variable_get('govdelivery_api_dev_status', 'FALSE') ? variable_get('govdelivery_api_base_url_staging') : variable_get('govdelivery_api_base_url'),
    );
  }
  return $account_details;
}


/**
 * Gets a list of GovDelivery topics
 */
function govdelivery_api_get_topics($topic_code = NULL) {
  // Create a new instance of the GovDeliveryCategories API endpoint
  try {
    $api = new GovDeliveryTopics(_govdelivery_api_account_details());
    $topics = $api->read($topic_code);
    $api_status = _govdelivery_api_set_api_status($topics->success);
    return $topics;
  }
  catch (GovDeliveryException $e) {
    watchdog('gov_delivery_api', 'An error occurred retrieving topic data. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $return_object->setErrorMessage(t('An error occurred retrieving topic data. The error message was: %message', array('%message' => $e->getMessage())));
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object;
  }
}


/**
 * Gets a list of topics for a GovDelivery category
 */
function govdelivery_api_get_category_topics($category_code = NULL) {
  // Create a new instance of the GovDeliveryCategories API endpoint
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $topics = $api->getTopics($category_code);
    $api_status = _govdelivery_api_set_api_status($topics->success);
    return $topics;
  }
  catch (GovDeliveryException $e) {
    watchdog('gov_delivery_api', 'An error occurred retrieving topic data for the category. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $return_object->setErrorMessage(t('An error occurred retrieving topic data for the category. The error message was: %message', array('%message' => $e->getMessage())));
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object;
  }
}


/**
 * Creates a GovDelivery topic
 */
function govdelivery_api_create_topic($params = array()) {
  try {
    $api = new GovDeliveryTopics(_govdelivery_api_account_details());
    $topic = $api->create($params);
    $api_status = _govdelivery_api_set_api_status($topic->success);
    return $topic;
  }
  catch (Exception $e) {
    watchdog('gov_delivery_api', 'An error occurred creating the topic. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object->setErrorMessage(t('An error occurred creating the topic. The error message was: %message', array('%message' => $e->getMessage())));
  }
}


/**
 * Updates a GovDelivery topic
 */
function govdelivery_api_update_topic($params = array()) {
  try {
    $api = new GovDeliveryTopics(_govdelivery_api_account_details());
    $topic = $api->update($params);
    $api_status = _govdelivery_api_set_api_status($topic->success);
    return $topic;
  }
  catch (Exception $e) {
    watchdog('gov_delivery_api', 'An error occurred updating the topic. The error message was: %message', array('%message' => $e->getMessage()), WATCHDOG_ERROR);
    $return_object = new GovDeliveryResult;
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
    return $return_object->setErrorMessage(t('An error occurred updating the topic. The error message was: %message', array('%message' => $e->getMessage())));
  }
}


/**
 * Helper function: provides an array of topic visibility statuses
 */
function _govdelivery_api_topic_statuses() {
  return array(
    'Listed',
    'Unlisted',
    'Restricted',
  );
}


/**
 * Helper function: provides an array of page watch types
 */
function _govdelivery_api_pagewatch_types() {
  return array(
    '1' => t('HTML'),
    '2' => t('RSS/Atom'),
    '3' => t('File'),
    '4' => t('Twitter'),
  );
}


/**
 * Implements hook_theme().
 */
function govdelivery_api_theme() {
  return array(
    'govdelivery_category' => array(
      'template' => drupal_get_path('module', 'govdelivery_category') . '/theme/govdelivery-category',
      'variables' => array(
        'category' => NULL,
      ),
    ),
    'govdelivery_api_down_page' => array(
      'template' => drupal_get_path('module', 'govdelivery_category') . '/theme/govdelivery-api-down-page',
      'variables' => array(
        'api_status' => NULL,
      ),
    ),
    'govdelivery_api_status_description' => array(
      'template' => 'theme/govdelivery-api-status-description',
      'variables' => array(
        'status' => NULL,
      ),
    ),
  );
}



/**
 * View a category
 */
function _govdelivery_api_category_view($category_code = NULL) {
  // First load the category from the GovDelivery API
  $categories = govdelivery_api_get_categories($category_code);

  if (empty($categories->result)) {
    drupal_set_message('No category found', 'error');
    drupal_goto(GOVDELIVERY_API_MENU_PATH . '/categories');
  }

  else {
    $category = $categories->getResult();
  }

  // Create a render array
  $build = array(
    '#theme' => 'govdelivery_category',
    '#category' => $category,
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'govdelivery_api') . '/css/govdelivery-api.css',
      ),
    ),
  );

  drupal_set_title($category->name . ' (' . $category->code . ')');

  return $build;

}


/**
 * Preprocess function for govdelivery categories
 */
function template_preprocess_govdelivery_category(&$variables) {
  // Get the category object
  $category = !empty($variables['category']) ? $variables['category'] : NULL;
  // Set up some variables
  $variables['name'] = !empty($category->name) ? $category->name : '';
  $variables['category_code'] = !empty($category->code) ? $category->code : '';
  $variables['short_name'] = !empty($category->{'short-name'}) ? $category->{'short-name'} : '';
  $variables['description'] = !empty($category->description) && !is_object($category->description) ? $category->description : t('None');
  $variables['allow_subscriptions'] = !empty($category->{'allow-subscriptions'}) ? t('Yes') : t('No');
  $variables['default_open'] = !empty($category->{'default-open'}) ? t('Yes') : t('No');

  // Get the quick subscribe page
  $qs_page = _govdelivery_api_get_category_quick_subscribe_page($category);
  // Set the quick subscribe page variable.
  $variables['quick_subscribe_page'] = !empty($qs_page['name']) ? $qs_page['name'] : NULL;

  // Get the parent category (if present)
  $parent_category_code = !empty($category->parent) ? $category->parent->code : NULL;
  $parent_category = !empty($parent_category_code) ? govdelivery_api_get_categories($parent_category_code)->result : NULL;
  $parent_category_name = !empty($parent_category->name) ? $parent_category->name : NULL;
  if (!empty($parent_category_name)) {
    $variables['parent_category'] = array(
      '#type' => 'link',
      '#title' => $parent_category_name,
      '#href' => GOVDELIVERY_API_MENU_PATH . "/categories/$parent_category_code",
    );
  }
  else {
    $variables['parent_category'] = NULL;
  }

  // Get related topics - if there are any
  $topic_results = govdelivery_api_get_category_topics($category->code)->result;
  $topics = !empty($topic_results->topic) ? $topic_results->topic : array();
  if (!is_array($topics)) {
    $topics = array($topics);
  }
  $variables['topics'] = array();
  foreach ($topics as $topic) {
    $variables['topics'][] = array(
      '#type' => 'link',
      '#title' => $topic->name,
      // @todo Change this to the view URL when one exists
      '#href' => GOVDELIVERY_API_MENU_PATH . "/topics/" . $topic->code . '/edit',
    );
  }

}


/**
 * Helper function: checks to see if the GovDelivery API is available
 */
function _govdelivery_api_available($force_check = FALSE) {

  // Set the intervals between checks of the API based on the previous state in
  // which it was found.
  $intervals = array(
    'healthy' => variable_get('govdelivery_api_healthy_interval', GOVDELIVERY_API_DEFAULT_HEALTHY_INTERVAL),
    'unhealthy' => variable_get('govdelivery_api_unhealthy_interval', GOVDELIVERY_API_DEFAULT_UNHEALTHY_INTERVAL),
  );

  // Get the previous API status.
  $api_status = _govdelivery_api_get_api_status();

  // If we have a previous status and the interval has not been exceeded,
  // return the previous state. Processing stops here.
  if (!$force_check && !empty($api_status) && (REQUEST_TIME - $api_status->lastCheck < $intervals[$api_status->healthy ? 'healthy' : 'unhealthy'])) {
    return $api_status;
  }

  // Check the status of the API by sending a HEAD request to the endpoint.
  try {
    $api = new GovDeliveryCategories(_govdelivery_api_account_details());
    $test = $api->testConnection(variable_get('govdelivery_api_timeout_interval', GOVDELIVERY_API_DEFAULT_TIMEOUT_INTERVAL));
    $api_status = _govdelivery_api_set_api_status($test->success);
  }
  catch (GovDeliveryException $e) {
    $http_code = $e->getHttpCode();
    $api_status = _govdelivery_api_set_api_status(FALSE, $e);
  }

  return $api_status;

}


/**
 * Wrapper function for drupal_get_form().
 *
 * Checks for the availability of the GovDelivery API before calling
 * drupal_get_form(). If the API is not available, returns an error page.
 */
function _govdelivery_api_get_form($form_id) {

  // Check the availability of the GovDelivery API.
  $check = _govdelivery_api_available();

  // If the API is healthy, call drupal_get_form(), passing the arguments.
  if ($check->healthy) {
    return call_user_func_array('drupal_get_form', func_get_args());
  }

  // Otherwise, build and return a render array for an error page.
  else {
    return array(
      '#theme' => 'govdelivery_api_down_page',
      '#api_status' => $check,
    );
  }
}


/**
 * Preprocess function for the API down page
 */
function template_preprocess_govdelivery_api_down_page(&$variables) {
  $check = $variables['api_status'];
  $variables['error_message'] = !empty($check->exception) && method_exists($check->exception, 'getMessage') ? $check->exception->getMessage() : '';

  $http_code = $check->getHttpCode();

  if (!empty($http_code)) {
    switch($http_code) {
      case 401:
        $action_message = t('You may want to review your credentials');
        break;
      case 404:
        $action_message = t('Check your API settings');
        break;
    }
  }
  $variables['action_message'] = !empty($action_message) ? $action_message : NULL;
  $variables['last_checked'] = $check->getLastChecked('l j F Y \a\t H:i:s');
  $variables['next_check'] = $check->getNextCheck(variable_get('govdelivery_api_healthy_interval'), variable_get('govdelivery_api_unhealthy_interval'));
}


/**
 * Preprocess function for GovDelivery status message
 */
function template_preprocess_govdelivery_api_status_description(&$variables) {
  $status = !empty($variables['status']) ? $variables['status'] : NULL;
  $variables['message_type'] = empty($status->healthy) ? 'error' : 'status';
  $variables['description'] = $status->getStatusDescription();
  $variables['error_message'] = $status->getMessage();
}


/**
 * Helper function: set GovDelivery API status
 */
function _govdelivery_api_set_api_status($healthy = TRUE, $exception = NULL) {
  $status_object = new GovDeliveryApiStatus($healthy, $exception);
  variable_set('govdelivery_api_status', $status_object);
  return $status_object;
}


/**
 * Helper function: gets GovDelivery API status
 */
function _govdelivery_api_get_api_status() {
  return variable_get('govdelivery_api_status');
}


/**
 * Helper function: returns a list of GovDelivery Quick Subscribe pages
 *
 * Note that Quick Subscribe pages are not currently available via the
 * GovDelivery API, so this list is maintained separately in Drupal. The codes
 * used must match those used in GovDelivery though. Quick Subscribe pages can
 * be accessed via the GovDelivery admin interface at:
 * http://admin.govdelivery.com/accounts/[account code]/quick_subscribe_pages
 */
function _govdelivery_api_get_quick_subscribe_pages() {
  $quick_subscribe_pages = variable_get('govdelivery_api_quick_subscribe_pages', array());
  return $quick_subscribe_pages;
}


/**
 * Helper function: updates GovDelivery Quick Subscribe pages
 */
function _govdelivery_api_set_quick_subscribe_pages($pages = NULL) {
  if (empty($pages)) {
    return FALSE;
  }
  variable_set('govdelivery_api_quick_subscribe_pages', $pages);
  return TRUE;
}

/**
 * Helper function: returns details for a specific Quick Subscribe page
 */
function _govdelivery_api_get_quick_subscribe_page($code = NULL) {
  if (empty($code)) {
    return array();
  }
  $quick_subscribe_pages = _govdelivery_api_get_quick_subscribe_pages();
  if (!empty($quick_subscribe_pages[$code])) {
    return array(
      $code => $quick_subscribe_pages[$code],
    );
  }
  else {
    return array();
  }
 }


 /**
  * Helper function: returns Quick Subscribe page for a category
  */
 function _govdelivery_api_get_category_quick_subscribe_page($category = NULL) {
   if (empty($category)) {
     return array();
   }

  // Get the quick subscribe pages
  $quick_subscribe_pages = _govdelivery_api_get_quick_subscribe_pages();
  $qs_page = !empty($category->{'qs-page'}->code) ? $category->{'qs-page'}->code : NULL;

  if (empty($qs_page)) {
    return array();
  }

  $return_array = array(
    'code' => $qs_page,
    'name' => !empty($quick_subscribe_pages[$qs_page]) ? $quick_subscribe_pages[$qs_page] : '',
  );

  return $return_array;

 }


 /**
  * Helper function: returns the public URL for a Quick Subscribe page.
  *
  * @param string $code
  *   The GovDelivery code for the Quick Subscribe page.
  *
  * @return string
  *   The public URL of the Quick Subscribe page, or an empty string if none is
  *   found.
  */
 function _govdelivery_api_quick_subscribe_page_public_url($code) {
   if (empty($code)) {
     return '';
   }
   $account_details = _govdelivery_api_account_details();
   $base_url = str_replace('api', 'public', $account_details['base_url']);
   return url($base_url . '/accounts/' . $account_details['account_code'] . '/subscriber/topics', array('https' => TRUE, 'query' => array('qsp' => $code)));
 }
