<?php

/**
 * Implements hook_form_alter().
 */
function apachesolr_custom_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'search_block_form') {
    // Prevent issue with form being cached and wrong token being checked against.
    $form['#token'] = NULL;
    // Redirect standard search block form to Views generated search page.
    $form['#submit'][] = 'apachesolr_custom_search_form_submit_funtion';
  }
}

/**
 *  Redirect standard search block form to Views generated search page.
 **/
function apachesolr_custom_search_form_submit_funtion(&$form, &$form_state) {
  $search_str = $form_state['values']['search_block_form'];
  $form_state['rebuild'] = TRUE;
  drupal_goto('search', array('query' => array('keyword' => $search_str)));
}

/**
 * Implements hook_preprocess_page().
 */
function apachesolr_custom_preprocess_page(&$vars, $hook) {
  // Removes standard search tabs from search pages.
  apachesolr_custom_removetab($vars, 'search/site');
  apachesolr_custom_removetab($vars, 'search/file_entity');
}

/**
 *  Remove undesired local task tabs.
 **/
function apachesolr_custom_removetab(&$vars, $path) {
  // Remove from primary tabs
  $i = 0;
  if (is_array($vars['tabs']['#primary'])) {
    foreach ($vars['tabs']['#primary'] as $primary_tab) {
      if ($primary_tab['#link']['path'] == $path) {
        unset($vars['tabs']['#primary'][$i]);
      }
      ++$i;
    }
  }
}

/**
 * Implementation of hook_apachesolr_index_document_build_ENTITY_TYPE()
 *
 */
function apachesolr_custom_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {
  // set a sortable timestamp on all nodes that have a published year
  apachesolr_sortable_date_field($document, $entity, 'field_updated', 'is_field_updated');
  // Last updated year. (overridden by some types)
  apachesolr_custom_year_field($document, $entity, 'field_updated', 'is_last_updated_year', 1);

  switch ($entity->type) {
    case 'audit_report':
      // Last updated year. (use the year field)
     apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year');
     apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year_sort', 10);
     apachesolr_custom_year_field($document, $entity, 'field_year', 'ss_last_updated_year_title_sort', 10, _apachesolr_custom_string_invert($entity->title));


      if (empty($entity->field_audit_action_plan)) {
        $document->addField('ss_has_audit_action_plan', t('No action plan'));
      }
      else {
        $document->addField('ss_has_audit_action_plan', t('Has action plan'));
      }
      break;

    case 'audit_news':
      // we want audit news to come before audit reports  
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year');
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year_sort',10.001);
      //  The year title sort field needs to work descending. Audit news must also come first, so we add the ZZZZ to force it first

      apachesolr_custom_year_field($document, $entity, 'field_year', 'ss_last_updated_year_title_sort', 10.001, 'ZZZZZZ');

      if (!empty($entity->field_heading_audit_news[LANGUAGE_NONE][0]['value'])) {
        $document->addField('ss_heading_audit_news', $entity->field_heading_audit_news[LANGUAGE_NONE][0]['value']);
      }

      if (!empty($entity->field_body_audit_news[LANGUAGE_NONE][0]['value'])) {
        $document->addField('ss_body_audit_news', $entity->field_body_audit_news[LANGUAGE_NONE][0]['value']);
      }
      break;

    case 'consultation':
      // Last updated year. (overridden by some types)
      apachesolr_custom_year_field($document, $entity, 'field_consultation_dates', 'is_last_updated_year', 1);
      break;

    case 'paper':
      // Last updated year.
      apachesolr_custom_year_field($document, $entity, 'field_publication_year', 'is_last_updated_year', 1);
      break;

    
    case 'project':

      // Add project code as a text field so it can be case-insensitive.
      if (!empty($entity->field_project_code)) {
        $document->addField('ts_field_project_code', $entity->field_project_code[LANGUAGE_NONE][0]['value']);
      }

      // Add contractor field as a text field so it can be case-insensitive.
      if (!empty($entity->field_contractor)) {
        $document->addField('ts_field_contractor', trim($entity->field_contractor[LANGUAGE_NONE][0]['value']));
      }

      // Add start date field as ds_ field so we can sort on it.
      if (!empty($entity->field_start_date)) {
        apachesolr_sortable_date_field($document, $entity, 'field_start_date', 'is_field_start_date');
      }

      // Add project status field as ss field to allow sorting
      if (!empty($entity->field_project_status)) {
        $document->addField('ss_field_project_status', trim($entity->field_project_status[LANGUAGE_NONE][0]['value']));
      }

      break;
      
    
    case 'research_project':
      // Research Project status
      if (isset($entity->field_project_status)) {

	      $document->addField('sm_field_project_status', $entity->field_project_status[LANGUAGE_NONE][0]['value']);
      }
      break;
  }

  // Node is assigned to a Organic Group.
  if (isset($entity->og_group_ref) && !empty($entity->og_group_ref)) {
    $parent_nid = $entity->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    $parent_node_alias = drupal_get_path_alias('node/' . $parent_nid);

    if ($parent_node_alias != 'node/' . $parent_nid) {
      $parent_path = explode('/', $parent_node_alias);

      // Add 2nd part of the OG parent node's path as a string.
      // Custom for Committee OG groups that work as an independant site.
      // First part of the OG's path must be 'committee'.
      if (isset($parent_path[0]) && $parent_path[0] == 'committee' && isset($parent_path[1])) {
        $document->setField('ss_og_group_machine_name', $parent_path[1]);
      }
    }
  }
}

/**
 * Inverts string values A becomes Z etc.
 * We need this to handle reversse sort order... when we cant currently use multiple sorts.
 *
 * @param $string
 */
function _apachesolr_custom_string_invert($string){
  $alphabet = "abcdefghijklmnopqrstuvwxyz";
  // find position of letter in string, replace it with the character at the same position from the back .
  $output = '';
  $length = strlen($string);
  $string = strtolower($string); // convert to lower case
  for ($position = 0;$position < $length; $position++) {
   $character = strpos($alphabet,$string[$position]);
   // strpos returns false if it finds nothing, but 0 if it finds the first char
   if (!($character === false )) {
     // get the equivalent character from the end of the alphabet
     $output .= $alphabet[25 - $character];
   }
  }
  return $output;
}



/**
 * Converts field datetime value into a year and stores it in Apache Solr.
 *
 * @param $document
 * @param $entity
 * @param $field
 * @param $solr_field
 * @param int $multiplier Multiply the final value by a specified amount. Used for sorting with multiple content types
 * @param $suffix
 */
function apachesolr_custom_year_field(&$document, $entity, $field, $solr_field, $multiplier = 1, $suffix = '') {

  if (isset($entity->{$field}['und'][0]['value']) && !empty($entity->{$field}['und'][0]['value'])) {
    $datetime = $entity->{$field}['und'][0]['value'];
    $date = new DateTime($datetime);
    $year = (int) ($date->format('Y') * $multiplier);
    $document->setField($solr_field, "$year".$suffix);
  }
}

/**
 * Generate a unix timestamp version of a date field that will allow sorting.
 *
 * @param $document
 * @param $entity
 * @param $field
 * @param $solr_field

 */
function apachesolr_sortable_date_field(&$document, $entity, $field, $solr_field) {
  if (isset($entity->{$field}['und'][0]['value']) && !empty($entity->{$field}['und'][0]['value'])) {
    $datetime = $entity->{$field}['und'][0]['value'];
    $date = new DateTime($datetime);
    $timestamp = (int) ($date->format('U'));
    $document->setField($solr_field, $timestamp);
  }
}



/**
 * Implementation of hook_apachesolr_query_alter($query)
 */
function apachesolr_custom_apachesolr_query_alter($query) {



  /**
   * === Result Boosting
   * - Requires:
   *  - boolean boost field
   *  - views should sort by score
   *
   * The boost field allows us to push content to the top of search results with a query alter
   * To implement this feature, add a boolean, single on/off checkbox field called "boost" to
   * any content type that you would like to have promoted in search results. (machine name: field_boost.)
   *
   * At search time, this will multiply the score of the result by 100, so that boosted results always appear
   * at the beginning of searches. If a view is set to sort by score, then boosted results will appear first.
   *
  **/


  $query->addParam('bq', array('bs_field_boost' =>
    '(bs_field_boost:true^100 OR bs_field_boost:false^0)'
  ));


  /** Promote english results
   *  All content in welsh needs to have a lower score, so we boost all english results a bit
   */
  $query->addParam('bq', 'ss_language:en^10');


}



/**
 * Add custom facets.
 * @param array $searcher_info
 * @return array
 **/
function apachesolr_custom_facetapi_facet_info(array $searcher_info) {
  $facets = array();

  if (isset($searcher_info['types']['node'])) {
    // Audit Report last updated year.
    $facets['is_last_updated_year'] = array(
      'name' 			=> 'is_last_updated_year',
      'label' 			=> t('Last Updated Year'),
      'description' 		=> t('Last updated as a year.'),
      'field' 			=> 'is_last_updated_year',
      'dependency plugins' 	=> array('role'),
      'default widget' 		=> 'links',
      'allowed operators' 	=> array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed' 	=> FALSE,
      'facet mincount allowed' 	=> FALSE,
      'map callback' 		=> 'apachesolr_custom_map_values',
      'max callback' 		=> FALSE,
      'default sorts' 		=> array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );

    // Audit Report has action plan.
    $facets['ss_has_audit_action_plan'] = array(
      'name' 			=> 'ss_has_audit_action_plan',
      'label' 			=> t('Has Action Plan'),
      'description' 		=> t('Audit Report has action plan (file).'),
      'field' 			=> 'ss_has_audit_action_plan',
      'dependency plugins' 	=> array('role'),
      'default widget' 		=> 'links',
      'allowed operators' 	=> array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed' 	=> FALSE,
      'facet mincount allowed' 	=> FALSE,
      'map callback' 		=> 'apachesolr_custom_map_values',
      'max callback' 		=> FALSE,
      'default sorts' 		=> array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );
  
    // Research Project has status
    $facets['sm_field_project_status'] = array(
      'name' 			=> 'sm_field_project_status',
      'label' 			=> t('Research Project Status'),
      'description'		=> t('Current research project status'),
      'field'			=> 'sm_field_project_status',
      'dependency plugins'	=> array('role'),
      'default widget'		=> 'links',
      'allowed operators'	=> array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed'	=> FALSE,
      'facet mincount allowed'	=> FALSE,
      'map callback'		=> 'apachesolr_custom_map_values',
      'max callback'		=> FALSE,
      'default sorts'		=> array(
	array('active', SORT_DESC),
	array('count', SORT_DESC),
	array('display', SORT_DESC),
      ),
    );
  
  }
  return $facets;
}

/**
 * Map callback for if value and string are the same.
 */
function apachesolr_custom_map_values(array $values) {
  $map = array();

  foreach ($values as $val) {
    $map[$val] = $val;
  }
  return $map;
}
