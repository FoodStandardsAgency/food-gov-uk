<?php

/**
 * Implements hook_form_alter().
 */
function apachesolr_custom_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'search_block_form') {
    // Prevent issue with form being cached and wrong token being checked against.
    $form['#token'] = NULL;
    // Redirect standard search block form to Views generated search page.
    $form['#submit'][] = 'apachesolr_custom_search_form_submit_funtion';
  }
}

/**
 *  Redirect standard search block form to Views generated search page.
 **/
function apachesolr_custom_search_form_submit_funtion(&$form, &$form_state) {
  $search_str = $form_state['values']['search_block_form'];
  $form_state['rebuild'] = TRUE;
  drupal_goto('search', array('query' => array('keyword' => $search_str)));
}

/**
 * Implements hook_preprocess_page().
 */
function apachesolr_custom_preprocess_page(&$vars, $hook) {
  // Removes standard search tabs from search pages.
  apachesolr_custom_removetab($vars, 'search/site');
  apachesolr_custom_removetab($vars, 'search/file_entity');
}

/**
 *  Remove undesired local task tabs.
 **/
function apachesolr_custom_removetab(&$vars, $path) {
  // Remove from primary tabs
  $i = 0;
  if (is_array($vars['tabs']['#primary'])) {
    foreach ($vars['tabs']['#primary'] as $primary_tab) {
      if ($primary_tab['#link']['path'] == $path) {
        unset($vars['tabs']['#primary'][$i]);
      }
      ++$i;
    }
  }
}

/**
 * Implementation of hook_apachesolr_index_document_build_ENTITY_TYPE()
 *
 */
function apachesolr_custom_apachesolr_index_document_build_node(ApacheSolrDocument $document, $entity, $env_id) {

  switch ($entity->type) {
    case 'audit_report':
      // Last updated year.
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year');
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year_sort', 10);

      if (empty($entity->field_audit_action_plan)) {
        $document->addField('ss_has_audit_action_plan', t('No action plan'));
      }
      else {
        $document->addField('ss_has_audit_action_plan', t('Has action plan'));
      }
      break;

    case 'audit_news':
      // Last updated year.
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year');
      // we want audit news to come before audit reports
      apachesolr_custom_year_field($document, $entity, 'field_year', 'is_last_updated_year_sort',10.001);

      if (!empty($entity->field_heading_audit_news[LANGUAGE_NONE][0]['value'])) {
        $document->addField('ss_heading_audit_news', $entity->field_heading_audit_news[LANGUAGE_NONE][0]['value']);
      }

      if (!empty($entity->field_body_audit_news[LANGUAGE_NONE][0]['value'])) {
        $document->addField('ss_body_audit_news', $entity->field_body_audit_news[LANGUAGE_NONE][0]['value']);
      }
      break;

    case 'consultation':
      // Last updated year.
      apachesolr_custom_year_field($document, $entity, 'field_updated', 'is_last_updated_year');
      break;

    case 'paper':
      // Last updated year.
      apachesolr_custom_year_field($document, $entity, 'field_publication_year', 'is_last_updated_year');
      break;
  }

  // Node is assigned to a Organic Group.
  if (isset($entity->og_group_ref) && !empty($entity->og_group_ref)) {
    $parent_nid = $entity->og_group_ref[LANGUAGE_NONE][0]['target_id'];
    $parent_node_alias = drupal_get_path_alias('node/' . $parent_nid);

    if ($parent_node_alias != 'node/' . $parent_nid) {
      $parent_path = explode('/', $parent_node_alias);

      // Add 2nd part of the OG parent node's path as a string.
      // Custom for Committee OG groups that work as an independant site.
      // First part of the OG's path must be 'committee'.
      if (isset($parent_path[0]) && $parent_path[0] == 'committee' && isset($parent_path[1])) {
        $document->setField('ss_og_group_machine_name', $parent_path[1]);
      }
    }
  }
}

/**
 * Converts field datetime value into a year and stores it in Apache Solr.
 *
 * @param $document
 * @param $entity
 * @param $field
 * @param $solr_field
 * @param int $multiplier  Multiply the final value by a specified amount. Used for sorting with multiple content types
 */
function apachesolr_custom_year_field(&$document, $entity, $field, $solr_field, $multiplier = 1) {

  if (isset($entity->{$field}['und'][0]['value']) && !empty($entity->{$field}['und'][0]['value'])) {
    $datetime = $entity->{$field}['und'][0]['value'];
    $date = new DateTime($datetime);
    $year = (int) $date->format('Y');
    $document->setField($solr_field, "$year");
  }
}

/**
 * Add custom facets.
 * @param array $searcher_info
 * @return array
 **/
function apachesolr_custom_facetapi_facet_info(array $searcher_info) {
  $facets = array();

  if (isset($searcher_info['types']['node'])) {
    // Audit Report last updated year.
    $facets['is_last_updated_year'] = array(
      'name' => 'is_last_updated_year',
      'label' => t('Last Updated Year'),
      'description' => t('Last updated as a year.'),
      'field' => 'is_last_updated_year',
      'dependency plugins' => array('role'),
      'default widget' => 'links',
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed' => FALSE,
      'facet mincount allowed' => FALSE,
      'map callback' => 'apachesolr_custom_map_values',
      'max callback' => FALSE,
      'default sorts' => array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );

    // Audit Report has action plan.
    $facets['ss_has_audit_action_plan'] = array(
      'name' => 'ss_has_audit_action_plan',
      'label' => t('Has Action Plan'),
      'description' => t('Audit Report has action plan (file).'),
      'field' => 'ss_has_audit_action_plan',
      'dependency plugins' => array('role'),
      'default widget' => 'links',
      'allowed operators' => array(FACETAPI_OPERATOR_AND => TRUE, FACETAPI_OPERATOR_OR => TRUE),
      'facet missing allowed' => FALSE,
      'facet mincount allowed' => FALSE,
      'map callback' => 'apachesolr_custom_map_values',
      'max callback' => FALSE,
      'default sorts' => array(
        array('active', SORT_DESC),
        array('count', SORT_DESC),
        array('display', SORT_ASC),
      ),
    );
  }
  return $facets;
}

/**
 * Map callback for if value and string are the same.
 */
function apachesolr_custom_map_values(array $values) {
  $map = array();

  foreach ($values as $val) {
    $map[$val] = $val;
  }
  return $map;
}
