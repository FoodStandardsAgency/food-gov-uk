<?php

/**
 * Implementation of hook_block_info().
 */
function consultations_custom_block_info() {

  $blocks['consultations_custom'] = array(
    'info' => t('Consultations Custom Search'),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function consultations_custom_block_view($delta = '') {

  $block = array();

  switch ($delta) {
    case 'consultations_custom':
      $content = drupal_get_form('consultations_custom_search_form');

      $block['subject'] = NULL;
      $block['content'] = $content;
      break;
  }

  return $block;
}

function consultations_custom_search_form($form_state) {

  $nation_options = consultations_custom_top_level_terms('nation');

  // Get the consultation start date options for the dropdown.
  // We do this by querying the database to find all published consultation
  // nodes whose assigned language is not Welsh, and then we make
  // the query distinct so that it returns just the years for which there are
  // matching consultations. This is better than using a range starting with the
  // earliest year for which we have consultations as it will not return years
  // in the middle of the range for which there are no consultations.
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_consultation_dates', 'd', 'n.nid = d.entity_id'); // Join with the consultation date table
  $query->addExpression("DATE_FORMAT(d.field_consultation_dates_value, '%Y')", 'CD');  // Get the consultation date in the right format, eg 2014
  $query->condition('n.status', 1); // We want only published consultations
  $query->condition('n.language', 'cy', '!='); // Exclude Welsh-language consultations.
  $query->isNotNull('d.field_consultation_dates_value'); // Exclude NULL dates
  $query->orderBy('d.field_consultation_dates_value'); // Earliest date first
  $query->distinct(); // Make the query distinct
  // Execute the query and get the first (and only) column as an array. This
  // will give us an array of the years for which consultations exist.
  $results = $query->execute()->fetchCol(0);
  // Create the array for the select box of year options based on $results.
  $year_options = array_combine($results, $results);

  $status_options = array(
	'Closed' => t('Closed'),
	'Open' => t('Open'),
  );

  $form['nation'] = array(
    '#type'          => 'select',
    '#required'      => FALSE,
    '#title'         => t('Search by nation'),
    '#default_value' => 0,
    '#empty_option'  => t('All nations'),
    '#options'       => $nation_options,
  );

  $form['year'] = array(
    '#type'          => 'select',
    '#required'      => FALSE,
    '#title'         => t('Search by year'),
    '#default_value' => 0,
    '#empty_option'  => t('All years'),
    '#options'       => $year_options,
  );

  $form['status'] = array(
    '#type'          => 'select',
    '#required'      => FALSE,
    '#title'         => t('Browse by status'),
    '#default_value' => 0,
    '#empty_option'  => t('Any status'),
    '#options'       => $status_options,
  );

  $form['submit_consultations_custom_facets'] = array(
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function consultations_custom_search_form_submit($form, &$form_state) {
  $view_name = 'consultation_search';
  $facet_count = 0;
  $facets = array();

  $view = views_get_view($view_name, $reset = FALSE);
  $path = $view->display['page_1']->display_options['path'];


  if (!empty($form_state['values']['nation'])) {
    $facet_count++;

    $facets[] = array (
      'key' => 'f[' . $facet_count . ']',
      'facet' => 'im_field_nation:' . $form_state['values']['nation'],
    );
  }

  if (!empty($form_state['values']['year'])) {
    $facet_count++;

    $facets[] = array (
      'key' => 'f[' . $facet_count . ']',
      'facet' => 'is_last_updated_year:' . $form_state['values']['year'],
    );
  }

  if (!empty($form_state['values']['status'])) {
    $facet_count++;

    $facets[] = array (
      'key' => 'f[' . $facet_count . ']',
      'facet' => 'sm_field_consultation_state:' . $form_state['values']['status'],
    );
  }

  foreach ($facets as $facet) {
    $facet_filters[$facet['key']] = $facet['facet'];
  }

  drupal_goto($path, array('query' => $facet_filters));
}

function consultations_custom_top_level_terms($vocabulary) {

  $vocabularies = taxonomy_vocabulary_get_names();

  if (isset($vocabularies[$vocabulary])) {
    $vid = $vocabularies[$vocabulary]->vid;
  }
  else {
    return array();
  }

  $terms = taxonomy_get_tree($vid, $parent = 0, $max_depth = 1, $load_entities = FALSE);

  foreach ($terms as $term) {
    $options[$term->tid] = $term->name;
  }

  return $options;
}
