<?php
/**
 * @file
 * Module code for the FSA Search spellcheck module.
 *
 * Provides spelling suggestions for site search queries.
 */


/**
 * Implements hook_menu().
 */
function fsa_search_spellcheck_menu() {
  $items = array();
  
  $items['admin/config/search/apachesolr/spellcheck'] = array(
    'title' => 'Spelling suggestions',
    'description' => 'Configure search spell checking and suggestions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_search_spellcheck_configuration_form'),
    'access arguments' => array('administer search'),
    'file' => 'fsa_search_spellcheck.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 50,
  );
  
  return $items;
}


/**
 * Implements hook_block_info().
 */
function fsa_search_spellcheck_block_info() {
  $blocks = array();
  $blocks['search_spelling_suggestions'] = array(
    'info' => t('Search spelling suggestions'),
  );
  $blocks['search_sitewide_test'] = array(
    'info' => t('Site search box for search page'),
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function fsa_search_spellcheck_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'search_spelling_suggestions':
      // Create an empty block.
      $block['subject'] = NULL;
      $block['content'] = NULL;

      // If spellcheck is not enabled, return an empty block now.
      $spellcheck_enabled = variable_get('fsa_search_spellcheck_enabled');
      if (empty($spellcheck_enabled)) {
        return $block;
      }

      // Populate the block content
      $block['content'] = array(
        '#theme' => 'search_spelling_suggestions',
        '#keyword' => !empty($_GET['keyword']) ? $_GET['keyword'] : NULL,
        '#original_query' => !empty($_GET['original_query']) ? $_GET['original_query'] : NULL,
        '#suggestion' => !empty($_GET['suggestion']) ? $_GET['suggestion'] : NULL,
        '#hits' => isset($_GET['hits']) ? intval($_GET['hits']) : NULL,
        '#ch' => isset($_GET['ch']) ? intval($_GET['ch']) : NULL,
        '#cs' => !empty($_GET['cs']),
        '#sk' => !empty($_GET['sk']) ? $_GET['sk'] : NULL,
        '#attached' => array(
          'css' => array(
            drupal_get_path('module', 'fsa_search_spellcheck') . "/css/search-spelling-suggestions.css",
          ),
        ),
      );
      break;

    case 'search_sitewide_test':
      $block['subject'] = NULL;
      $search_form = drupal_get_form('fsa_search_spellcheck_search_form');
      $block['content'] = array(
        '#markup' => drupal_render($search_form),
      );
      break;

  }
  return $block;
}


/**
 * Implements hook_theme().
 */
function fsa_search_spellcheck_theme() {
  return array(
    'search_spelling_suggestions' => array(
      'template' => 'theme/search-spelling-suggestions',
      'variables' => array(
        // The keyword to search on
        'keyword' => '',
        // The original query - if different
        'original_query' => NULL,
        // Any suggested search terms
        'suggestion' => NULL,
        // Number of hits for the original query
        'hits' => NULL,
        // Number of hits for collation (spelling suggestion)
        'ch' => NULL,
        // Whether or not the search term is considered to be spelled correctly
        'cs' => FALSE,
        // Suggested keywords
        'sk' => NULL,
      ),
    ),
  );
}


/**
 * Preprocess function for spelling suggestions block
 */
function template_preprocess_search_spelling_suggestions(&$variables) {
  $variables['show_original'] = !empty($variables['original_query']);
  $variables['show_suggestions'] = !empty($variables['suggestion']);
  $variables['original_query_link'] = !empty($variables['original_query']) ? url('search', array('query' => array('keyword' => $variables['original_query']))) : NULL;
  $variables['suggested_query_link'] = !empty($variables['suggestion']) ? url('search', array('query' => array('keyword' => $variables['suggestion']))) : NULL;

  $variables['suggested_keywords'] = !empty($variables['sk']) ? explode(',', $variables['sk']) : array();
  $variables['suggested_keyword_links'] = count($variables['suggested_keywords']) > 0 ? array() : NULL;
  if (is_array($variables['suggested_keyword_links'])) {
    foreach ($variables['suggested_keywords'] as $keyword) {
      $variables['suggested_keyword_links'][] = l($keyword, 'search', array('query' => array('keyword' => $keyword)));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function fsa_search_spellcheck_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != 'search_block_form') {
    return;
  }

  // First, replace the custom search submit handler for the global site search
  // form with our new version. We'll incorporate its functionality
  // here, but we don't want to execute its drupal_goto() implementation.
  if (!empty($form['#submit']) && is_array($form['#submit'])) {
    foreach ($form['#submit'] as $key => $handler) {
      if ($handler == 'apachesolr_custom_search_form_submit_funtion') {
        $form['#submit'][$key] = 'fsa_search_spellcheck_search_form_submit';
      }
    }
  }
}


/**
 * Custom submit function for the global site search form.
 */
function fsa_search_spellcheck_search_form_submit(&$form, &$form_state) {
  // Get the form ID.
  $form_id = $form['#form_id'];

  // Get the original query keyword
  $original_query = $form_id == 'fsa_search_spellcheck_search_form' ? $form_state['values']['keyword'] : $form_state['values']['search_block_form'];

  // Rebuild the form
  $form_state['rebuild'] = TRUE;
  
  // If we have no search query to act on, exit now.
  if (empty($original_query)) {
    return;
  }
  
  // Build the options array
  $options = array(
    'query' => array(
      'keyword' => $original_query,
    ),
  );

  // If spellcheck is not enabled, redirect to search page now.
  $spellcheck_enabled = variable_get('fsa_search_spellcheck_enabled');
  if (empty($spellcheck_enabled)) {
    drupal_goto('search', $options);
    return;
  }

  // Get the Solr spellcheck results
  $spellcheck_result = fsa_search_spellcheck_check_spelling($original_query);

  // Get the search string
  $search_str = !empty($spellcheck_result['query']) ? $spellcheck_result['query'] : $original_query;
  $options = array(
    'query' => array(
      'keyword' => $search_str,
      'hits' => $spellcheck_result['hits'],  // Number of hits for keyword
      'ch' => $spellcheck_result['ch'],      // Number of hits for collation
      'cs' => $spellcheck_result['cs'],      // Suggestion from collation
      'sk' => $spellcheck_result['sk'],      // Any suggested keywords
    ),
  );

  // If we have an original query, then add it to the query string
  if (!empty($spellcheck_result['original_query'])) {
    $options['query']['original_query'] = $spellcheck_result['original_query'];
  }

  // If we have a spelling suggestion, add it to the query string
  if (!empty($spellcheck_result['suggestion'])) {
    $options['query']['suggestion'] = $spellcheck_result['suggestion'];
  }

  // Redirect the user to the search results page - with any additional options.
  drupal_goto('search', $options);

}


/**
 * Check spelling of search query terms
 */
 function fsa_search_spellcheck_check_spelling($keyword = NULL) {
    try {
      // Get the default solr environment
      $env_id = apachesolr_default_environment();
      // Get the solr environment
      $solr = apachesolr_get_solr($env_id);
      // Create a new SolrBaseQuery
      $query = new SolrBaseQuery('select', $solr);
      // Add solr parameters for the spelling check
      //$query->addParam('qt', '/spell');
      $query->removeParam('fq');
      $query->addParam('q', $keyword);
      $query->addParam('spellcheck.q', $keyword);
      $query->addParam('spellcheck', 'true');
      $query->addParam('spellcheck.onlyMorePopular', 'true');
      $query->addParam('spellcheck.extendedResults', 'true');
      $query->addParam('spellcheck.collate', 'true');
      //$query->addParam('spellcheck.build', 'true');

      $query->addParam('spellcheck.collateExtendedResults', 'true');
      $query->addParam('spellcheck.maxCollations', '100');
      $query->addParam('spellcheck.maxCollationTries', '1');
      $query->addParam('spellcheck.accuracy', variable_get('fsa_search_spellcheck_accuracy', '0.7'));

      // Execute the query
      list($final_query, $response) = apachesolr_do_query($query);

      // For single-word queries, where the word is not a mis-spelling, we
      // probably shouldn't substitute the suggestion - cf 'fridge' v 'friday'.
      $keywords = explode(' ', preg_replace("/ +/", ' ', $keyword));
      $query_length = !empty($keyword) ? count($keywords) : 0;
      $correctly_spelled = $query_length === 1 && !empty($response->spellcheck->suggestions->correctlySpelled);

      // It may prove useful to have access to an array of keywords combining
      // those entered by the user and any suggested by Solr. We generate this
      // here.
      $suggested_keywords = count($keywords) > 1 ? $keywords : array();
      $suggested_terms = !empty($response->spellcheck->suggestions) && is_object($response->spellcheck->suggestions) ? (array) $response->spellcheck->suggestions : array();
      $remove_elements = array('correctlySpelled');
      foreach($suggested_terms as $term => $object) {
        if (in_array($term, $remove_elements)) {
          unset($suggested_terms[$term]);
        }
        if (!empty($object->suggestion) && is_array($object->suggestion)) {
          foreach ($object->suggestion as $s) {
            if (!empty($s->word) && !in_array($s->word, $keywords)) {
              $suggested_keywords[] = $s->word;
            }
          }
        }
      }
      $suggested_keywords = !empty($suggested_keywords) ? implode(',', $suggested_keywords) : NULL;

      // Number of results returned by the original search
      $hits = !empty($response->response->numFound) ? $response->response->numFound : 0;
      // Suggested alternative query
      $collation_query = !empty($response->spellcheck->suggestions->collation->collationQuery) ? $response->spellcheck->suggestions->collation->collationQuery : NULL;
      // Number of results returned by the suggested query
      $collation_hits = !empty($response->spellcheck->suggestions->collation->hits) ? $response->spellcheck->suggestions->collation->hits : 0;

      // Is there a suggestion (collation)?
      //$suggestion = !empty($response->spellcheck->suggestions->collation) ? $response->spellcheck->suggestions->collation : NULL;
      $suggestion = !empty($collation_query) && !empty($collation_hits) ? $collation_query : NULL;

      // Return an array that can be used when presenting the results.
      $return_array = array(
        // This is the query that will be executed. If there is a suggestion,
        // and Solr thinks it's incorrectly spelt, use the suggestion. Otherwise
        // use the original search term.
        'query' => !empty($suggestion) && $collation_hits > $hits && !$correctly_spelled ? $suggestion : $keyword,
        // This is set if a suggestion is used instead of the original query,
        // otherwise it is set to NULL.
        'original_query' => !empty($suggestion) && $hits < $collation_hits ? $keyword : NULL,
        // This is set if there is a suggestion, but Solr thinks the original
        // query was correctly spelt. In this case, we provide a suggestion,
        // but the search executes the original query by default.
        'suggestion' => !empty($suggestion) ? $suggestion : NULL,
        // This is the number of hits for the original query
        'hits' => $hits,
        // This is the number of hits for any collation suggestion
        'ch' => $collation_hits,
        // Whether or not the term is considered to be correctly spelled
        'cs' => $correctly_spelled,
        // Suggested keywords
        'sk' => $suggested_keywords,
      );

      return $return_array;

    }
    // Catch any exceptions and return the original query.
    catch (Exception $e) {
      return $keyword;
    }
  }

/**
 * Implements hook_facetapi_searcher_info_alter().
 * @param array $searcher_info
 */
function fsa_search_spellcheck_facetapi_searcher_info_alter(array &$searcher_info) {
  foreach ($searcher_info as &$info) {
    // Activate custom URL processor.
    $id = 'exposed_facets_searcher_' . $info['name'];
    $info['url processor'] = 'fsa_exposed_facets';
  }
}


/**
 * Implements hook_facetapi_url_processors().
 */
function fsa_search_spellcheck_facetapi_url_processors() {
  return array(
    'fsa_exposed_facets' => array(
      'handler' => array(
        'label' => t('Custom URL processor'),
        'class' => 'FsaFacetapiUrlProcessorExposedFacets',
      ),
    ),
  );
}


/**
 * Form builder - search form for the search page
 */
function fsa_search_spellcheck_search_form($form, &$form_state) {
  $form['keyword'] = array(
    '#type' => 'textfield',
    '#title' => t('Search by word or phrase'),
    '#default_value' => !empty($_GET['keyword']) ? $_GET['keyword'] : NULL,
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'class' => array(
        'search-sitewide-submit',
      ),
    ),
  );
  $form['#attributes']['class'][] = 'search-keyword-page';
  return $form;
}
