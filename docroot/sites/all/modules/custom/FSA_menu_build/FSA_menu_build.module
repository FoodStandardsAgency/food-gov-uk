<?php
/**
 * Created by PhpStorm.
 * User: Peter
 * Date: 07/07/14
 * Time: 16:34
 */

/**
 * Implements hook_menu().
 *
 * Set up admin settings callbacks, etc.
 */
function FSA_menu_build_menu() {
  $items = array();
  $items['admin/menubuild'] = array(
    'title' => 'Menubuild',
    'description' => 'Build menus after migration.',
    'page callback' => 'FSA_menu_build_page',
    'access arguments' => array('administer site'),
  );
  return $items;
}

/**
* Page controller.
 */
function FSA_menu_build_page(){
  // build a tree of all migrated nodes
  $url_tree = FSA_menu_build_process_list(FSA_menu_build_get_url_list());
  $output = kprint_r($url_tree,1);
  // disable the migrate pathauto override
  variable_set('fsa_migrate_pathauto_restrict', FALSE);
  // now, recurse through the tree, and assign menu parents

  if (isset($_REQUEST['reset'])) {
    FSA_menu_build_flag('reset');
  }

  FSA_menu_build_assign($url_tree);
  variable_set('menu_rebuild_needed', TRUE);
  return $output;
}

function FSA_menu_build_get_list_from_CSV($file){
  $urlList = array();

  $handle = fopen($file, "r");
  while(!feof($handle)){
    $line = fgetcsv ($handle);
    $urlList[] = $line[1];
  }
  fclose($handle);
  return $urlList;
}


function FSA_menu_build_clear_redirects($path = null){
  //query to delete all bad redirects
  //  delete r from url_alias a join redirect r on a.alias = r.source;
  if ($path) {
    if ($redirect = redirect_load_by_source($path)) {
      redirect_delete($redirect->rid);
    }
  }

}
/**
 * Retrieve the list of urls to process
 */
function FSA_menu_build_get_url_list($csv = false){
  if ($csv) {
    $basepath = drupal_get_path('module', 'fsa_migrate') . '/data/csv';
    $url_list = array();
    $files = array(
      'document.csv',
      'faq.csv',
      'treebranch.csv',
      'multibranch-alterian-id-list.csv'
    );
    foreach ($files as $file) {
      $url_list = array_merge($url_list, FSA_menu_build_get_list_from_CSV($basepath .'/'. $file));
    }
  }
  else {
    $url_list = array(
      '/business-industry/allergy-guide/',
      '/business-industry/allergy-guide/gluten/',
      '/business-industry/caterers/',
      '/business-industry/caterers/food-hygiene/',
      '/business-industry/caterers/food-hygiene/butchers/',
      '/business-industry/caterers/food-hygiene/food-waste/',
      '/business-industry/caterers/food-hygiene/premises-hygiene/',
      '/business-industry/caterers/food-hygiene/premises-hygiene/movable-temp-premises/',
      '/business-industry/caterers/food-hygiene/schoolfood',
      '/business-industry/caterers/food-hygiene/water-supply/',
      '/business-industry/caterers/food-law-inspections/',
      '/business-industry/caterers/haccp/',
      '/business-industry/caterers/hygieneratings/',
      '/business-industry/caterers/hygieneratings/fhrsbackground/',
      '/business-industry/caterers/hygieneratings/fhrsbackground/citizens-forums/',
      '/business-industry/caterers/hygieneratings/fhrsbackground/sotdconsultation/',
      '/business-industry/caterers/hygieneratings/fhrsbackground/sotdcorrespondence/',

    );



  }

  return $url_list;
}



/**
 * Turn a list of urls into a tree
 * @param $url_list
 * @return array
 */
function FSA_menu_build_process_list($url_list){
  // initialise the tree
  $url_tree = array();
  // sort so that we have all urls in order
  sort($url_list, SORT_STRING);
  // process all urls to build a tree

  foreach ($url_list as $url) {
    // get rid of extra slashes
    $url = trim($url,'/');
    if ($url) {
      FSA_menu_build_graft($url_tree, $url);
    }
  }
 return $url_tree;
}

/**
 * Filter a url list by a path prefix
 *
 * @param $url_list
 * @param $filter
 *
 */
function FSA_menu_build_filter($url_list, $filter) {
  $filter_list = array();
  foreach ($url_list as $url) {
    if (substr( $url,0, strlen($filter)) == $filter) {
      $filter_list[]=$url;
    }
  }
  return $filter_list;
}

/**
 * Add a specific url to the tree
 * @param $tree
 * @param $url
 */
function FSA_menu_build_graft(&$url_tree, $url) {
  // move down the tree, until we get to the place we need to be
  // start at the root
  $branch = &$url_tree;
  $branch_url = array();
  foreach (explode('/', $url) as $fragment){
    $branch_url[] = $fragment;
    // if we need to create a new piece, initialise it
    // in case there is no node here, lets set the url
    if (!isset($branch[$fragment])) {
      if (!$internal_url = drupal_lookup_path('source', implode('/',$branch_url))){
        if ($redirect = redirect_load_by_source(implode('/',$branch_url), 'en')) {
          $internal_url = $redirect->redirect;
        }
      }

      if ($internal_url){
        $branch[$fragment]['#data']['url'] = implode('/',$branch_url);
        $branch[$fragment]['#data']['source_url'] = $internal_url;
        $internal_url_array = explode('/', $internal_url);
        if ($internal_url_array[0] == 'node') {
         // find the nid for the current node
         $branch[$fragment]['#data']['nid'] = $internal_url_array[1];
        }
      }

      // extract menu data
      if (isset($branch[$fragment]['#data']['nid'])) { // if we have a node we can use menu_node
        $branch[$fragment]['#data']['mlid'] = FSA_menu_build_get_main_menu_mlid($branch[$fragment]['#data']);
      }
      // set this to false until its actually the url requested, not just a fragment
      $branch[$fragment]['#data']['process'] = false;
    }
    $branch = &$branch[$fragment];
  }
  // mark this as a node that we should be processing
  $branch['#data']['process'] = true;
}

/**
 * Returns the menu link id for the main menu
 * @param $nid
 * @return int|string
 */
function FSA_menu_build_get_main_menu_mlid($data) {
  $roots = array(
    'business-industry' => 333,
    'enforcement' => 393,
    'science' => 334,
    'about-us' => 345,
    'news-updates' => 331,
    'northern-ireland' => 1111,
    'scotland' => 1109,
    'wales' => 1112,
  );

  $result = null;
  if (array_key_exists($data['url'], $roots)) {
    $result = $roots[$data['url']];
  }
  else {
    $links = menu_node_get_links($data['nid']);
    if (is_array($links)) {
      // we found some menu links, now we need to make sure we have the correct menu
      foreach ($links as $mlid => $link_data) {
       if ($link_data->menu_name =='main-menu') {
         $result = $mlid;
        }
      }
    }
  }
  return $result;
}

/**
 * Allow nodes to be locked in the menu system
 * @param $data
 * @return bool
 */
function FSA_menu_build_flag($action = 'check', $url = null) {
  $flagged = &drupal_static(__FUNCTION__);
  $counter = &drupal_static(__FUNCTION__2);

  if (!isset($flagged)) {
    $flagged = variable_get('FSA_menu_build_processed', array());
  }
  if (!isset($counter)) {
    $counter['max'] = variable_get('FSA_menu_build_max', 99999999);
    $counter['count'] = 0;
  }
  switch ($action){
    case 'check':
      $result = false;
      if (in_array($url, $flagged)) {
        $result = true;
      }
      // check to see if we have reached our maximim
      if ($counter['count'] >= $counter['max']) {
        $result = true;
      }
    break;
    case 'set':
      if (!in_array($url, $flagged)) {
        $flagged[] = $url;
      }
      variable_set('FSA_menu_build_processed', $flagged);
      ++$counter['count'];
      $result = true;
    break;
    case 'reset':
      $flagged = array();
      variable_set('FSA_menu_build_processed',$flagged);
      $result = true;
    break;
    case 'max':
      // set the maximum number of entries to process in one cycle.
      $counter['max'] = $url;
      break;
    case 'count':
      $result = $counter['count'];
    break;
  }
  return $result;
}





/**
 * Walk through the url tree and assign menu parents to nodes.
 * @param $url_tree
 */
function FSA_menu_build_assign(&$url_tree, $plid = 0) {

  // if we have a parent link
  // check to see if we should process the current node
  // and make sure that the current node does not already have a main menu entry
  if (
      isset($url_tree['#data']) &&
      $url_tree['#data']['process']
      && !FSA_menu_build_flag('check', $url_tree['#data']['url'])
    ) {
    //? what if we have no plid?
    if (isset($url_tree['#data']['nid'])) {
      $node = node_load($url_tree['#data']['nid']);
      if (isset($url_tree['#data']['mlid'])) {
        // remove the current menu entry
        menu_link_delete($url_tree['#data']['mlid']);
      }
      $node->menu = array(
        'link_title' =>  $node->title, #todo short title
        'enabled' => 1,
        'plid' => $plid,
        'menu_name' => 'main-menu'
      );
      // enable pathauto
      $node->path['pathauto'] = true;
      // save the node with the new menu parent
      node_save($node);
      // the node object is passed by reference, so contains new menu information
      // get the menu link id from the new node
      $mlid = $node->menu['mlid'];
      $url_tree['#data']['mlid'] = $mlid;

      // get rid of bad redirects
      FSA_menu_build_clear_redirects($node->path['alias']);
      // mark node as processed
      FSA_menu_build_flag('set', $url_tree['#data']['url']);
    }
  }
  else if (isset($url_tree['#data']) && isset($url_tree['#data']['mlid'])) {
    // we have already got a menu link
    $mlid = $url_tree['#data']['mlid'];
  }
  // if by this point we have not got a menu id, pass the parent one on
  if (!isset($mlid)) {
    $mlid = $plid;
  }

  // go through all the keys at this level - except the data for this level
  foreach ($url_tree as  $key => &$branch) {
    if ($key != '#data') { // skip the data branch
      // if we have a menu item, we will keep it

      FSA_menu_build_assign($branch, $mlid);
    }
  }


}


/*
 *
 *
node->menu
-> enabled = 1
-> mlid
-> parent (main-menu:plid)

       menu_name = "main-menu"
      'mlid' => 0,
      'plid' => 0,
      'menu_name' => $menu_name,
      'weight' => 0,
      'options' => array(),
      'module' => 'menu',
      'expanded' => 0,
      'hidden' => 0,
      'has_children' => 0,
      'customized' => 0,
 *
 */