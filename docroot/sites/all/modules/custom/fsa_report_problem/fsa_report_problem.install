<?php
/**
 * @file
 * Install, update and uninstall functions for the FSA Report a problem module
 */


/**
 * Implements hook_schema().
 */
function fsa_report_problem_schema() {

  // Array to hold the new database schema
  $schema = array();

  $schema['problem_reports'] = array(
    'description' => 'The base table for food problem report entities.',
    'fields' => array(
      'rid' => array(
        'description' => 'The primary identifier for a report entity',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'User ID of the report creator.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'Report status (0 = new, 1 = processed).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'business_name' => array(
        'description' => 'The name of the business about which the report is being made.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'business_location' => array(
        'description' => 'The location of the busineess about which the report is being made.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'business_postcode' => array(
        'description' => 'The postcode of the business about which the report is being made',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'coordinates' => array(
        'description' => 'The latitude and longitude of the business',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'reporter_name' => array(
        'description' => 'The name of the person reporting the problem.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'reporter_email' => array(
        'description' => 'The email address of the person reporting the problem.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'problem_date' => array(
        'description' => 'The date when the problem happened - as reported by the reporter.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'problem_time' => array(
        'description' => 'The time at which the problem occurred - as reported by the reporter.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'problem_details' => array(
        'description' => 'A description of the food problem.',
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
        'default' => NULL,
      ),
      'area_id' => array(
        'description' => 'The area ID from MapIt',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'local_authority_name' => array(
        'description' => 'The name of the relevant local authority',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'local_authority_email' => array(
        'description' => 'The email address for the relevant local authority',
        'type' => 'varchar',
        'length' => 128,
        'not null' => FALSE,
      ),
      'local_authority_id' => array(
        'description' => 'ID of the local authority from the FHRS system',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'business_details' => array(
        'description' => 'Full business details returned by the ratings API.',
        'type' => 'blob',
        'not null' => FALSE,
        'size' => 'big',
      ),
      'email_sent' => array(
        'description' => 'Shows whether an email has been sent to the local authority.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The UNIX timestamp when the problem was reported',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The UNIX timestamp when the problem was most recently changed',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('rid'),
  );


  $schema['local_authority_areas']  = array(
    'description' => 'Table to match local authority areas as returned by MapIt to those held in the FHRS API',
    'fields' => array(
      'area_id' => array(
        'description' => 'The area ID as returned by MapIt',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'local_authority_id' => array(
        'description' => 'The local authority ID as returned by the FHRS API',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
    ),
  );


  $schema['local_authority_details'] = array(
    'description' => 'Table to hold contact details for local authorities where they don\'t exist in FHRS',
    'fields' => array(
      'aid' => array(
        'description' => 'The primary identifier for a local authority',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'local_authority_id' => array(
        'description' => 'The local authority ID as stored in the FHRS system',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'area_id' => array(
        'description' => 'The area ID provide by MapIt',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'name' => array(
        'description' => 'The name of the local authority',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 512,
      ),
      'email' => array(
        'description' => 'Email address for the local authority',
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ),
      'url' => array(
        'description' => 'URL of the local authority website',
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ),
      'fhrs_name' => array(
        'description' => 'The name of the local authority from FHRS',
        'type' => 'varchar',
        'not null' => FALSE,
        'length' => 512,
      ),
      'fhrs_email' => array(
        'description' => 'Email address for the local authority from FHRS',
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ),
      'manual' => array(
        'description' => 'Indicates whether this local authority has been entered manually via the admin GUI or imported',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The UNIX timestamp when the local authority was reported',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The UNIX timestamp when the local authority was most recently changed',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('aid'),
  );
  return $schema;
}


/**
 * Creates a table for local authority details.
 */
function fsa_report_problem_update_7002() {

  if (db_table_exists('local_authority_details')) {
    return;
  }

  $schema['local_authority_details'] = array(
    'description' => 'Table to hold contact details for local authorities where they don\'t exist in FHRS',
    'fields' => array(
      'local_authority_id' => array(
        'description' => 'The local authority ID as stored in the FHRS system',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'email' => array(
        'description' => 'Email address for the local authority',
        'type' => 'varchar',
        'length' => 256,
        'not null' => FALSE,
      ),
    ),
  );
  db_create_table('local_authority_details', $schema['local_authority_details']);
}

/**
 * Adds an area ID field to the problem reports table
 */
function fsa_report_problem_update_7003() {
  // If the field already exists, return now.
  if (db_field_exists('problem_reports', 'area_id')) {
    return;
  }
  $spec = array(
    'description' => 'The area ID from MapIt',
    'type' => 'int',
    'not null' => FALSE,
    'default' => 0,
  );
  db_add_field( 'problem_reports', 'area_id', $spec);
}

/**
 * Adds a local authority ID field to the problem reports table
 */
function fsa_report_problem_update_7004() {

  // If the field already exists, return now.
  if (db_field_exists('problem_reports', 'local_authority_id')) {
    return;
  }

  $spec = array(
    'description' => 'ID of the local authority from the FHRS system',
    'type' => 'int',
    'not null' => FALSE,
    'default' => 0,
  );
  db_add_field('problem_reports', 'local_authority_id', $spec);
}

/**
 * Adds a business postcode field to the problem reports table
 */
function fsa_report_problem_update_7005() {

  // If the field already exists, return now.
  if (db_field_exists('problem_reports', 'business_postcode')) {
    return;
  }

  $spec = array(
    'description' => 'The postcode of the business about which the report is being made',
    'type' => 'varchar',
    'length' => 128,
    'not null' => FALSE,
  );

  db_add_field('problem_reports', 'business_postcode', $spec);
}

/**
 * Adds fields to the local authorities table
 */
function fsa_report_problem_update_7006() {

  $table = 'local_authority_details';

  $fields = array(
    'aid' => array(
      'description' => 'The primary identifier for a local authority',
      'type' => 'serial',
      'unsigned' => TRUE,
      'not null' => TRUE,
      'primary key' => TRUE,
    ),
    'area_id' => array(
      'description' => 'The area ID provide by MapIt',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'name' => array(
      'description' => 'The name of the local authority',
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 512,
    ),
  );

  foreach ($fields as $field_name => $spec) {
    if (!db_field_exists($table, $field_name)) {
      if (!empty($spec['primary key'])) {
        $keys = array('primary key' => array($field_name));
        unset($spec['primary key']);
      }
      else {
        $keys = array();
      }

      db_add_field($table, $field_name, $spec, $keys);
    }
  }

}

/**
 * Adds additional columns to the local authorities data table.
 */
function fsa_report_problem_update_7007() {
  $table = 'local_authority_details';

  $fields = array(
   'fhrs_name' => array(
      'description' => 'The name of the local authority from FHRS',
      'type' => 'varchar',
      'not null' => FALSE,
      'length' => 512,
    ),
    'fhrs_email' => array(
      'description' => 'Email address for the local authority from FHRS',
      'type' => 'varchar',
      'length' => 256,
      'not null' => FALSE,
    ),
    'manual' => array(
      'description' => 'Indicates whether this local authority has been entered manually via the admin GUI or imported',
      'type' => 'int',
      'not null' => FALSE,
      'default' => 0,
    ),
    'created' => array(
      'description' => 'The UNIX timestamp when the local authority was reported',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'changed' => array(
      'description' => 'The UNIX timestamp when the local authority was most recently changed',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  foreach ($fields as $field_name => $spec) {
    if (!db_field_exists($table, $field_name)) {
      db_add_field($table, $field_name, $spec);
    }
  }


}


/**
 * Adds a URL field to the local_authority_details table.
 */
function fsa_report_problem_update_7008() {

  // If the field already exists, return now.
  if (db_field_exists('local_authority_details', 'url')) {
    return;
  }

  $spec = array(
    'description' => 'URL of the local authority website',
    'type' => 'varchar',
    'length' => 256,
    'not null' => FALSE,
  );

  db_add_field('local_authority_details', 'url', $spec);
}


/**
 * Imports text values from files - will replace any existing variable values.
 */
function fsa_report_problem_update_7009() {
  // Get the text entries.
  $text = _fsa_report_problem_text();
  // Import any corresponding text files.
  foreach ($text as $key => $properties) {
    $text_format = !empty($properties['format']) ? $properties['format'] : 'full_html';
    _fsa_report_problem_import_text($key, $text_format, TRUE);
  }
}
