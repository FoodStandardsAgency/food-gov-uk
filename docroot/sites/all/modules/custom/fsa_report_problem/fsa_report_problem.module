<?php
/**
 * @file
 * Module file for the FSA Report a problem module.
 */

/**
 * Alpha status
 */
define('FSA_REPORT_PROBLEM_STATUS_ALPHA', 1);

/**
 * Beta status
 */
define('FSA_REPORT_PROBLEM_STATUS_BETA', 2);

/**
 * Production status
 */
define('FSA_REPORT_PROBLEM_STATUS_PRODUCTION', 0);

/**
 * Offline status
 */
define('FSA_REPORT_PROBLEM_STATUS_OFFLINE', 3);

/**
 * Status
 */
define('FSA_REPORT_PROBLEM_STATUS', variable_get('fsa_report_problem_service_status', FSA_REPORT_PROBLEM_STATUS_PRODUCTION));

/**
 * Group name for this module's variables
 */
define('FSA_REPORT_PROBLEM_VARIABLE_GROUP_NAME', 'fsa_report_problem');

/**
 * URL for the report a food problem service
 */
define('FSA_REPORT_PROBLEM_PATH', _fsa_report_problem_node_path());

/**
 * Default MapIt base URL. Can be overridden via the admin interface.
 */
define('FSA_REPORT_PROBLEM_MAPIT_BASE_URL', 'http://mapit.mysociety.org');

/**
 * Default MapIt user agent - used for usage tracking
 */
define('FSA_REPORT_PROBLEM_MAPIT_USER_AGENT', 'UK Food Standards Agency (http://www.food.gov.uk)');

/**
 * Object type for CTools object cache
 */
define('FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_TYPE', 'submission');

/**
 * Object name for CTools object cache
 */
define('FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_NAME', 'search_for_local_authority_submission');

/**
 * Text entry category - errors
 */
define('FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR', 'error');

/**
 * Text entry category - step titles
 */
define('FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE', 'step_title');

/**
 * Text entry category - service status
 */
define('FSA_REPORT_PROBLEM_TEXT_CATEGORY_SERVICE_STATUS', 'service_status');

/**
 * Text entry category - general
 */
define('FSA_REPORT_PROBLEM_TEXT_CATEGORY_GENERAL', 'general');

/**
 * Implements hook_permission().
 */
function fsa_report_problem_permission() {

  $permissions = array();

  $permissions['view food problem reports'] = array(
    'title' => t('View food problem reports'),
    'description' => t('View reports of problems with food premises'),
  );

  $permissions['administer food problem reporting'] = array(
    'title' => t('Administer food problem reporting'),
    'description' => t('Perform administration functions relating to the food problem reporting system'),
  );

  return $permissions;

}

/**
 * Implements hook_menu().
 */
function fsa_report_problem_menu() {
  $items = array();

  $items['admin/reports/food-problems'] = array(
    'title' => 'Food problem reports',
    'description' => 'View reports of problems with food premises',
    'access arguments' => array('view food problem reports'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_view_reports'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/reports/food-problems/%'] = array(
    'title' => 'Food problem report',
    'description' => 'View detail for this food problem report',
    'page callback' => 'problem_report_view',
    'page arguments' => array(3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/reports/food-problems/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/reports/food-problems/%/forward'] = array(
    'title' => 'Forward',
    'description' => 'Forward this food problem report by email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_report_forward_form', 3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reports/food-problems/%/authority'] = array(
    'title' => 'Set local authority',
    'description' => 'Set the local authority for this food problem report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_report_local_authority_form', 3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/foodproblems'] = array(
    'title' => 'Food problem reporting',
    'description' => 'Administer food problem reporting',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer food problem reporting'),
    'page arguments' => array('fsa_food_report_admin_form'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/config'] = array(
    'title' => 'Configuration',
    'description' => 'Administer food problem reporting configuration',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer food problem reporting'),
    'page arguments' => array('fsa_food_report_admin_form'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/foodproblems/text'] = array(
    'title' => 'Edit text',
    'description' => 'Edit text elements used in the food problem reporting system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_food_report_text_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
  );

  $items['admin/config/foodproblems/emails'] = array(
    'title' => 'Manage emails',
    'description' => 'Manage emails generated by the food problem reporting system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_food_report_email_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 20,
  );

  $items['admin/config/foodproblems/api'] = array(
    'title' => 'API settings',
    'description' => 'Manage and configure API settings for the food problem reporting system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_api_admin_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 40,
  );

  $items['admin/config/foodproblems/authorities'] = array(
    'title' => 'Local authority data',
    'description' => 'Manage local authority data for use in the food problem reporting system',
    'page callback' => 'fsa_report_problem_local_authorities_new',
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  $items['admin/config/foodproblems/authorities/add'] = array(
    'title' => 'Add new local authority',
    'description' => 'Add a new local authority for use with the food problem reporting system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  $items['admin/config/foodproblems/authorities/%'] = array(
    'title' => 'View Local authority data',
    'description' => 'Manage details for this local authority',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_view_form', 4),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/%/view'] = array(
    'title' => 'View',
    'weight' => -10,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/config/foodproblems/authorities/%/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit details for this local authority',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form', 4),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/foodproblems/authorities/add/%'] = array(
    'title' => 'Edit Local authority data',
    'description' => 'Edit details for a local authority',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form', '0', 5),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/import'] = array(
    'title' => 'Import local authority data',
    'description' => 'Import local authority data from MapIt and the FHRS system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authorities_import_form_new'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  // If the Rate module is enabled, show a tab for ratings in the admin UI
  if (module_exists('rate')) {
    $items['admin/config/foodproblems/ratings'] = array(
      'title' => 'Ratings',
      'description' => 'View user ratings for the service',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fsa_report_problem_rating_results_form'),
      'access arguments' => array('administer food problem reporting'),
      'file' => 'fsa_report_problem.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'weight' => 50,
    );

    $items['admin/config/foodproblems/ratings/export'] = array(
      'title' => 'Export rating data',
      'description' => 'Export rating data for the service',
      'page callback' => '_fsa_report_problem_export_rating_data',
      'access arguments' => array('administer food problem reporting'),
      'type' => MENU_LOCAL_ACTION,
      'weight' => 100,
    );
  }

  $items['admin/config/foodproblems/nodes'] = array(
    'title' => 'Autocomplete for nodes',
    'page callback' => '_fsa_report_problem_nodes_autocomplete',
    'access arguments' => array('administer food problem repororting'),
    'type' => MENU_CALLBACK,
  );

  $items['postcode-autocomplete'] = array(
    'title' => 'Autocomplete for postcodes',
    'page callback' => '_fsa_report_problem_postcode_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Implements hook_menu_alter().
 */
function fsa_report_problem_menu_alter(&$items) {
  // If RATE_PATH_AHAH is not defined, exit now
  if (!defined('RATE_PATH_AHAH')) {
    return;
  }

  // If there is no item for RATE_PATH_AHAH, exit now
  if (empty($items[RATE_PATH_AHAH])) {
    return;
  }

  // Alter the callback for RATE_PATH_AHAH to enable other languages
  $items[RATE_PATH_AHAH] = array(
    'page callback' => 'fsa_report_problem_rate_vote_ahah',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );

}

/**
 * Implements hook_block_info().
 */
function fsa_report_problem_block_info() {
  $blocks = array();

  // Report a food problem
  $blocks['report_problem_form'] = array(
    'info' => t('Report a food problem'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Search for local authority
  $blocks['local_authority_search'] = array(
    'info' => t('Search for local authority'),
    'cache' => DRUPAL_NO_CACHE,
  );

  // Find a food safety team
  $blocks['find_food_safety_team'] = array(
    'info' => t('Find a food safety team'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function fsa_report_problem_block_view($delta = '') {

  // Array to hold the block.
  $block = array();

  // At present, if data capture is turned off, we show search for local
  // authority, while if it is turned on, we show report a food problem. This
  // will change in the next iteration once we have provided two separate
  // services, but for now this is the way it works.
  // @todo Handle differently once two separate services defined.
  if (!_fsa_report_problem_capture_user_data() && $delta != 'find_food_safety_team') {
    $delta = 'local_authority_search';
  }

  // @todo Get rid of this switch() statement; it's not necessary.
  switch ($delta) {

    // Search for local authority
    case 'local_authority_search':
      $block['content'] = _fsa_report_problem_block_content($delta);
      break;

    // Search for an establishment form
    case 'report_problem_form':
      $block['content'] = _fsa_report_problem_block_content($delta);
      break;

    case 'find_food_safety_team':
      $block['content'] = _fsa_report_problem_block_content($delta);
      break;

      // Check the API status - this is just for testing purposes
      // @todo Remove this/incorporate it properly


      if (FSA_REPORT_PROBLEM_STATUS == FSA_REPORT_PROBLEM_STATUS_OFFLINE || !_fsa_report_problem_api_status()->healthy) {
        $block['content'] = array(
          'heading' => array(
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#value' => t('Service currently unavailable'),
            '#attributes' => array(
              'class' => array('service-offline'),
            ),
          ),
          'message' => array(
            '#type' => 'html_tag',
            '#tag' => 'p',
            '#value' => _fsa_report_problem_status_message(FSA_REPORT_PROBLEM_STATUS_OFFLINE),
            '#attributes' => array(
              'class' => array('service-offline'),
            ),
          ),
          '#attached' => array(
            'css' => array(
              drupal_get_path('module', 'fsa_report_problem') . '/css/report-problem.css',
            ),
          ),
        );
        break;
      }
      module_load_include('inc', 'fsa_report_problem', 'includes/form');
      $block['content'] = drupal_get_form('fsa_report_problem_form');

      if (!empty($block['content'])) {
        $contextual_links = array(
          'admin/config/foodproblems',
          array(),
        );
        $block['content']['#contextual_links']['fsa_report_problem'] = $contextual_links;
      }

      break;
  }

  return $block;
}


/**
 * Returns the results of a search for premises.
 *
 * This function is not currently used as it has been superseded by the
 * Google Places search.
 *
 * @deprecated Use Google Places instead
 */
function fsa_report_problem_get_results($name, $address) {
  if (empty($name) || empty($address)) {
    return '';
  }

  $endpoint = 'Establishments';
  $args = array();
  $params = array(
    'name' => $name,
    'address' => $address,
  );

  $request = fhrs_api_make_request($endpoint, $args, $params);

  if (!empty($request)) {
    $data = drupal_json_decode($request);
    return $data;

    // Get results meta data
    $meta = !empty($data['meta']) ? $data['meta'] : array();
    $total_count = !empty($meta['totalCount']) ? $meta['totalCount'] : 0;

    if ($total_count === 0) {
      return array(
        '#prefix' => '<p>',
        '#markup' => t('Sorry, we couldn\'t find any matching establishments.'),
        '#suffix' => '</p>',
      );
    }

    if (!empty($data['meta']['totalCount'])) {
      $establishments[] = array(
        '#markup' => format_plural($data['meta']['totalCount'], 'Your search for "%name" in "%address" brought up 1 result.', 'Your search for "%name" in "%address" brought up @count results.', array('%name' => $name, '%address' => $address)),
      );
    }
    if (!empty($data['establishments'])) {
      foreach ($data['establishments'] as $establishment) {
        $tester = array(
          '#type' => 'food_establishment',
          'establishment_details' => $establishment,
        );
        $establishments[] = $tester;
      }
    }
  }

  return $establishments;
}



/**
 * Get the parameters supplied - either in query string or POST
 */
function _fsa_report_problem_get_params() {
  $params = $_SERVER['REQUEST_METHOD'] == 'POST' ? $_POST : $_GET;
  return array_merge($_GET, $_POST);
  return $params;
}



/**
 * Implements hook_element_info().
 */
function fsa_report_problem_element_info() {
  $types['food_establishment'] = array(
    '#theme' => 'food_establishment',
    '#pre_render' => array('fsa_report_problem_pre_render_food_establishment'),
  );
  $types['form_intro'] = array(
    '#input' => FALSE,
    '#theme' => 'form_intro',
  );
  return $types;
}



/**
 * Implements hook_theme().
 */
function fsa_report_problem_theme($existing, $type, $theme, $path) {
  return array(
    'food_establishment' => array(
      'render element' => 'elements',
      'template' => 'theme/food-establishment',
    ),
    'problem_report' => array(
      'template' => 'theme/problem-report',
      'variables' => array(
        'report' => NULL,
      ),
    ),
    'form_intro' => array(
      'template' => 'theme/form-intro',
      'render element' => 'element',
    ),
    'local_authority_details' => array(
      'template' => 'theme/local-authority-details',
      'variables' => array(
        'local_authority' => NULL,
        'delta' => NULL,
      ),
    ),
    'external_api_status' => array(
      'template' => 'theme/external-api-status',
      'variables' => array(
        'name' => t('External API'),
        'status' => array(),
      ),
    ),
    'report_problem_block_content' => array(
      'template' => 'theme/report-problem-block-content',
      'variables' => array(
        'step_count' => NULL,
        'current_step' => NULL,
        'step_title' => NULL,
        'status_message' => NULL,
        'content' => NULL,
      ),
    ),
    'rate_template_circles' => array(
      'variables' => array('links' => NULL, 'results' => NULL, 'mode' => NULL, 'just_voted' => FALSE, 'content_type' => NULL, 'content_id' => NULL, 'display_options' => NULL),
      'template' => 'theme/rate-template-circles',
    ),
    'circle_rating' => array(
      'variables' => array(
        'score' => 0,
        'description' => NULL,
        'descriptions' => array(
          1 => t('Poor'),
          2 => t('Fair'),
          3 => t('Good'),
          4 => t('Very good'),
          5 => t('Excellent'),
        ),
      ),
    ),
  );
}


/**
 * Implements hook_theme_registry_alter().
 *
 * We use this hook to add the generic preprocess function to every relevant
 * hook.
 */
function fsa_report_problem_theme_registry_alter(&$theme_registry) {
  // List of relevant theme hooks.
  $hooks = array(
    'problem_report',
  );
  // Add the generic preprocess function to the start of the array for each of
  // the relevant hooks.
  foreach ($hooks as $hook) {
    if (!empty($theme_registry[$hook])) {
      array_unshift($theme_registry[$hook]['preprocess functions'], '_fsa_report_problem_preprocess_problem_report');
    }
  }
}



/**
 * Preprocess function for food establishment elements
 * @param array $variables
 *   Template variables - passed by reference
 *
 * @see food-establishment.tpl.php
 */
function template_preprocess_food_establishment(&$variables) {
  $establishment = $variables['elements'];
  $variables['id'] = $establishment['#establishment_details']['test_id'];
  $variables['name'] = $establishment['name'];
  $variables['address'] = $establishment['address'];
  $variables['classes_array'][] = 'food-establishment-' . $establishment['id'];
}

/**
 * Process function for food establishment elements
 */
function template_process_food_establishment(&$variables) {
  // Make the address into a string for rendering.
  //$variables['address'] = !empty($variables['address_array']) ? implode(', ', $variables['address_array']) : '';
}


/**
 * Pre-render function for food establishments.
 */
function fsa_report_problem_pre_render_food_establishment($element) {
  $establishment_details = !empty($element['#establishment_details']) ? $element['#establishment_details'] : array();
  $element['id'] = $establishment_details['id'];
  $element['name'] = $establishment_details['name'];
  $element['address'] = $establishment_details['formatted_address'];
  $element['lat'] = !empty($establishment_details['geometry']['location']['lat']) ? $establishment_details['geometry']['location']['lat'] : 0;
  $element['lng'] = !empty($establishment_details['geometry']['location']['lng']) ? $establishment_details['geometry']['location']['lng'] : 0;
  return $element;
}


/**
 * Implements hook_entity_info().
 */
function fsa_report_problem_entity_info() {

  // An array to hold the entity information.
  $info = array();

  $info['problem_report'] = array(
    'label' => t('Problem report'),
    'base table' => 'problem_reports',
    'entity keys' => array(
      'id' => 'rid',
    ),
    'entity class' => 'Entity',
    'controller class' => 'ProblemReportEntityController',
    'uri callback' => 'problem_report_uri',
    'module' => 'fsa_report_problem',
    'fieldable' => TRUE,
    'bundles' => array(),
  );

  $info['local_authority'] = array(
    'label' => t('Local authority'),
    'base table' => 'local_authority_details',
    'entity keys' => array(
      'id' => 'aid',
    ),
    'entity class' => 'Entity',
    'controller class' => 'LocalAuthorityEntityController',
    'uri callback' => 'local_authority_uri',
    'module' => 'fsa_report_problem',
    'fieldable' => TRUE,
    'bundles' => array(),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function fsa_report_problem_entity_property_info() {
  $entity_property_info = array();

  $entity_property_info['local_authority'] = array(
    'properties' => array(
      'local_authority_id' => array(
        'label' => t('FHRS ID'),
        'type' => 'integer',
        'description' => t('Local authority ID from FHRS'),
        'schema field' => 'local_authority_id',
      ),
    ),
  );


  return $entity_property_info;
}


/**
 * Extending the EntityAPIController for the Project entity.
 */
class ProblemReportEntityController extends EntityAPIController {

  /**
   * Build the entity content
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    $build['#report'] = $entity;
    return $build;
  }

}

/**
 * Extending the EntityAPIController for the Project entity.
 */
class LocalAuthorityEntityController extends EntityAPIController {

  /**
   * Build the entity content
   */
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    $build['#report'] = $entity;
    return $build;
  }

}



/**
 * Entity uri callback.
 */
function problem_report_uri($report) {
  return array(
    'path' => 'admin/reports/food-problems/' . $report->rid,
  );
}

/**
 * Entity uri callback.
 */
function local_authority_uri($local_authority) {
  return array(
    'path' => 'admin/config/foodproblems/authorities/' . $local_authority->aid,
  );
}



/**
 * Preprocess function for problem_reports.
 */
function template_preprocess_problem_report(&$variables) {

  $report = !empty($variables['report']) ? $variables['report'] : NULL;


  $variables['unsent_warning'] = empty($report->email_sent) ? t('Please note, this report has not yet been forwarded to the relevant local authority') : '';
  if (empty($report->email_sent)) {
  }



  $variables['local_authority_email'] = !empty($variables['local_authority_email']) ? l($variables['local_authority_email'], 'mailto:' . $variables['local_authority_email']) : '';

  $variables['local_authority'] = array(
    '#type' => 'item',
    '#markup' => $variables['local_authority_name'] . (!empty($variables['local_authority_email']) ? ', ' . $variables['local_authority_email'] : ''),
    '#title' => t('Local authority'),
  );


  $variables['reporter_name'] = array(
    '#type' => 'item',
    '#markup' => $variables['reporter_name'] . (!empty($variables['reporter_email']) ? ', ' . l($variables['reporter_email'], 'mailto:' . $variables['reporter_email']) : ''),
    '#title' => t('Reported by'),
  );

  $variables['problem_date'] = array(
    '#type' => 'item',
    '#title' => t('Date the problem occurred'),
    '#markup' => format_date($report->problem_date, 'medium'),
  );

  $variables['problem_details'] = array(
    '#type' => 'item',
    '#title' => t('Problem details'),
    '#markup' => check_markup($variables['problem_details'], 'full_html'),
  );

}




/**
 * Get results from the Google Places API via text search.
 *
 * @param string $name
 *   The name of the business
 *
 * @param string $location
 *   The location of the business
 *
 * @param integer $max_results
 *   The maximum number of results to return. Note that this currently has no
 *   effect since the maximum number of results per request is limited by
 *   Google.
 *
 * @throws GooglePlacesApiException
 *   If there are any issues with the request, including standard HTTP errors,
 *   as well as Google Places API errors such as invalid keys or API request
 *   limit exceeded, a GooglePlacesApiException will be thrown. The calling
 *   code should catch these exceptions and handle them appropriately,
 *   including providing user feedback and logging. This function does not
 *   itself provide Watchdog logging.
 *
 * @return array
 *   An array of Google Places results. This will be empty if no results are
 *   returned.
 */
function fsa_report_problem_get_google_results($name, $location = '', $user_location = NULL, $max_results = 60) {

  // Get the endpoint
  $endpoint = variable_get('fsa_report_problem_google_places_api_endpoint', 'https://maps.googleapis.com/maps/api/place/textsearch/json');

  // Get the API key
  $api_key = variable_get('fsa_report_problem_google_places_api_key');

  // If we don't have an API key, throw an exception now
  if (empty($api_key)) {
    throw new GooglePlacesApiException(t('No Google Places API key available.'), GOOGLE_PLACES_EXCEPTION_NO_API_KEY);
    _fsa_report_problem_api_status('google_places', array('healthy' => FALSE, 'statusDescription' => 'No Google Places API code available'));
  }

  // Number of results returned per request. This is set by Google.
  $results_per_request = 20;

  // Set the minimum number of results. We'll re-query Google Places until we
  // either get this number or run out of pages.
  $result_threshold = variable_get('fsa_report_problem_google_places_min_results', 5);

  // Number of seconds to wait before re-querying Google Places
  $time_between_requests = variable_get('fsa_report_problem_google_places_delay', 2);

  // Build query parameters
  $query = "$name $location";
  $options = array(
    'query' => array(
      'key' => $api_key,
      'query' => $query,
      'types' => 'establishment',
      'components' => 'country:GB', // This doesn't actually appear to work
    ),
  );

  // Are we using location?
  $use_location = FALSE;
  if ($use_location) {
    $client_ip = !empty($_SERVER['HTTP_X_REAL_IP']) ? $_SERVER['HTTP_X_REAL_IP'] : '';
    $location = !empty($user_location) ? $user_location : _fsa_report_problem_get_location_by_ip($client_ip);
    if (!empty($location)) {
      $options['query']['location'] = $location;
      $options['query']['radius'] = 50000;
    }
  }

  // Array to hold the results to return.
  $results = array();
  // String variable for the next page token
  $next_page_token = '';
  // Number of requests made so far
  $request_count = 0;

  // Start making requests to the Google Places API
  do {
    if ($request_count > 0) {
      sleep($time_between_requests);
    }
    if (!empty($next_page_token) && $next_page_token != 'not-set') {
      $options['query']['pagetoken'] = $next_page_token;
    }

    // Construct the Google Places endpoint URL, including query
    $url = url($endpoint, $options);

    // Make the request to the API
    $places = drupal_http_request($url);

    // Get the request data
    $data = !empty($places->data) ? drupal_json_decode($places->data) : array();
    // Get the status description
    $status = !empty($data['status']) ? $data['status'] : NULL;
    // Get the HTTP response code
    $http_code = !empty($places->code) ? $places->code : 0;

    // If the HTTP response code is anything other than 200, throw an exception.
    if ($places->code != 200) {
      $error_message = !empty($places->error) ? $places->error : t('HTTP error');
      throw new GooglePlacesApiException($error_message, GOOGLE_PLACES_EXCEPTION_HTTP_ERROR, $http_code);
    }

    // If the Google Places API didn't like the key, throw an exception
    if ($status == 'REQUEST_DENIED') {
      $error_message = !empty($data['error_message']) ? $data['error_message'] : t('Google Places API denied request');
      _fsa_report_problem_api_status('google_places', array('healthy' => FALSE, 'httpCode' => $http_code, 'statusDescription' => $error_message));
      throw new GooglePlacesApiException($error_message, GOOGLE_PLACES_EXCEPTION_INVALID_KEY, $http_code);
    }

    // If we're over the API request limit, throw and exception
    if ($status == 'OVER_QUERY_LIMIT') {
      $error_message = !empty($data['error_message']) ? $data['error_message'] : t('Google Places API over query limit');
      _fsa_report_problem_api_status('google_places', array('healthy' => FALSE, 'httpCode' => $http_code, 'statusDescription' => $error_message));
      throw new GooglePlacesApiException($error_message, GOOGLE_PLACES_EXCEPTION_OVER_QUERY_LIMIT, $http_code);
    }

    // Catch any other unspecified errors
    if (!empty($data['error_message'])) {
      throw new GooglePlacesApiException($data['error_message'], GOOGLE_PLACES_EXCEPTION_UNSPECIFIED, $http_code);
    }

    $request_count++;
    if (!empty($data)) {
      $next_page_token = !empty($data['next_page_token']) ? $data['next_page_token'] : 'not-set';
      if (!empty($data['results'])) {
        foreach ($data['results'] as $key => $result) {
          if (strpos($result['formatted_address'], 'United Kingdom') !== FALSE || strpos($result['formatted_address'], 'UK') !== FALSE) {
            $results[] = $result;
          }
        }
      }
    }
  }
  while ($request_count < $max_results/$results_per_request && count($results) < $result_threshold && $next_page_token != 'not-set');

  // Return the results array.
  return $results;
}

/**
 * Gets local authority details from MapIt based on latitude and longitude
 *
 * @param float $lng
 *   The longitude for which to find a local authority
 *
 * @param float $lat
 *   The latitude for which to find a local authority
 *
 * @return array
 *   An associative array of local authority properties
 *
 * @throws MapItApiException
 *   An exception is thrown if the request to the API returns anything but a 200
 *   response. Any calling code must handle this exception.
 */
function fsa_report_problem_get_local_authority($lng, $lat) {
  $endpoint = _fsa_report_problem_mapit_url('point/4326');
  $url = url("$endpoint/$lng,$lat", array('query' => array('type' => implode(',', _fsa_report_problem_mapit_authority_types()))));
  $area_data = drupal_http_request($url, _fsa_report_problem_mapit_http_options());

  // Get the data - if available.
  $data = !empty($area_data->data) ? drupal_json_decode($area_data->data) : NULL;

  // If response code other than 200, or if data is empty, throw an exception.
  if (empty($area_data->code) || $area_data->code != '200') {
    _fsa_report_problem_api_status('mapit', array('healthy' => FALSE, 'httpCode' => $area_data->code));
    throw new MapItApiException('', 0, $area_data);
  }

  // Return the data
  return current($data);
}


/**
 * Gets local authority details from MapIt based on postcode
 *
 * @param string $postcode
 *   The postcode for which to look up the local authority
 *
 * @return array
 *   An associative array of local authority properties
 */
function fsa_report_problem_get_local_authority_by_postcode($postcode = NULL) {

  if (empty($postcode)) {
    return array();
  }
  $postcode = urlencode($postcode);
  $endpoint = _fsa_report_problem_mapit_url('postcode');
  $url = url("$endpoint/$postcode");
  $area_data = drupal_http_request($url, _fsa_report_problem_mapit_http_options());
  $data = drupal_json_decode($area_data->data);

  // If response code other than 200, or if data is empty, throw an exception.
  if (empty($area_data->code) || ($area_data->code != '200' && $area_data->code != '404')) {
    _fsa_report_problem_api_status('mapit', array('healthy' => FALSE, 'httpCode' => $area_data->code));
    throw new MapItApiException('', 0, $area_data);
  }

  $areas = !empty($data['areas']) ? $data['areas'] : array();
  $area_types = _fsa_report_problem_mapit_authority_types();
  $selected_area = array();
  foreach ($areas as $id => $area) {
    if (!empty($area['type']) && in_array($area['type'], $area_types)) {
      $selected_area = $area;
    }
  }
  return $selected_area;
}


/**
 * Returns an email address for a local authority, based on the MapIt area ID
 *
 * Local authority email addresses are provided by the FHRS API via its
 * Authorities endpoint. In order to get the correct ID to query the FHRS API,
 * we have to map the MapIt area ID to the corresponding FHRS local authority
 * ID. We do this through the `local_authority_areas` table. If we find no
 * match, then we return an empty string.
 *
 * @param int $id
 *   The MapIt area ID
 *
 * @return string
 *   If a corresponding local authority is returned by the FHRS API, then we
 *   return the email address associated with it.
 *   If no email address is found, or if something else goes wrong, we return
 *   a zero-length string.
 *
 * @see fsa_report_problem_get_fhrs_authorities()
 */
function fsa_report_problem_get_local_authority_email_address($id) {

  // If we don't have an ID or it's not a number, return an empty string now.
  if (empty($id) || !is_numeric($id)) {
    return '';
  }

  // Query the local_authority_areas table to find a corresponding ID for use in
  // the FHRS API. Return the results as an associative array keyed on the ID.
  $query = db_select('local_authority_areas', 'l');
  $query->fields('l');
  $query->fields('d', array('email'));
  $query->leftJoin('local_authority_details', 'd', 'l.local_authority_id = d.local_authority_id');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  // If we don't have a corresponding FHRS ID, return an empty string.
  if (empty($results[$id]) || empty($results[$id]->local_authority_id)) {
    return '';
  }

  // If we already have an email address in our override table, use that.
  // Otherwise, Query the FHRS API, passing the local authority ID to see if we
  // can get any results.
  $local_authority = !empty($results[$id]->email) ? (object) array('Email' => $results[$id]->email) : fsa_report_problem_get_fhrs_authorities($results[$id]->local_authority_id);

  // The returned value should be an object, and its Email property should
  // contain the local authority's email address. If not, return an empty
  // string.
  if (!is_object($local_authority) || empty($local_authority->Email)) {
    return '';
  }

  // Return the email address.
  return $local_authority->Email;

}


/**
 * Gets the local authority ID from FHRS, based on MapIt area ID.
 *
 * @param int $id
 *   Area ID from MapIt
 *
 * @return int
 *   ID of the local authority in the FHRS system. 0 if none found.
 */
function fsa_report_problem_get_local_authority_id($id) {
  // If we don't have an ID or it's not a number, return 0.
  if (empty($id) || !is_numeric($id)) {
    return 0;
  }

  // First query the locally-stored local authority data to see if we have a
  // match.
  // @todo Use EntityFieldQuery here instead. Need to expose area id first.
  $query = db_select('local_authority_details', l);
  $query->fields('l');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  // Query the local_authority_areas table to find a corresponding ID for use in
  // the FHRS API. Return the results as an associative array keyed on the ID.
  $query = db_select('local_authority_areas', 'l');
  $query->fields('l');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  // If we don't have a corresponding FHRS ID, return an empty string.
  if (empty($results[$id]) || empty($results[$id]->local_authority_id)) {
    return 0;
  }

  return $results[$id]->local_authority_id;
}


/**
 * Gets a list of areas from MapIt
 *
 * @param array $types
 *   The types of area to return
 *
 * @return array
 *   An associative array of areas matching the $types parameter
 */
function fsa_report_problem_get_mapit_areas($types = array()) {
  if (empty($types)) {
    $types = _fsa_report_problem_mapit_authority_types();
  }
  $endpoint = _fsa_report_problem_mapit_url('areas');
  $url = "$endpoint/" . implode(',', $types);
  $areas = drupal_http_request($url, _fsa_report_problem_mapit_http_options());

  // If response code other than 200, throw an exception.
  if (empty($areas->code) || $areas->code != '200') {
    _fsa_report_problem_api_status('mapit', array('healthy' => FALSE, 'httpCode' => $areas->code));
    throw new MapItApiException('', 0, $areas);
  }

  return drupal_json_decode($areas->data);
}


/**
 * Returns a MapIt area based on FHRS ID
 * @param int $id
 *   The FHRS ID of the local authority region.
 */
function fsa_report_problem_get_mapit_area_by_fhrs_id($id) {
  if (empty($id)) {
    return 0;
  }

  $query = db_select('local_authority_areas', 'l');
  $query->condition('local_authority_id', $id, '=');
  $query->fields('l', array('area_id'));
  $result = $query->execute()->fetchCol(0);
  return !empty($result[0]) ? $result[0] : 0;
}


/**
 * Returns a local authority object based on MapIt area ID
 * @param type $area_id
 */
function fsa_report_problem_get_local_authority_by_area_id($area_id = 0) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'local_authority')
    ->propertyCondition('area_id', $area_id);
  $result = $query->execute();
  if (empty($result) || empty($result['local_authority'])) {
    return FALSE;
  }
  $authorities = entity_load('local_authority', array_keys($result['local_authority']));
  if (empty($authorities)) {
    return FALSE;
  }
  else {
    return current($authorities);
  }
}


/**
 * Gets local authority data from the FHRS API
 *
 * @param int $id
 *   (optional) The ID of the authority for which to retrieve data
 *
 * @return array
 *   Associative array of local authority data from the FHRS API. If no $id
 *   parameter is supplied, all authority data is returned. If an $id is
 *   supplied and a matching authority is found, data for just this authority is
 *   returned. If no matching authority is found, an empty array is returned.
 */
function fsa_report_problem_get_fhrs_authorities($id = NULL) {
  $endpoint = 'Authorities';
  $args = !empty($id) ? array($id) : array();
  $params = array();
  $request = fhrs_api_make_request($endpoint, $args, $params);

  if (empty($request->success) || empty($request->data)) {
    return array();
  }

  if (!is_array($request->data)) {
    return $request->data;
  }

  $fhrs_authorities = array();

  foreach ($request->data as $fhrs_authority) {
    $fhrs_authorities[$fhrs_authority->LocalAuthorityId] = $fhrs_authority;
  }

  return $fhrs_authorities;

  //return !empty($request->success) && !empty($request->data) ? $request->data : array();


  return $request->data;


  if (empty($id)) {
    return json_decode($request)->authorities;
  }
  else {
    return json_decode($request);
  }
}



/**
 * Implements hook_mail().
 *
 * @param type $key
 * @param type $message
 * @param type $params
 */
function fsa_report_problem_mail($key, &$message, $params) {

  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    case 'problem_report':

      $report = $params['report'];

      $message_details = _fsa_report_problem_email('problem_report');
      $message_body = !empty($message_details['message']) ? $message_details['message'] : '';

      // If we have no local authority email, set priority to high as someone
      // will need to forward it on. Many email clients will take no notice of
      // this, but some may treat these messages differently.
      if (empty($report->local_authority_email)) {
        $message['headers']['X-Priority'] = "1 (Highest)";
      }

      $message['to'] = !empty($report->local_authority_email) ? $report->local_authority_email : $message_details['default_recipient'];

      $message['from'] = !empty($message_details['sender_email']) ? $message_details['sender_email'] : $message['from'];
      $message['headers']['From'] = $message['from'];

      $message['subject'] = FSA_REPORT_PROBLEM_STATUS > FSA_REPORT_PROBLEM_STATUS_PRODUCTION ? 'TEST :: ' : '';
      $message['subject'] .= empty($report->local_authority_email) ? t('ACTION REQUIRED:') . ' ' : '';

      $message['subject'] .= token_replace($message_details['subject'], array('report' => $params['report']));
      //$message['subject'] .= t('Food Problem report');
      //$message['subject'] .= !empty($params['report']->business_name) ? ' - ' . $params['report']->business_name : '';
      //$message['body'][] = drupal_render($message_body);

      if (FSA_REPORT_PROBLEM_STATUS > FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
        $status_message = _fsa_report_problem_text('email_development_notice');
        if (!empty($status_message['value'])) {
          $message['body'][] = $status_message['value'];
        }
      }

      $message['body'][] = token_replace($message_body, array('report' => $params['report']));
      break;

    case 'report_forward':
      $message['body'][] = $params['message'];
      $message['subject'] = $params['subject'];
      break;

    case 'acknowledgement':
      $report = $params['report'];
      $message_body = array(
        '#theme' => 'report_acknowledgement_email',
        '#report' => $report,
      );
      //$message['subject'] = t('Thank you for submitting a report');
      //$message['body'][] = drupal_render($message_body);
      $message_details = _fsa_report_problem_email('acknowledgement');
      $message['subject'] .= token_replace($message_details['subject'], array('report' => $params['report']));

      if (!empty($params['report']->reporter_name)) {
        $message['body'][] = t('Dear @reporter_name', array('@reporter_name' => $params['report']->reporter_name));
      }
      else {
        $message['body'][] = t('Dear Sir or Madam');
      }

      $message['body'][] = token_replace($message_details['message'], array('report' => $params['report']));

      if (!empty($params['report']->local_authority_email)) {
        $contact = _fsa_report_problem_text('contact_local_authority', array('report' => $params['report']));
        $message['body'][] = "\r\n\r\n" . $contact['value'];
      }
      break;
  }
}

/**
 * Sends an email message
 *
 * @param object $report
 *   Food problem report entity.
 *
 * @return array
 *   $message array structure returned by drupal_mail()
 */
function fsa_report_problem_mail_send($report = NULL) {

  $module = 'fsa_report_problem';
  $key = 'problem_report';

  $to = !empty($report->local_authority_email) ? $report->local_authority_email : 'farrow.matt@gmail.com';
  $from = variable_get('site_mail', 'content@food.gov.uk');

  $language = language_default();

  $send = TRUE;

  //$message = 'This is a test message.';
  $message = $report->business_name;

  $params = array(
    'message' => $message,
    'subject' => 'Food problem report - test',
    'report' => $report,
  );
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}


/**
 * Forward a report to an email address
 *
 * @param object $report
 *   A food problem report entity
 *
 * @param string $to
 *   The email address to which to forward the report
 *
 * @param string $from
 *   The email address from which the forwarded report will appear to be sent
 *
 * @param string $subject
 *   The subject line of the email
 *
 * @param string $message
 *   The message to be forwarded
 *
 * @return array
 *   Message array structure as returned by drupal_mail()
 */
function fsa_report_problem_mail_forward($report = NULL, $to = NULL, $from = NULL, $subject = NULL, $message = NULL) {

  $module = 'fsa_report_problem';
  $key = 'report_forward';

  $to = !empty($to) ? $to : $report->local_authority_email;
  $from = !empty($from) ? $from : variable_get('site_mail', 'content@food.gov.uk');

  $language = language_default();

  $send = TRUE;

  $params = array(
    'message' => $message,
    'subject' => $subject,
    'report' => $report,
  );
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}


/**
 * Sends an acknloweldgement email to the person making the report
 *
 * @param object $report
 *   The food problem report object.
 *
 * @return array
 *   Message structure as returned by drupal_mail().
 */
function fsa_report_problem_acknowledgement_send($report = NULL) {
  $module = 'fsa_report_problem';
  $key = 'acknowledgement';
  $to = $report->reporter_email;
  $from = variable_get('site_mail', 'content@food.gov.uk');
  $send = TRUE;
  $params = array(
    'report' => $report,
  );
  $language = language_default();
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}


/**
 * General preprocess function for problem reports.
 *
 * @param array $variables
 *   Template variables - passed by reference
 *
 * @see report-acknowledgement-email.tpl.php
 * @see problem-report-email.tpl.php
 * @see problem-report.tpl.php
 */
function _fsa_report_problem_preprocess_problem_report(&$variables) {
  // Get the report object
  $report = !empty($variables['report']) ? $variables['report'] : NULL;
  // If we don't have a report object, return now.
  if (empty($report)) {
    return;
  }

  // Populate variables from the report object
  $vars = array(
    'reporter_name',
    'reporter_email',
    'business_name',
    'business_location',
    'business_postcode',
    'local_authority_name',
    'local_authority_email',
    'problem_details',
  );

  foreach ($vars as $var) {
    $variables[$var] = !empty($report->$var) ? $report->$var : '';
  }

}

/**
 * Preprocess function for form intro text
 *
 * @param array $variables
 *   Template variables - passed by reference.
 */
function template_preprocess_form_intro(&$variables) {
  // Get the render element
  $element = !empty($variables['element']) ? $variables['element'] : NULL;

  // Get the text. We want it to be an array, so if it's a string - i.e.
  // a single paragraph, turn it into an array instead.
  $text = !empty($element['#text']) ? $element['#text'] : array();

  if (is_array($text)) {
    if (array_key_exists('value', $text)) {
      $format = array_key_exists('format', $text) ? $text['format'] : 'plain_text';
      if ($format != 'plain_text') {
        $text = array($text['value']);
      }
    }
    else {
      foreach ($text as $index => $t) {
        $text[$index] = "<p>$t</p>";
      }
    }
  }
  else {
    $text = array("<p>$text</p>");
  }

  $variables['text'] = $text;
}


/**
 * Returns a status description
 *
 * @param int $status
 *   The status code
 *
 * @return string
 *   The associated status desription
 */
function _fsa_report_problem_status_description($status = FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
  $status_descriptions = array(
    FSA_REPORT_PROBLEM_STATUS_ALPHA => t('Alpha'),
    FSA_REPORT_PROBLEM_STATUS_BETA => t('Beta'),
    FSA_REPORT_PROBLEM_STATUS_PRODUCTION => t('Production'),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => t('Offline')
  );
  return $status_descriptions[$status];
}


/**
 * Returns service status message
 * @param int $status
 *   Status code
 *
 * @return array
 *   Text array as returned by _fsa_report_problem_text().
 *
 * @see _fsa_report_problem_text()
 */
function _fsa_report_problem_status_message($status = FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
  $messages = array(
    //FSA_REPORT_PROBLEM_STATUS_ALPHA => t('This is a prototype service – your <a href="@feedback_link">feedback</a> will help us to improve it. No information you share here will leave this test system.', array('@feedback_link' => 'mailto:digital.communications@foodstandards.gsi.gov.uk?subject=Feedback%20on%20Report%20a%20food%20problem%20service%20[ALPHA%20phase]&amp;body=Hello%2C%20%0A%0AYou%20asked%20for%20my%20feedback.%20Here%20it is:')),
    //FSA_REPORT_PROBLEM_STATUS_BETA => t('This service is currently in beta. If you notice any problems, please contact us.'),
    //FSA_REPORT_PROBLEM_STATUS_OFFLINE => t('This service is currently offline. We apologise for any inconvenience.'),
    FSA_REPORT_PROBLEM_STATUS_ALPHA => _fsa_report_problem_text('service_status_alpha'),
    FSA_REPORT_PROBLEM_STATUS_BETA => _fsa_report_problem_text('service_status_beta'),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => _fsa_report_problem_text('service_status_offline'),
  );
  //return !empty($messages[$status]['value']) ? $messages[$status]['value'] : '';
  return !empty($messages[$status]) ? $messages[$status] : '';
}

/**
 * Manages editable text entries for use in the user interface
 *
 * @param string $key
 *   The key of the text entry to return. If NULL, all entries are returned.
 *
 * @param array $data
 *   Associative array of data to be used in token replacements.
 *
 * @return string|object
 *   If no $key parameter is supplied, all text entries are returned as an
 *   associative array.
 *   If a $key is supplied that matches an entry, an object of class
 *   FsaReportProblemTextEntry() is returned.
 *   If a $key is supplied that doesn't match an entry, an empty string is
 *   returned.
 *
 * @todo Allow default text to be supplied to enable text to be output without
 *   a corresponding entry having been created yet.
 * @todo Separate out text entries into different types, eg step titles etc
 * @todo Separate text entries for different blocks and add parameter to allow
 *   return of entries for a specified block.
 */
function _fsa_report_problem_text() {

  $args = func_get_args();

  if (count($args) > 1 && is_array($args[1])) {
    array_splice($args, 2, 0, array(NULL));
  }

  // This is the order in which the params are expected
  // However, $default can be ommitted
  list($key, $default, $data, $service, $category) = array_pad($args, 5, NULL);

  // If set, $data should be an array
  if (!is_array($data)) {
    $data = array();
  }

  $text = array(
    'find_business_intro' => array(
      'title' => t('Business search form intro'),
      'description' => t('This is the text that appears at the top of the business lookup form.'),
    ),
    'find_business_extra' => array(
      'title' => t('Business search additional info'),
      'description' => t('This text displays beneath the form on the introductory page.'),
    ),
    'choose_business_intro' => array(
      'title' => t('Business choice form intro'),
      'description' => t('This text appears at the top of the screen where users can select a business'),
    ),
    'no_matching_business' => array(
      'title' => t('No matching business'),
      'description' => t('This text appears at the top of the business search results when no matching business is found.'),
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR,
    ),
    'choose_business_bottom' => array(
      'title' => t('Text beneath business choice'),
      'description' => t('This text appears beneath the list of businesses.'),
    ),
    'make_report_intro' => array(
      'title' => t('Report page intro'),
      'description' => t('Intro text for the main report page'),
    ),
    'make_report_intro_manual' => array(
      'title' => t('Report page intro - manual entry'),
      'description' => t('Intro text for the manual entry version of the main report page'),
    ),
    'postcode_search_intro' => array(
      'title' => t('Postcode search form intro'),
      'description' => t('Intro text for the search for authority by postcode lookup form'),
    ),
    'postcode_not_found' => array(
      'title' => t('Postcode not found error'),
      'description' => t('Error text displayed when a postcode search returns no results'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR,
    ),
    'postcode_incomplete' => array(
      'title' => t('Incomplete postcode error'),
      'description' => t('Error message displayed when an incomplete postcode is entered into the postcode search'),
      'format' => 'plain_text',
      'default' => t('Sorry, the postcode you entered does not appear to be valid. Please try again, making sure you enter the full postcode.'),
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR,
    ),
    'postcode_invalid' => array(
      'title' => t('Invalid postcode error'),
      'description' => t('Error message displayed when a user searches for an invalid postcode'),
      'format' => 'plain_text',
      'default' => t('Sorry, the postcode you entered does not appear to be valid. Please try again.'),
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR,
    ),
    'local_authority_intro' => array(
      'title' => t('Local authority details intro'),
      'description' => t('Introductory text for the local authority details page. Appears only if user data capture is turned off.'),
    ),
    'local_authority_intro_postcode' => array(
      'title' => t('Local authority details intro - postcode search'),
      'description' => t('Introductory text for the local authority details page following a postcode search. Appears only if user data capture is turned off.'),
    ),
    'report_complete' => array(
      'title' => t('Report complete text'),
      'description' => t('Report complete text'),
    ),
    'report_complete_manual' => array(
      'title' => t('Report complete text - manual entry'),
      'description' => t('Report complete text - manual entry'),
    ),
    'contact_local_authority' => array(
      'title' => t('Contact your local authority'),
      'description' => t('Contact details for the local authority - if available'),
      'type' => array('email', 'page'),
    ),
    'email_development_notice' => array(
      'title' => t('Under development notice - email'),
      'description' => t('This notice will appear at the top of emails to local authorities when the system is under development.'),
      'default' => '** IMPORTANT: This is a test message generated by a system that is currently under development. Please ignore and delete it. ** ',
      'format' => 'plain_text',
    ),
    'service_status_alpha' => array(
      'title' => t('Service status - Alpha'),
      'description' => t('Description of service status when in Alpha'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_SERVICE_STATUS,
    ),
    'service_status_beta' => array(
      'title' => t('Service status - Beta'),
      'description' => t('Description of service status when in Beta'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_SERVICE_STATUS,
    ),
    'service_status_offline' => array(
      'title' => t('Service status - Offline'),
      'description' => t('Description of service status when it is offline'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_SERVICE_STATUS,
    ),
    'step_title_find_business' => array(
      'title' => t('Step indicator - find business'),
      'description' => t('Heading for the find a business step in the progress indicator'),
      'default' => t('Find a business'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
    'step_title_choose_business' => array(
      'title' => t('Step indicator - choose a business'),
      'description' => t('Heading for the choose a business listing step in the progress indicator'),
      'default' => t('Choose a business'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
    'step_title_make_report' => array(
      'title' => t('Step indicator - make a report'),
      'description' => t('Heading for the make a report step in the progress indicator'),
      'default' => t('Tell us about the food problem'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
    'step_title_report_complete' => array(
      'title' => t('Step indicator - report complete'),
      'description' => t('Heading for the report complete step in the progress indicator'),
      'default' => t('Report complete'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
    'step_title_local_authority_details' => array(
      'title' => t('Step indicator - local authority details'),
      'description' => t('Heading for the local authority details step in the progress indicator'),
      'default' => t('Local authority details'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
    'step_title_postcode_search' => array(
      'title' => t('Step indicator - postcode search'),
      'description' => t('Heading for the local authority postcode search step in the progress indicator'),
      'default' => t('Search by postcode'),
      'format' => 'plain_text',
      'category' => FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE,
    ),
  );

  // Get additional service-specific text entries
  $services = fsa_report_problem_block_info();
  // Empty array to hold additional text entries temporarily before merging
  $additional_text = array();
  foreach ($services as $service_name => $details) {
    $function = __FUNCTION__ . '__' . $service_name;
    if (is_callable($function)) {
      $additional_text = $function();
      foreach($additional_text as $k => $value) {
        // Avoid collisions by prepending service name to key
        $additional_text["${service_name}_$k"] = $value;
        // Set the category to default if not already set
        if (empty($additional_text["${service_name}_$k"]['category'])) {
          $additional_text["${service_name}_$k"]['category'] = FSA_REPORT_PROBLEM_TEXT_CATEGORY_GENERAL;
        }
        // Unset original key
        unset($additional_text[$k]);
      }
      // Add the new text entries to the original text
      $text += $additional_text;
      // Unset the additional text entries array
      unset($additional_text);
    }
  }

  // If no key is specified, we want to return all relevant text entries
  if (empty($key)) {

    // Filter by service - if supplied and not default
    if (!empty($service) && $service != 'default') {
      $function = __FUNCTION__ . '__' . $service;
      $text = is_callable($function) ? $function() : array();
    }

    // Filter by category - if supplied
    if (!empty($category)) {
      foreach ($text as $key => $entry) {
        $text[$key]['category'] = empty($entry['category']) ? FSA_REPORT_PROBLEM_TEXT_CATEGORY_GENERAL : $entry['category'];
        if ($text[$key]['category'] != $category) {
          unset($text[$key]);
        }
      }
    }

    // Get the values for the text entries
    foreach ($text as $key => $entry) {
      $variable_name = !empty($service) ? "fsa_report_problem_text_${service}_${key}" : "fsa_report_problem_text_${key}";
      $variable_value = variable_get($variable_name);
      $default_value = variable_get("fsa_report_problem_text_${key}");
      $text[$key]['value'] = is_array($default_value) && !empty($default_value['value']) ? $default_value['value'] : NULL;
      $text[$key]['format'] = is_array($default_value) && !empty($default_value['format']) ? $default_value['format'] : NULL;
      $text[$key]['value'] = empty($text[$key]['value']) && !empty($entry['default']) ? $entry['default'] : $text[$key]['value'];
      $text[$key]['format'] = !empty($text[$key]['format']) && !empty($entry['format']) ? $entry['format'] : 'full_html';
      if (is_array($variable_value)) {
        $text[$key] = array_merge($entry, $variable_value);
      }
    }

    return $text;
  }

  $service_key = !empty($service) ? "${service}_${key}" : NULL;
  if (array_key_exists($key, $text) || array_key_exists($service_key, $text)) {
    // First try for a service-specific entry
    if (!empty($service_key)) {
      $variable_name = "fsa_report_problem_text_${service_key}";
    }
    $text_content = variable_get("fsa_report_problem_text_${service_key}", array());
    $variable_name = "fsa_report_problem_text_${key}";
    // If no service-specific text entry, try for a generic version
    if (empty($text_content['value'])) {
      $text_content = variable_get("fsa_report_problem_text_${key}");
    }
    return new FsaReportProblemTextEntry(
      $text_content['value'],
      !empty($text[$key]['format']) ? $text[$key]['format'] : NULL,
      !empty($text[$key]['default']) ? $text[$key]['default'] : NULL,
      $data
    );
  }
  else {
    return '';
  }


}


/**
 * Helper function: provides text entries for the find food safety team block
 */
function _fsa_report_problem_text__find_food_safety_team() {
  $text = array();

  $text['postcode_search_intro'] = array(
    'title' => t('Postcode search form intro'),
    'description' => t('Intro text for the search for authority by postcode lookup form as used in the Find a food safety officer service'),
    'format' => 'full_html',
  );

  return $text;
}



/**
 * Implements hook_token_info().
 */
function fsa_report_problem_token_info() {
  $types = array(
    'local_authority' => array(
      'name' => t('Local authority'),
      'description' => t('Local authority information as used in the report a problem module'),
      'needs-data' => 'local_authority',
    ),
    'food_report' => array(
      'name' => t('Food problem report'),
      'description' => t('Food problem report properties'),
      'needs-data' => 'problem_report',
    ),
    'food_establishment' => array(
      'name' => t('Food establishment'),
      'description' => t('Food establishment properties'),
      'needs-data' => 'food_establishment',
    ),
  );

  $local_authority['name'] = array(
    'name' => t('Local authority name'),
    'description' => t('The name of the local authority'),
  );

  $local_authority['email'] = array(
    'name' => t('Local authority email address'),
    'description' => t('The email address of the local authority as held on the FHRS database'),
  );

  $food_report['id'] = array(
    'name' => t('Report ID'),
    'description' => t('The unique ID of the report as stored on the system'),
  );

  $food_establishment['name'] = array(
    'name' => t('Establishment name'),
    'description' => t('The name of the food establishment where the problem was experienced'),
  );

  $food_establishment['postcode'] = array(
    'name' => t('Establishment postcode'),
    'description' => t('The postcode of the food establishment where the problem was experienced'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'local_authority' => $local_authority,
      'food_report' => $food_report,
      'food_establishment' => $food_establishment,
    )
  );


}

/**
 * Implements hook_tokens().
 *
 * @param type $type
 * @param type $tokens
 * @param array $data
 * @param array $options
 */
function fsa_report_problem_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();
  foreach ($tokens as $name => $original) {

    if (!empty($data['local_authority'])) {
      $local_authority = $data['local_authority'];
    }
    elseif (!empty($data['report'])) {
      $report = $data['report'];
      $local_authority = new stdClass();
      $local_authority->name = !empty($report->local_authority_name) ? $report->local_authority_name : '';
      $local_authority->email = !empty($report->local_authority_email) ? $report->local_authority_email : '';
    }


    if ($type == 'local_authority' && !empty($local_authority)) {
      switch ($name) {
        case 'name':
          if (!empty($local_authority->name)) {
            $replacements[$original] = $local_authority->name;
          }
          break;
        case 'email':
          if (!empty($local_authority->email)) {
            $replacements[$original] = $local_authority->email;
          }
          break;
      }
    }

    if (!empty($data['report'])) {
      $report = $data['report'];
    }

    if ($type == 'food_report' && !empty($report)) {
      //dpm($report);
      switch ($name) {
        case 'id':
          if (!empty($report->rid)) {
            $replacements[$original] = $report->rid;
          }
          break;
        case 'business_name':
          if (!empty($report->business_name)) {
            $replacements[$original] = $report->business_name;
          }
          break;
        case 'business_address':
          if (!empty($report->business_location)) {
            $replacements[$original] = $report->business_location;
          }
          break;
        case 'business_map_link':
          if (!empty($report->coordinates)) {
            $map_link = "http://www.google.co.uk/maps?q=" . $report->coordinates;
          }
          else {
            $map_link = '';
          }
          $replacements[$original] = $map_link;
          break;
        case 'report_date':
          if (!empty($report->problem_date)) {
            $replacements[$original] = format_date($report->problem_date, 'medium');
          }
          break;
        case 'problem_details':
          if (!empty($report->problem_details)) {
            $replacements[$original] = $report->problem_details;
          }
          break;
        case 'reporter':
          if (empty($report->reporter_name) && empty($report->reporter_email)) {
            $replacements[$original] = t('The reporter withheld his/her details.');
          }
          else {
            $reporter = array();
            if (!empty($report->reporter_name)) {
              $reporter[] = $report->reporter_name;
            }
            if (!empty($report->reporter_email)) {
              $reporter[] = $report->reporter_email;
            }
            $replacements[$original] = implode(', ', $reporter);
          }
          break;
      }
    }

    if ($type == 'food_establishment') {
      switch ($name) {
        case 'name':
          $replacements[$original] = !empty($data['food_establishment']['name']) ? $data['food_establishment']['name'] : t('this business');
          break;
        case 'postcode':
          $replacements[$original] = !empty($data['food_establishment']['postcode']) ? $data['food_establishment']['postcode'] : '';
          break;
      }
    }

  }

  return $replacements;
}


/**
 * Returns an array of service statuses
 *
 * @return array
 *   Associative array of service statuses with service status codes as keys and
 *   descriptions as values
 */
function _fsa_report_problem_service_statuses() {
  return array(
    FSA_REPORT_PROBLEM_STATUS_ALPHA => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_ALPHA),
    FSA_REPORT_PROBLEM_STATUS_BETA => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_BETA),
    FSA_REPORT_PROBLEM_STATUS_PRODUCTION => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_PRODUCTION),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_OFFLINE),
  );
}



/**
 * Defines emails sent by the report a food problem service
 *
 * @param string $key
 *   The identifier for a specific email
 *
 * @return array
 *   If no $key is supplied, then an associative array of all emails is
 *   returned. If a $key is supplied that matches an entry, just that entry is
 *   returned. If a $key is supplied that does not match an entry, an empty
 *   array is returned.
 */
function _fsa_report_problem_email($key = NULL) {

  $emails = array();

  $emails['problem_report'] = array(
    'subject' => t('Food problem report - [food_report:business_name]'),
    'message' => t('This is a food problem report from a member of the public via food.gov.uk.'),
    'default_recipient' => 'test@test.com',
    'title' => t('Problem report email'),
    'sender_email' => 'reports@food.gov.uk', // @todo update this when we know what it should be
    'description' => t('This is the email that will be sent to the local authority to notify them of a problem. If no email address is available for the local authority, then an email will be sent instead to the default recipient email address.'),
  );

  $emails['acknowledgement'] = array(
    'subject' => t('Thank you for your report'),
    'message' => t('Thank you for reporting a food problem at [food_report:business_name], [food_report:business_address].'),
    'recipient' => '',
    'title' => t('Acknowledgement email'),
    'sender_email' => 'reports@food.gov.uk', // @todo update this when we know what it should be
    'description' => t('This is the acknowledgement email that will be sent to the user on submission of the report if he or she has included his/her email address.'),
  );

  if (empty($key)) {
    return $emails;
  }

  if (array_key_exists($key, $emails)) {
    $email = $emails[$key];
    $email['recipient'] = !empty($email['recipient']) ? $email['recipient'] : NULL;
    $variable_name = "fsa_report_problem_email_${key}";
    $email['message'] = variable_get("${variable_name}_message", $email['message']);
    $email['subject'] = variable_get("${variable_name}_subject", $email['subject']);
    $email['recipient'] = variable_get("${variable_name}_recipient", $email['recipient']);
    $email['sender_email'] = variable_get("${variable_name}_sender_email", !empty($email['default_recipient']) ? $email['default_recipient'] : NULL);
    $email['default_recipient'] = variable_get("${variable_name}_default_recipient", !empty($email['default_recipient']) ? $email['default_recipient'] : NULL);
    return $email;
  }
  else {
    return array();
  }

}


/**
 * Formats a UK postcode
 *
 * @param string $postcode
 *   A string containing a UK postcode.
 *
 * @return string
 *   Either a properly formatted postcode or the original string if not suitable
 *
 */
function _fsa_report_problem_format_postcode($postcode) {

  $original = $postcode;

  // First, get rid of spaces and reverse the string
  $postcode = strrev(str_replace(' ', '', $postcode));

  // UK postcodes are between 6 and 8 characters in length including the space.
  // If it's longer or shorter than this, there's not much we can do with it, so
  // we just return what we're given
  if (strlen($postcode) < 5 || strlen($postcode) > 7) {
    return $original;
  }

  // UK postcodes are divided into two parts - inward and outward. The inward
  // part is the last three characters (after the space). To get both parts, we
  // reverse the string and use the first three characters as the inward part
  // and the following characters as the outward part.
  $inward = strrev(substr($postcode, 0, 3));
  $outward = strrev(substr($postcode, 3));

  // Convrert it to uppercase and add a space for syntactic correctness.
  $postcode = strtoupper("$outward $inward");

  // Return the result.
  return $postcode;
}



/**
 * Updates local authority data held in Drupal from the FHRS API.
 */
function _fsa_report_problem_update_fhrs_data() {
  //$fhrs_authorities = array();


  //$fhrsa = fsa_report_problem_get_fhrs_authorities();
  //dpm($fhrsa);

  // Get the local authority data from FHRS.
  $fhrs_authorities = fsa_report_problem_get_fhrs_authorities();

  // If we have no FHRS authorities, return FALSE now.
  if (empty($fhrs_authorities)) {
    return FALSE;
  }

  //foreach ($fhrsa as $fhrs_authority) {
  //  $fhrs_authorities[$fhrs_authority->LocalAuthorityId] = $fhrs_authority;
  //}

  // Load up all of the local authority entities from Drupal
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'local_authority');
  $result = $query->execute();
  $aids = array_keys($result['local_authority']);
  $authorities = entity_load('local_authority', $aids);

  foreach ($authorities as $authority) {

    $email_override = !empty($authority->email) && !empty($authority->fhrs_email) && $authority->email != $authority->fhrs_email ? TRUE : FALSE;

    $fhrs_auth = $fhrs_authorities[$authority->local_authority_id];

    if (!empty($fhrs_auth)) {
      $authority->fhrs_name = $fhrs_auth->Name;
      $authority->fhrs_email = $fhrs_auth->Email;
      if (!empty($authority->fhrs_email) && (empty($authority->email) || !$email_override)) {
        $authority->email = $authority->fhrs_email;
      }
      $authority->save();
    }

  }
  // If we've got this far, assume everything has been successful.
  return TRUE;

}



/**
 * Implements hook_cron().
 */
function fsa_report_problem_cron() {

  // Get the last time the FHRS data was updated
  $last_import = variable_get('fsa_report_problem_fhrs_last_import', 0);

  // If the data has already been updated today, exit now. There should be no
  // need to run this job more than once a day, but there will be a manual
  // override within the GUI and a Drush command to force an update.
  if (date('dmY', REQUEST_TIME) == date('dmY', $last_import)) {
    watchdog('Food report', 'FHRS authority update already run today. Exiting.');
    return;
  }

  // Update the FHRS data. If we're successful, set a variable to stop this
  // from happening again today.
  if (_fsa_report_problem_update_fhrs_data()) {
    variable_set('fsa_report_problem_fhrs_last_import', REQUEST_TIME);
    watchdog('Food report', 'FHRS authority data updated.');
  }
  // Looks like the update failed for some reason. Let Watchdog know and don't
  // set the variable, so it'll try on the next Cron run.
  else {
    watchdog('Food report', 'An error occurred updating the FHRS data. Will try again on next Cron run.', array(), WATCHDOG_NOTICE);
  }
}


/**
 * Gets location (latitude and longitude) based on IP address.
 *
 * @param string $ip
 *   (optional) The IP address to look up. If no IP address is supplied, we use
 *   the client's IP address.
 *
 * @return string
 *   The location in the form of latitude,longitude. If no location is found, we
 *   return an empty string.
 */
function _fsa_report_problem_get_location_by_ip($ip = NULL) {
  $client_ip = !empty($ip) ? $ip : $_SERVER['HTTP_X_REAL_IP'];
  $endpoint = 'http://www.geoplugin.net/php.gp';
  $options = array(
    'query' => array(
      'ip' => $client_ip,
    ),
  );
  $result = drupal_http_request($endpoint, $options);
  if ($result->code != '200') {
    return '';
  }

  $data = unserialize($result->data);
  if (!empty($data['geoplugin_latitude']) && !empty($data['geoplugin_longitude'])) {
    return $data['geoplugin_latitude'] . ',' . $data['geoplugin_longitude'];
  }
  else {
    return '';
  }
}


/**
 * Implements hook_init().
 *
 * We use this to handle non-existent paths that set $_GET parameters used
 * within the report a food problem service.
 */
function fsa_report_problem_init() {

  // Get the request path
  $request_path = request_path();

  // Get the nid of the node associated with the report a problem block
  $nid = _fsa_report_problem_get_nid();

  // Create an array of nids with the primary node as an element
  $nids = array($nid);

  // See if there are any translations available
  $translations = _fsa_report_problem_get_transaltion_nids($nid);

  // If we have any translations, add their nids to the array.
  if (!empty($translations)) {
    $nids = array_merge($nids, array_keys($translations));
  }

  // A variable to hold the actual path. We set it to NULL initially.
  $path = NULL;

  // For each of the nids, see if its path contains the current path. If it
  // matches, set the $path variable and break the loop. If no match, then the
  // $path variable will remain set to NULL.
  foreach ($nids as $nid) {
    $temp_path = drupal_get_path_alias("node/$nid");
    if (strpos($request_path, $temp_path) === 0) {
      $path = $temp_path;
      break;
    }
  }

  // Temporary handling of search for local authority path and find a food
  // safety team path
  // @todo Handle this properly using context and the admin UI
  $paths = array(
    'enforcement/search-for-local-authority',
    'enforcement/find-a-food-safety-team',
  );
  foreach ($paths as $start_path) {
    if (strpos($request_path, $start_path) === 0) {
      $_GET['q'] = drupal_get_normal_path($start_path);
      return;
    }
  }

  // If we have no path, exit now.
  if (empty($path)) {
    return;
  }

  // Set the value of the 'q' GET variable
  $_GET['q'] = drupal_get_normal_path($path);

  // The path suffix is any path left after the $path variable.
  $path_suffix = str_replace("$path/", '', $request_path);
  $path_suffix_array = explode('/', $path_suffix);

  // Define a set of path suffixes and the $_GET keys and values associated
  // with them
  $path_mappings = array(
    // Allows us to turn off autcomplete.
    'na' => array(
      'ac' => 0,
    ),
    // Manual entry of business details
    'manual' => array(
      'manual' => 1,
    ),
    // Process complete
    'complete' => array(
      'complete' => 1,
    ),
    // Postcode search
    'postcode' => array(
      'postcode' => 1,
    ),
    // Display local authority details
    'authority' => array(
      'authority' => 1,
    ),
  );

  // New string-based mapping
  foreach ($path_mappings as $path => $settings) {
    if (strpos($path_suffix, $path) === 0) {
      if (is_array($settings)) {
        foreach ($settings as $key => $value) {
          $_GET[$key] = $value;
        }
      }
    }
  }

  // If we're looking for a specific local authority, let's try to get its ID
  if ($path_suffix_array[0] == 'authority' && count($path_suffix_array) > 1) {
    $local_authority_alias = $path_suffix_array[1];
    $_GET['aid'] = _fsa_report_problem_load_authority_by_alias($local_authority_alias);
  }

}


/**
 * Implements hook_block_configure().
 */
function fsa_report_problem_block_configure($delta = '') {
  // Make sure we're on our block.
  if ($delta != 'report_problem_form') {
    return;
  }
  // Include the configuration form for the module
  module_load_include('inc', 'fsa_report_problem', 'fsa_report_problem.admin');
  $form_state = array();
  $form = fsa_food_report_admin_form(array(), $form_state);
  $form['config_interface_link'] = array(
    '#type' => 'item',
    '#title' => t('More configuration options'),
    '#markup' => t('Full configuration options for the Report a Food Problem service can be found at <a href="@config_link">Admin > Configuration > Food problem reporting</a>.', array('@config_link' => url('admin/config/foodproblems'))),
  );
  // Remove the submit button from the included form. It will cause duplication.
  unset($form['actions']);
  return $form;
}


/**
 * Implements hook_block_save().
 */
function fsa_report_problem_block_save($delta = '', $edit = array()) {
  // Make sure we're on our block.
  if ($delta != 'report_problem_form') {
    return;
  }

  if (isset($edit['fsa_report_problem_service_status'])) {
    variable_set('fsa_report_problem_service_status', $edit['fsa_report_problem_service_status']);
  }

  if (isset($edit['fsa_report_problem_service_status_message'])) {
    variable_set('fsa_report_problem_service_status_message', $edit['fsa_report_problem_service_status_message']);
  }

  if (isset($edit['fsa_report_problem_capture_user_data'])) {
    variable_set('fsa_report_problem_capture_user_data', $edit['fsa_report_problem_capture_user_data']);
  }

}


/**
 * Helper function: determines whether to capture user data
 *
 * @return boolean
 *   TRUE if we are capturing user data; FALSE otherwise.
 */
function _fsa_report_problem_capture_user_data() {
  $capture_user_data = variable_get('fsa_report_problem_capture_user_data', 1);
  return !empty($capture_user_data);
}


/**
 * Preprocess function for local authority details
 *
 * @see local-authority-details.tpl.php
 */
function template_preprocess_local_authority_details(&$variables) {
  // Get the language code
  global $language;
  $lang_code = !empty($language->language) ? $language->language : language_default()->language;

  // Get the local authority from the $variables array
  $local_authority = !empty($variables['local_authority']) ? $variables['local_authority'] : NULL;
  // No local authority? Exit now.
  if (empty($local_authority)) {
    return;
  }
  // Adde content attributes array
  $variables['content_attributes_array']['class'] = array('local-authority-details-inner');
  // Set the local authority name
  $variables['name'] = !empty($local_authority['name']) ? $local_authority['name'] : NULL;
  // Translate the name if we're not in English
  if ($lang_code != 'en') {
    $variables['name'] = locale($variables['name']);
  }
  // Set the local authority email address
  $variables['email'] = !empty($local_authority['email']) ? $local_authority['email'] : NULL;
  // If we're on the final stage of the find a food safety team service, then
  // we want to show the food_safety_team_email address if populated.
  if ($variables['delta'] == 'find_food_safety_team' && !empty($local_authority['food_safety_team_email'])) {
    $variables['email'] = $local_authority['food_safety_team_email'];
  }
  // Create a link for the email address
  $variables['email_link'] = !empty($variables['email']) ? l($variables['email'], 'mailto:' . $variables['email'], array('absolute' => TRUE)) : NULL;
  // Set the local authority URL
  $variables['url'] = !empty($local_authority['url']) ? $local_authority['url'] : NULL;
  // Create a link to the local authority website
  $variables['website_link'] = !empty($variables['url']) ? l(_fsa_report_problem_format_url($variables['url']), $variables['url'], array('external' => TRUE)) : NULL;
}


/**
 * Helper function - returns an array of MapIt authority types
 *
 * @param boolean $full
 *   If set to TRUE, returns the full list of MapIt authority types as an
 *   associative array with the codes as keys and the names as values. By
 *   default, when set to FALSE returns an array of keys for the selected
 *   authority types.
 *
 * @return array
 *   By default, returns an array of authority type codes. If the $full argument
 *   is set to TRUE, returns an associative array of codes to names for all
 *   authority types.
 */
function _fsa_report_problem_mapit_authority_types($full = FALSE) {

  // Full list of MapIt authority types.
  // @see https://github.com/mysociety/mapit/blob/b471659b14b8912948247fa72bdbc5f65c5a6a61/mapit_gb/templates/mapit/api/areas-types.html
  $mapit_authority_types = array(
    'CTY' => 'county council',
    'CED' => 'county ward',
    'COI' => 'Isles of Scilly',
    'COP' => 'Isles of Scilly parish',
    'CPC' => 'civil parish/community',
    'CPW' => 'civil parish/community ward',
    'DIS' => 'district council',
    'DIW' => 'district ward',
    'EUR' => 'Euro region',
    'GLA' => 'London Assembly',
    'LAC' => 'London Assembly constituency',
    'LBO' => 'London borough',
    'LBW' => 'London ward',
    'LGD' => 'NI council',
    'LGE' => 'NI electoral area',
    'LGW' => 'NI ward',
    'MTD' => 'Metropolitan district',
    'MTW' => 'Metropolitan ward',
    'NIE' => 'NI Assembly constituency',
    'OLF' => 'Lower Layer Super Output Area Full',
    'OLG' => 'Lower Layer Super Output Area Generalised',
    'OMF' => 'Middle Layer Super Output Area Full',
    'OMG' => 'Middle Layer Super Output Area Generalised',
    'SPC' => 'Scottish Parliament constituency',
    'SPE' => 'Scottish Parliament region',
    'UTA' => 'Unitary authority',
    'UTE' => 'Unitary authority electoral division',
    'UTW' => 'Unitary authority ward',
    'WAC' => 'Welsh Assembly constituency',
    'WAE' => 'Welsh Assembly region',
    'WMC' => 'UK Parliamentary constituency',
  );

  // If a full listing was specified, return all of the types now
  if ($full) {
    return $mapit_authority_types;
  }

  // Default list of types to use with this service
  $default_types = array('DIS', 'UTA', 'LBO', 'LGD', 'MTD', 'COI');

  // Types selected for use
  $types = variable_get('fsa_report_problem_mapit_authority_types', $default_types);
  foreach ($types as $key => $value) {
    if (empty($value)) {
      unset ($types[$key]);
    }
  }
  return array_values($types);
}


/**
 * Helper function - import text from file into variable
 *
 * @param string $text_id
 *   The ID of the text entry.
 *
 * @param string $format
 *   The text format to use, defaults to 'full_html'
 *
 * @param boolean $overwrite
 *   Determines whether to overwrite existing variable values. Defaults to
 *   FALSE.
 *
 * @see _fsa_report_problem_escape_tokens()
 * @see _fsa_report_problem_restore_tokens()
 *
 */
function _fsa_report_problem_import_text($text_id = NULL, $format = 'full_html', $overwrite = FALSE) {

  // If text_id is empty, exit now.
  if (empty($text_id)) {
    return;
  }

  // Construct the variable name
  $variable_name = 'fsa_report_problem_text_' . $text_id;

  // Check the requested format exists. Otherwise use the fallback.
  $format = filter_format_exists($format) ? $format : filter_fallback_format();

  // Get available languages
  $languages = array_keys(language_list());

  // Get the site's default language.
  $default_language = language_default();
  // Get the language code, and assume 'en' as default if not set.
  $default_language = !empty($default_language->language) ? $default_language->language : 'en';

  foreach ($languages as $language) {

    // An array to hold file paths
    $paths = array();

    // Build the file path
    $paths[] = drupal_get_path('module', 'fsa_report_problem') . '/text/' . $text_id . '.' . $language . '.txt';

    // If we're on the default language, include the option not to have the
    // language in the file path
    if ($language == $default_language) {
      $paths[] = drupal_get_path('module', 'fsa_report_problem') . '/text/' . $text_id . '.txt';
    }

    // If the file exists, get its content.
    foreach ($paths as $path) {
      if (file_exists($path)) {
        $variable_value = array(
          'format' => $format,
          'value' => _fsa_report_problem_restore_tokens(check_markup(_fsa_report_problem_escape_tokens(file_get_contents($path)), $format)),
        );

        // Get a list of variable realms
        $realms = function_exists('variable_realm_list') ? variable_realm_list() : array();

        if (function_exists('variable_realm_set') && array_key_exists('language', $realms)) {
          $current_value = function_exists('variable_realm_get') ? variable_realm_get('language', $language, $variable_name) : '';
          if ($overwrite || empty($current_value)) {
            variable_realm_set('language', $language, $variable_name, $variable_value);
          }
        }
        else {
          // Save the variable
          $current_value = variable_get($variable_name);
          if ($overwrite || empty($current_value)) {
            variable_set($variable_name, $variable_value);
          }
        }

        // Log that the import has taken place
        watchdog('fsa_report_problem', 'Updated text entry: %text_id.', array('%text_id' => $text_id));
        continue;
      }
      // If the file does not exist, log it in Watchdog.
      else {
        //watchdog('fsa_report_problem', 'Could not find file for text entry: %text_id.', array('%text_id' => $text_id), WATCHDOG_WARNING);
      }
    }
  }
}

/**
 * Helper function: replaces token delimiters with alternatives
 *
 * This avoids tokens being replaced during the import of text entries from text
 * files, which involves calling `check_markup()`.
 *
 * We replace the square brackets around the tokens with alternatives: {{...}}.
 *
 * We then use another helper function to reinstate the square brackets once
 * `check_markup()` has done its work.
 *
 * @param string $text
 *   The original text, containing standard token patterns.
 *
 * @return string
 *   The text with square brackets around tokens replaced with alternative
 *   characters that won't be interpreted as tokens by `check_markup()`.
 *
 * @see _fsa_report_problem_restore_tokens()
 */
function _fsa_report_problem_escape_tokens($text = '') {
  $pattern = "@(\[)(.*)(\])@";
  $replacement = '{{$2}}';
  return preg_replace($pattern, $replacement, $text);
}

/**
 * Helper function: restores token delimiters that had previously been 'escaped'
 *
 * This function replaces the alternative characters around tokens so that they
 * can be used within Drupal: {{...}} becomes [...]
 *
 * @param string $text
 *   Text potentially containing escaped tokens of the form {{...}}
 *
 * @return string
 *   Text with patterns of the form {{...}} replaced by [...]
 *
 * @see _fsa_report_problem_escape_tokens()
 */
function _fsa_report_problem_restore_tokens($text = '') {
  $pattern = "@({{)(.*)(}})@";
  $replacement = '[$2]';
  return preg_replace($pattern, $replacement, $text);
}


/**
 * Helper function: returns title for a step in the progress indicator
 *
 * @param string $id
 *   The identifier for the text entry, without the prefix "step_title_".
 *
 * @return string
 *   The title of the step.
 *
 * @see _fsa_report_problem_text()
 */
function _fsa_report_problem_step_title($id = NULL) {
  if (empty($id)) {
    return '';
  }
  $id = "step_title_$id";
  $step_title = _fsa_report_problem_text($id);
  return !empty($step_title['value']) ? $step_title['value'] : '';
}


/**
 * Implements hook_context_plugins().
 */
function fsa_report_problem_context_plugins() {
  $plugins = array();
  $plugins['fsa_report_problem_context_condition_report_problem_node'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'fsa_report_problem') . '/includes',
      'file' => 'fsa_report_problem_context_condition_report_problem_node.inc',
      'class' => 'fsa_report_problem_context_condition_report_problem_node',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}


/**
 * Implements hook_context_registry().
 *
 */
function fsa_report_problem_context_registry() {
  return array(
    'conditions' => array(
      'report_problem_node_nid' => array(
        'title' => t('Report problem page'),
        'description' => t('Set this context based on node ID of the current node.'),
        'plugin' => 'fsa_report_problem_context_condition_report_problem_node',
      ),
    ),
  );
}


/**
 * Implements hook_node_view()
 */
function fsa_report_problem_node_view($node, $view_mode, $langcode) {
  // If we're not in full view mode, exit now.
  if ($view_mode != 'full') {
    return;
  }
  // Get the menu object
  $menu_object = menu_get_object();
  // Get the nid property of the menu object - if defined
  $nid = !empty($menu_object->nid) ? $menu_object->nid : NULL;
  // If the menu object doesn't have a nid, exit now
  if (empty($nid)) {
    return;
  }
  if ($plugin = context_get_plugin('condition', 'report_problem_node_nid')) {
    $plugin->execute($nid);
  }
}


/**
 * Autocomplete callback for nodes
 */
function _fsa_report_problem_nodes_autocomplete($string) {
  $matches = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('status', 1);

  if (is_numeric($string)) {
    $query->condition('nid', db_like($string) . '%', 'LIKE');
  }
  else {
    $query->condition('title', '%' . db_like($string) . '%', 'LIKE');
  }
  $result = $query->execute();

  // save the query to matches
  foreach ($result as $row) {
    $matches[$row->title . ' [nid:' . $row->nid . ']'] = check_plain($row->title);
  }

  // Return the result to the form in json
  drupal_json_output($matches);
}


/**
 * Autocomplete callback for postcodes
 */
function _fsa_report_problem_postcode_autocomplete($postcode) {
  $output = array();
  $limit = 20;
  if (!empty($postcode)) {
    $endpoint = format_string("http://api.postcodes.io/postcodes/@postcode/autocomplete", array('@postcode' => $postcode));
    $url = url($endpoint, array('query' => array('limit' => $limit, 't' => time())));
    $results = drupal_http_request($url);
    $data = !empty($results->data) ? json_decode($results->data) : NULL;
    $postcodes = !empty($data->result) && is_array($data->result) ? $data->result : array();
    if (is_array($postcodes)) {
      $output = array_combine($postcodes, $postcodes);
    }
  }
  drupal_json_output($output);
}


/**
 * Helper function: extracts nid from a string containing node title and nid
 *
 * @param string $title
 *   The title of the node with the nid included, eg 'Test page [nid: 123]'
 *
 * @return int
 *   The nid extracted from the title string or 0 if not found
 */
function _fsa_report_problem_extract_nid($title = '') {
  // If the $title parameter is empty, return 0
  if (empty($title)) {
    return 0;
  }
  // Use regex replacement to extract just the nid part of the title
  $pattern = "@^.*\[nid:([0-9]+)\]$@";
  $replacement = '$1';
  $nid = preg_replace($pattern, $replacement, $title);
  // Return the nid as an integer or 0
  return is_numeric($nid) ? (int) $nid : 0;
}


/**
 * Helper function: gets nid of the node assigned to the report a problem block
 *
 * @return int
 *   The nid of the node associated with the block
 *
 * @see _fsa_report_problem_extract_nid()
 */
function _fsa_report_problem_get_nid() {
  $node = variable_get('fsa_report_problem_node_nid');
  $nid = _fsa_report_problem_extract_nid($node);
  return $nid;
}


/**
 * Helper function: gets the path alias of the node selected for the block
 */
function _fsa_report_problem_node_path() {
  // Get the nid from the variable
  $nid = _fsa_report_problem_get_nid();
  // Now get its path alias
  $alias = drupal_get_path_alias("node/$nid");
  // Return the alias
  return $alias;
}


/**
 * Helper function: gets a local authority entity based on sanitised name
 *
 * @deprecated
 *   No longer required since we do not need to load a local authority entity
 *   by alias any more.
 */
function _fsa_report_problem_load_authority_by_alias($alias) {
  $alias = str_replace('--', '_', $alias);
  $name = str_replace('-', ' ', $alias);
  $name = str_replace('_', '-', $name);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'local_authority');
  $query->propertyCondition('name', $name);
  $result = $query->execute();
  if (!empty($result['local_authority'])) {
    $aids = array_keys($result['local_authority']);
    return ($aids[0]);
  }
  return 0;
}

/**
 * Helper function: generates an 'alias' based on local authority name
 *
 * This is used in URLs
 *
 * @param string $name
 *   The name of the local authority
 *
 * @return string
 *   A sanitsed version of the local authority name suitable for use in a URL
 */
function _fsa_report_problem_local_authority_alias($name = '') {
  // Return an empty string if no name parameter is supplied.
  if (empty($name)) {
    return '';
  }
  module_load_include('inc', 'pathauto', 'pathauto');
  // If Pathauto is available, use its pathauto_cleanstring() function to
  // generate a clean version of the name as alias
  if (is_callable('pathauto_cleanstring')) {
    $alias = pathauto_cleanstring($name);
  }
  // In the unlikely event that we don't have access to pathauto_cleanstring(),
  // we'll use a simple regex replace to make a 'clean', URL-friendly alias
  else {
    $alias = strtolower(preg_replace("/[\s|,|&|\?]/", '-', trim($name)));
    $alias = rawurlencode(preg_replace("/-{2,}/", '-', $alias));
  }
  return $alias;
}


/**
 * Helper function: formats a URL for display
 *
 * This is essentially just for removing the 'http://' part from URLs that
 * start with www.
 */
function _fsa_report_problem_format_url($url = '') {
  if (empty($url)) {
    return '';
  }
  // Regex pattern for URLs starting with www.
  $pattern = "@(^http://www)@";
  // Replacement - minus the 'http://' part.
  $replacement = 'www';
  // Return the replacement
  return preg_replace($pattern, $replacement, $url);
}


/**
 * Helper function: checks or sets external API status
 *
 * @param string $api
 *   (optional) The name of the API to check or set. If omitted, the status of
 *   all APIs is checked.
 *
 * @param array $settings
 *   (optional) An array of settings to pass to an API status. Used only if $api
 *   is populated.
 *
 * @param boolean $force_check
 *   Forces the function to check the API(s) now, rather than using the last
 *   stored status.
 */
function _fsa_report_problem_api_status($api = NULL, $settings = NULL, $force_check = FALSE) {

  // An array of APIs
  $apis = _fsa_report_problem_apis();

  // Intervals between checks (seconds)
  // @todo Manage these via the admin API
  $healthy_interval = 120;
  $unhealthy_interval = 30;

  // Use drupal_static() to cache the values for this request.
  $api_statuses = &drupal_static(__FUNCTION__);

  // If $settings is not NULL, we're setting the API status
  if (!empty($settings)) {
    // First get the current settings - if available
    $current_status = variable_get('fsa_report_problem_api_status', $apis);
    if (!empty($current_status)) {
      if (isset($current_status[$api])) {
        $current_status[$api]->lastCheck = REQUEST_TIME;
        if (isset($settings['healthy'])) {
          $current_status[$api]->healthy = isset($settings['healthy']) ? $settings['healthy'] : TRUE;
          $current_status[$api]->httpCode = isset($settings['httpCode']) ? $settings['httpCode'] : NULL;
          $current_status[$api]->statusDescription = isset($settings['statusDescription']) ? $settings['statusDescription'] : NULL;
          $current_status['overall'] = new ExternalApiStatus();
          $current_status['overall']->healthy = FALSE;
          $current_status['overall']->lastCheck = REQUEST_TIME;
        }
      }
    }
    variable_set('fsa_report_problem_api_status', $current_status);
    return $current_status[$api];
  }


  // If we haven't a cached version, test the APIs now
  if (!isset($api_statuses) || $force_check) {

    $stored_status = variable_get('fsa_report_problem_api_status');

    $last_check = !empty($stored_status['overall']) ? $stored_status['overall']->lastCheck : REQUEST_TIME;
    $last_status = !empty($stored_status['overall']) ? $stored_status['overall']->healthy : NULL;

    if (!$force_check && (($last_status && REQUEST_TIME - $last_check <= $healthy_interval) || (!$last_status && REQUEST_TIME - $last_check <= $unhealthy_interval))) {
      $api_statuses = $stored_status;
      $overall_status = !empty($api_statuses['overall']) ? $api_statuses['overall'] : new ExternalApiStatus();
    }

    else {
      // Set the overall status
      $overall_status = new ExternalApiStatus();
      $api_statuses = array();

      foreach ($apis as $key => $status) {
        $api_statuses[$key] = $status->check();
        if (!$api_statuses[$key]->healthy) {
          $overall_status->healthy = FALSE;
        }
        if (!empty($api_statuses[$key]->exception)) {
          watchdog_exception('fsa_report_problem', $api_statuses[$key]->exception);
        }
        $overall_status->lastCheck = REQUEST_TIME;
      }
      $api_statuses['overall'] = $overall_status;
      variable_set('fsa_report_problem_api_status', $api_statuses);
    }
  }
  else {
    $overall_status = !empty($api_statuses['overall']) ? $api_statuses['overall'] : new ExternalApiStatus();
  }


  $return_value = $overall_status;

  if (!empty($api) && !empty($api_statuses[$api])) {
    $return_value = $api_statuses[$api];
  }

  return $return_value;
}


/**
 * Helper function: returns an array of external API status objects
 */
function _fsa_report_problem_apis() {
  return array(
    'mapit' => new MapItApiStatus(),
    'google_places' => new GooglePlacesApiStatus(),
  );
}

/**
 * Helper function: gets the nids of any translations of the given nid
 *
 * @param int $nid
 *   The node ID (nid) of a node for which we want to find translations
 *
 * @return array
 *   An associative array of node titles keyed on node IDs (nids). If no
 *   translations are found, an empty array is returned.
 */
function _fsa_report_problem_get_transaltion_nids($nid = NULL) {
  // Create an empty array to return
  $return_array = array();

  // If we don't have a nid, return an empty array.
  if (empty($nid)) {
    return $return_array;
  }

  // Get any translations of the node based on its nid
  $translations = translation_node_get_translations($nid);

  // If there are no tranlsations, return an empty array
  if (empty($translations)) {
    return array();
  }

  // Build an associative array keyed on nid, but excluding the $nid passed as
  // @param as we don't want to duplicate
  foreach ($translations as $lang => $node) {
    if ($node->nid != $nid) {
      $return_array[$node->nid] = $node->title;
    }
  }

  // Return the array
  return $return_array;
}


/**
 * Sets up initial variables for the FSA Report Problem module.
 *
 * @global object $language
 *   The language object.
 */
function _fsa_report_problem_variable_setup($langcode = 'cy') {
  // Get the current language settings so we can pass them to
  // hook_variable_info.
  global $language;
  $options = array(
    'language' => $language,
    'langcode' => $language->language,
  );

  // Get the current variable_realm_list_language settings.
  $variable_realm_list_language = variable_get('variable_realm_list_language', array());
  $translate_vars = array();

  // Get this module's localizable variables and add them to the list.
  $variables = module_invoke('fsa_report_problem', 'variable_info', $options);
  foreach ($variables as $variable_name => $variable_info) {
    if (!empty($variable_info['localize']) && $variable_info['localize']) {
      $translate_vars[] = $variable_name;
      if (!in_array($variable_name, $variable_realm_list_language)) {
        $variable_realm_list_language[] = $variable_name;
      }
    }
  }

  // Set the list of localizable variables.
  if (count($variable_realm_list_language) > 0) {
    variable_set('variable_realm_list_language', $variable_realm_list_language);
  }

  // Translate the variables
  if (function_exists('i18n_variable_set')) {
    foreach ($translate_vars as $var) {

      $var_value = $variables[$var]['default'];
      $var_value_translated = locale($variables[$var]['default'], NULL, $langcode);

      if ($var_value != $var_value_translated) {
        i18n_variable_set($var, $var_value, 'en');
        i18n_variable_set($var, $var_value_translated, $langcode);
      }
    }
  }
}


/**
 * Helper function: returns the 'start page' path for the current process
 *
 * @param string $lang_code
 *   (optional) The language code for which we want to return the path. If this
 *   parameter is NULL, the current language will be used.
 *
 * @param string $suffix
 *   (optional) Any additional path parts to be added after the main path. Note
 *   that this will not be used if an internal path is specified. Defaults to
 *   an empty string.
 *
 * @param boolean $internal
 *   (optional) If set to TRUE, the path returned will be internal,
 *   eg node/1234. Defaults to FALSE.
 *
 * @return string
 *   The path of the start page
 */
function _fsa_report_problem_get_start_path($lang_code = NULL, $suffix = '', $internal = FALSE) {

  // This is a much simpler re-implementation of this function. The old version
  // is below.
  $internal_path = current_path();

  // If we want the internal path, return it now
  if ($internal) {
    return $internal_path;
  }

  // Get the alias for the internal path
  $alias = drupal_get_path_alias($internal_path);

  // Return the alias - with any additional suffix
  return $alias . (!empty($suffix) ? "/$suffix" : '');

  // Get the current language.
  global $language;

  // Set the language code.  By default we'll use the current language, unless
  // one is specified via the first parameter.
  $lang_code = empty($lang_code) ? $language->language : $lang_code;

  // Get the nid. We'll use this to construct a path - provided there isn't a
  // language-specific translation node.
  $nid = _fsa_report_problem_get_nid();

  // See if there are any translations
  $translations = translation_node_get_translations($nid);

  // See if we have a translation that matches the $lang_code variable. If so,
  // we use its $nid instead of the existing one.
  if (!empty($lang_code) && !empty($translations) && !empty($translations[$lang_code])) {
    $nid = !empty($translations[$lang_code]->nid) ? $translations[$lang_code]->nid : $nid;
  }

  // If an internal path has been specified, return it now. Note that we don't
  // add suffixes to internal paths as they may cause issues.
  if ($internal) {
    return "node/$nid";
  }

  // Return the external path, with any suffix included
  return drupal_get_path_alias("node/$nid") . (!empty($suffix) ? "/$suffix" : '');

}


/**
 * Preprocess function for external API status
 */
function template_preprocess_external_api_status(&$variables) {

  // Get the status object from the $variables array
  $status = !empty($variables['status']) ? $variables['status'] : NULL;

  // Is the API healthy?
  $variables['healthy'] = !empty($status->healthy) ? TRUE : FALSE;

  // Is there an exception?
  $exception = !empty($status->exception) ? $status->exception : NULL;

  $exception_details = !empty($exception) ? _drupal_decode_exception($exception) : NULL;
  $variables['exception_details'] = !empty($exception_details) ? t('%type: !message in %function (line %line of %file).', $exception_details) : NULL;

  // Create an array of classes for the status message and message text
  $variables['status_classes_array'] = array('messages');
  if (empty($status->lastCheck)) {
    $variables['status_classes_array'][] = 'warning';
    $variables['status_message'] = t('No data available');
  }
  elseif ($variables['healthy']) {
    $variables['status_classes_array'][] = 'status';
    $variables['status_message'] = t('OK');
  }
  else {
    $variables['status_classes_array'][] = 'error';
    $variables['status_message'] = t('Problems detected');
  }

}


/**
 * Process function for external API status
 */
function template_process_external_api_status(&$variables) {
  // Flatten the status classes array
  $status_classes_array = !empty($variables['status_classes_array']) ? $variables['status_classes_array'] : array();
  $variables['status_classes'] = implode(' ', $status_classes_array);
}


/**
 * Helper function: returns a MapIt URL based on the MapIt base path
 *
 * @param string $path
 *   A path to add onto the end of the MapIt base URL
 *
 * @return string
 *   The base URL of the MapIt location service.
 */
function _fsa_report_problem_mapit_url($path = '') {
  $base_url = variable_get('fsa_report_problem_mapit_base_url', FSA_REPORT_PROBLEM_MAPIT_BASE_URL);
  return !empty($path) ? "$base_url/$path" : $base_url;
}


/**
 * Helper function: returns the MapIt user agent
 *
 * @return string
 *   User agent string for MapIt API requests
 */
function _fsa_report_problem_mapit_user_agent() {
  return variable_get('fsa_report_problem_mapit_user_agent', FSA_REPORT_PROBLEM_MAPIT_USER_AGENT);
}


/**
 * Helper function: returns MapIt HTTP request options
 *
 * @return array
 *   Associative array suitable for use as the second parameter of
 *   `drupal_http_request()`. Includes the custom user agent string used by
 *   MapIt to track usage of their API.
 *
 * @see drupal_http_request()
 * @see _fsa_report_problem_mapit_user_agent()
 *
 */
function _fsa_report_problem_mapit_http_options() {
  $options = array();
  $options['headers'] = array(
    'User-Agent' => _fsa_report_problem_mapit_user_agent(),
  );
  return $options;
}



/**
 * Helper function: returns a render array for the Rate widget
 *
 * Rate widgets are provide by the Rate module.
 *
 * @param string $widget_machine_name
 *   Machine name of the widget to embed
 * @param integer $weight
 *   The weight of the widget
 * @param integer $nid
 *   nid of the node on which the widget will appear.
 * @param string $mode
 *   View mode for the widget. Note that we don't use the constant RATE_FULL
 *   here as it may not be defined.
 *
 * @return array
 *   Render array for the Rate widget
 *
 * @todo Remove old code
 *
 * @see rate_get_active_widgets()
 * @see rate_embed()
 */
function _fsa_report_problem_rate_widget($widget_machine_name, $weight = 10, $nid = NULL, $mode = 1) {

  // Temporary code here...

  // Get the name of the property assigned to the node object
  $widget_property = "rate_$widget_machine_name";

  // Get the node object from the menu
  $node = menu_get_object();

  // If we have no nid then it's not a node. If the widget property is empty,
  // then we have no widget. In either case, return an empty string.
  if (empty($node->nid) || empty($node->$widget_property)) {
    return '';
  }

  // Create a container render array.
  $build = array(
    '#type' => 'container',
    '#tag' => 'div',
    '#attributes' => array(
      'class' => array(
        'rate-widget-container',
      ),
      'id' => array(
        'edit-rate-widget',
      ),
    ),
  );

  // Add the rate widget to the render array
  $build['widget'] = $node->$widget_property;

  // If the page language is anything other than English, include the page
  // language code in the path for the autocomplete widget AJAX call. This
  // overrides the default setting that comes from the Rate module
  // @see fsa_report_problem_rate_vote_ahah()
  global $language;
  $lang_code = !empty($language->language) ? $language->language : 'en';
  if ($lang_code != 'en') {
    drupal_add_js(array(
      'rate' => array(
        'basePath' => url("rate/vote/js/$lang_code"),
      )
    ), array('type' => 'setting'));
  }
  // Return the render array
  return $build;


  // Old code below here...
  // @todo Remove this once we're happy with the new code

  // Create the base render array.
  $build = array(
    '#markup' => t('Could not embed rate widget.'),
    '#weight' => $weight,
  );

  // If rate_embed() is not callable, exit now. This probably means that the
  // Rate module isn't available.
  if (!is_callable('rate_embed')) {
    return $build;
  }

  // If we have no $widget_machine_name, exit now
  if (empty($widget_machine_name)) {
    return $build;
  }

  // Set the $mode to its proper value
  $mode = $mode === 1 && defined('MODE_COMPACT') ? MODE_COMPACT : $mode;

  // Use the supplied $nid or get the one stored for the page
  $nid = !empty($nid) ? $nid : _fsa_report_problem_get_nid();

  // If we have no $nid, exit now, returning an empty array.
  if (empty($nid)) {
    return $build;
  }

  // Get the node object from the $nid
  $node = node_load($nid);

  // If there's no node, exit now, returning an empty array.
  if (empty($node)) {
    return $build;
  }

  // Get the widget object so we can get its title
  $widget = NULL;
  $widgets = rate_get_active_widgets('node', $node->type, 'full');
  foreach ($widgets as $widget_id => $w) {
    if ($w->name == $widget_machine_name) {
      $widget = $w;
    }
  }

  // If we have no $widget, return an empty render array.
  if (empty($widget)) {
    return $build;
  }

  // Create the proper render array
  $build['#type'] = 'item';
  $build['#title'] = check_plain(locale($widget->title));
  $build['#markup'] = rate_embed($node, $widget_machine_name, $mode);
  // If the page language is anything other than English, include the page
  // language code in the path for the autocomplete widget AJAX call. This
  // overrides the default setting that comes from the Rate module
  // @see fsa_report_problem_rate_vote_ahah()
  global $language;
  $lang_code = !empty($language->language) ? $language->language : 'en';
  if ($lang_code != 'en') {
    drupal_add_js(array(
      'rate' => array(
        'basePath' => url("rate/vote/js/$lang_code"),
      )
    ), array('type' => 'setting'));
  }
  return $build;
}


/**
 * Implements hook_rate_templates().
 */
function fsa_report_problem_rate_templates() {
  $templates = array();
  $templates['circles'] = new stdClass();
  $templates['circles']->value_type = 'option';
  $templates['circles']->options = array(
    array(1, '1'),
    array(2, '2'),
    array(3, '3'),
    array(4, '4'),
    array(5, '5'),
  );
  $templates['circles']->theme = 'rate_template_circles';
  $templates['circles']->css = drupal_get_path('module', 'fsa_report_problem') . '/css/circles.css';
  $templates['circles']->js = drupal_get_path('module', 'fsa_report_problem') . '/js/circles.js';
  $templates['circles']->customizable = TRUE;
  $templates['circles']->translate = FALSE;
  $templates['circles']->template_title = t('Circles');

  return $templates;
}


/**
 * Preprocess function for the circles rating template.
 */
function fsa_report_problem_preprocess_rate_template_circles(&$variables) {
  extract($variables);

  $circles = array();
  $count = count($links);
  $percent_per_star = 100 / ($count - 1);
  $circles_populated = FALSE;

  // Translate the rating in case we're on a Welsh page
  $rating = locale($results['rating']);
  foreach ($links as $index => $settings) {
    if ($settings['text'] == $rating) {
      $results['rating_index'] = $index + 1;
    }
  }

  for ($i = 0; $i < $count; $i++) {
    if ($results['rating_index'] >= $i+1 && !$results['empty']) {
      $class = 'rate-circles-btn-filled';
      $circles_populated = TRUE;
    }
    else {
      $class = 'rate-circles-btn-empty';
    }
    $class .= ' rate-circles-' . ($i + 1);
    $circles[] = theme('rate_button', array('text' => $links[$i]['text'], 'href' => $links[$i]['href'], 'class' => $class));
  }

  $variables['circles'] = array(
    '#theme' => 'item_list',
    '#items' => $circles,
    '#attributes' => array(
      'class' => array(),
    ),
  );

  if ($circles_populated) {
    $variables['circles']['#attributes']['class'][] = 'rate-circles-widget-populated';
  }

  $info = array();
  if ($mode == RATE_CLOSED) {
    $info[] = t('Voting is closed.');
  }
  if ($mode != RATE_COMPACT && $mode != RATE_COMPACT_DISABLED) {
    if (isset($results['user_vote'])) {
      $vote = locale($results['user_vote']);
      $info[] = t('You rated the service as <strong>@vote</strong>.', array('@vote' => $vote));
    }
  }
  $variables['info'] = implode(' ', $info);
}


/**
 * Theme function for circle ratings
 */
function theme_circle_rating(&$variables) {

  $score = !empty($variables['score']) ? $variables['score'] : 0;
  $descriptions = !empty($variables['descriptions']) ? $variables['descriptions'] : array();
  $description = !empty($variables['description']) ? $variables['description'] : (!empty($descriptions[$score]) ? $descriptions[$score] : '');
  // Define the maximum rating
  // @todo Make this configurable somehow in case we want different options
  $max_rating = 5;
  $output = '<div class="circles">';
  for ($i = 0; $i < $max_rating; $i++) {
    $class = $i < $score ? 'circle filled' : 'circle';
    $output .= '<div class="' . $class . '"><div class="inner-circle"></div></div>';
  }
  $output .= '<span class="rate-text">' . $description . '</span>';
  $output .= '</div>';
  return $output;
}


/**
 * Helper function: returns or sets the rating widget set for the service
 *
 * @param string $name
 *   (optional) The machine name of the rating widget. If populated, this will
 *   set the name of the rating widget for the service. Otherwise, this function
 *   will simply return the name - if set.
 *
 * @return string
 *   The machine name of the rating widget set for this service.
 */
function _fsa_report_problem_selected_rating_widget($name = NULL) {
  if (empty($name)) {
    $name = variable_get('fsa_report_problem_rating_widget');
  }
  else {
    variable_set('fsa_report_problem_rating_widget', $name);
  }
  return $name;
}


/**
 * Alter the Voting API settings form.
 *
 * We use this to add additional time windows for anonymous users.
 */
function fsa_report_problem_form_votingapi_settings_form_alter(&$form, &$form_state, $form_id) {
  // Make sure the anonymous window options element exists and has options.
  if (empty($form['votingapi_anonymous_window']) || empty($form['votingapi_anonymous_window']['#options'])) {
    return;
  }
  // Additional options to be added to the anonymous voting window
  $additional_options = array(
    10 => t('10 seconds'),
    30 => t('30 seconds'),
    60 => t('1 min'),
  );
  // Add the additional options
  $form['votingapi_anonymous_window']['#options'] += $additional_options;
  // Sort the anonymous window options
  ksort($form['votingapi_anonymous_window']['#options']);
}


/**
 * Implements hook_js_alter().
 */
function fsa_report_problem_js_alter(&$javascript) {
  // We need to make sure that circles.js is rendered before rate.js, otherwise
  // the event handler that sets the 'Saving rating...' text doesn't get fired.
  // We do this by reducing the weight of circles.js by a tiny amount so that it
  // floats above rate.js.
  $circles = drupal_get_path('module', 'fsa_report_problem') . '/js/circles.js';
  $rate = drupal_get_path('module', 'rate') . '/rate.js';
  if (!isset($javascript[$circles]) || !isset($javascript[$rate])) {
    return;
  }
  $javascript[$circles]['weight'] = $javascript[$rate]['weight'] - 0.0001;
}


/**
 * Export rating data as a CSV file
 */
function _fsa_report_problem_export_rating_data() {
  // Set the name for the CSV file to be downloaded
  $filename = 'ratings.csv';
  // An empty array for the CSV column headers
  $header = array();
  // An empty string for the exported text
  $output = '';

  // Get all the available widgets
  $widgets = variable_get(RATE_VAR_WIDGETS, array());

  // Get the machine name of the widget assigned to this service - if set.
  $widget_name = _fsa_report_problem_selected_rating_widget();

  // Set a message if no rating widget is selected
  if (empty($widget_name)) {
    drupal_set_message('No rating widget has been selected, so there are no results to display.', 'warning');
    drupal_add_http_header('status', '500 Internal server error');
    return t('Sorry, a problem occured exporting the data.');
  }

  // Set widget to NULL
  $widget = NULL;
  // Get details for the selected widget
  foreach ($widgets as $id => $details) {
    if ($details->name == $widget_name) {
      $widget = $details;
      break;
    }
  }

  // Get the nid for the node
  $nid = _fsa_report_problem_get_nid();
  // Load the node
  $node = !empty($nid) ? node_load($nid) : NULL;

  // If we don't have a node, set an error
  if (empty($node)) {
    drupal_set_message('No node found', 'warning');
    drupal_add_http_header('status', '500 Internal server error');
    return t('Sorry a problem occured exporting the data');
  }

  // Build the CSV output with vote counts per button.
  if (count($widget->options) > 1) {
    $widget_options = array_reverse($widget->options);
    $rows = array();
    foreach ($widget_options as $option) {
      $query = db_select('votingapi_vote', 'vv')
        ->condition('vv.entity_type', 'node')
        ->condition('vv.entity_id', $node->nid)
        ->condition('vv.value_type', $widget->value_type)
        ->condition('vv.value', $option[0])
        ->condition('vv.tag', $widget->tag)
        ->condition('vv.timestamp', 0, '>')
        ->orderBy('vv.value', 'DESC');
      $field = $query->addExpression('COUNT(*)', 'vote_count');
      $total_count = $query->execute()->fetchField();
      $circles = $option[0];
      $score = $circles * $total_count;
      $title = $widget->translate ? t($option[1]) : $option[1];
      $header[] = $title;
      $rows[] = $total_count;
    }
  }
  // Assemble the output
  $output = implode(',', $header) . "\n" . implode(',', $rows);
  // Add HTTP headers
  drupal_add_http_header('Content-Type', 'text/csv; utf-8');
  drupal_add_http_header('Content-Disposition', 'attachment;filename=' . $filename);
  // Output the data
  print $output;
  // Call drupal_exit().
  drupal_exit();
}


/**
 * Replacement callback function for rating AHAH function
 *
 * Allows the language of the returned response to be set
 *
 * @param string $lang_code
 *   The language code to be used. Defaults to 'en'
 *
 * @see rate_vote_ahah()
 */
function fsa_report_problem_rate_vote_ahah($lang_code = 'en') {
  global $language;
  $languages = language_list();
  $language = !empty($languages[$lang_code]) ? $languages[$lang_code] : $language;
  rate_vote_ahah();
}


/**
 * Helper function: returns content for the specified block as render array
 *
 * @param string $delta
 *   The delta of the block whose content we are going to render. If not
 *   provided, we assume 'local_authority_search'
 *
 * @return array
 *   A renderable array of block content.
 */
function _fsa_report_problem_block_content($delta = 'local_authority_search') {

  // Render array for the block content
  $block_content = array(
    '#theme' => 'report_problem_block_content',
  );

  // Create a function name based on the block delta and call it if available
  $function = __FUNCTION__ . "__$delta";

  // If the block content function is not callable, return an error message.
  if (!is_callable($function)) {
    // Log an error
    watchdog('fsa_report_problem', 'Function %function_name is not callable. Could not generate content for block %block_delta.', array('%function_name' => $function, '%block_delta' => $delta), WATCHDOG_ERROR);
    // Return a render array for the error message
    $block_content['#content'] = array(
      '#type' => 'html_tag',
      '#tag' => 'p',
      '#value' => t('Unfortunately an error has ocurred. Please try again later.'),
    );
    return $block_content;
  }

  // Call the block content function, passing the block delta
  $block_content += call_user_func_array($function, array($delta));

  // If $block_content is a string, change it to a render array with #markup
  if (!is_array($block_content['#content'])) {
    $block_content['#content'] = array(
      '#markup' => $block_content['#content'],
    );
  }

  // Add attached CSS
  $block_content['#attached'] = !empty($block_content['#attached']) ? $block_content['#attached'] : array();
  $block_content['#attached']['css'] = array(
    drupal_get_path('module', 'fsa_report_problem') . '/css/report-problem.css',
  );

  // Return the block content render array
  return $block_content;
}


/**
 * Helper function: provides block content for local authority search block
 */
function _fsa_report_problem_block_content__local_authority_search($delta = '') {

  // An empty array for the block content
  $block_content = array('#content' => '');

  // Get all the submitted data
  $submission = _fsa_report_problem_get_submission();

  // Some defaults
  $content = array();
  $step_count = !empty($submission->step_count) ? $submission->step_count : 2;
  $current_step = !empty($submission->current_step) ? $submission->current_step : 1;
  $step_title = _fsa_report_problem_text('step_title_find_business');

  // The start URL for the service
  $start_url = _fsa_report_problem_get_start_path();

  // Get the current page URL
  $request_path = request_path();

  // Get the path after the start path
  $path = trim(str_replace($start_url, '', $request_path), '/');

  // If it's a local authority path, trim off everything after the first /
  if (strpos($path, 'authority/') === 0) {
    $path = substr($path, 0, strpos($path, '/'));
  }

  switch($path) {

    // Step 1: business lookup form (default case)
    default:
      // As this is the first stage, let's clear any submission data
      _fsa_report_problem_clear_submission();
      // Reset step count - in case we have any data from previous submissions
      $step_count = 2;
      module_load_include('php', 'fsa_report_problem', 'forms/business_lookup_form');
      $content = drupal_get_form('fsa_report_problem_business_lookup_form', 'authority');
      break;

    // Step 1b: Postcode search
    case 'postcode':
      module_load_include('php', 'fsa_report_problem', 'forms/postcode_search_form');
      $content = drupal_get_form('fsa_report_problem_postcode_search_form', $delta, $path);
      $step_title = _fsa_report_problem_text('step_title_postcode_search');
      break;

    // Step 2: Select a business from search results - no autocomplete
    case 'select-business':
      module_load_include('php', 'fsa_report_problem', 'forms/business_results_form');
      $content = drupal_get_form('fsa_report_problem_business_results_form');
      $step_count = 3;
      $current_step = 2;
      $step_title = _fsa_report_problem_text('step_title_choose_business');
      break;

    // Step 3: Local authority details page
    case 'authority':

      // Get all the submitted data
      $submission = _fsa_report_problem_get_submission();

      // If we have no submission, we can't really display this page, so we
      // need to redirect to the start page
      if (empty($submission)) {
        drupal_set_message(t('Sorry, an error seems to have happened. Please try again.'), 'error');
        drupal_goto(url(_fsa_report_problem_get_start_path()));
      }

      // Get the local authority data
      $local_authority = _fsa_report_problem_get_submission('local_authority');

      // Get the postcode - if supplied
      $postcode = !empty($submission->postcode) ? _fsa_report_problem_format_postcode($submission->postcode) : '';

      // Which version of intro text should we use. Depends on whether we are
      // doing a postcode-based search.
      $intro_text = !empty($postcode) ? 'local_authority_intro_postcode' : 'local_authority_intro';

      // Add the intro text to the block content
      $content['intro_text'] = array(
        '#type' => 'form_intro',
        '#text' => _fsa_report_problem_text($intro_text, array('food_establishment' => !empty($submission->business) ? $submission->business : array('name' => 'this business', 'postcode' => $postcode))),
      );

      // Add the local authority details
      $content['local_authority_details'] = array(
        '#theme' => 'local_authority_details',
        '#local_authority' => $local_authority,
      );

      // Embed the rating widget - if set
      $rating_widget = _fsa_report_problem_selected_rating_widget();
      if (!empty($rating_widget)) {
        $content['rate_widget'] = _fsa_report_problem_rate_widget($rating_widget);
      }

      $step_count = $step_count > 2 ? $step_count : 2;
      $current_step = $step_count;
      $step_title = _fsa_report_problem_text('step_title_local_authority_details');

      // Clear the submission details. Do we need this here?
      _fsa_report_problem_clear_submission();
      break;
  }

  // Return a partial render array.
  return array(
    '#content' => $content,
    '#step_count' => $step_count,
    '#current_step' => $current_step,
    '#step_title' => $step_title,
  );

}


/**
 * Helper function: provides block content for find food safety team block
 */
function _fsa_report_problem_block_content__find_food_safety_team($delta = '') {

  // An empty array for the block content
  $block_content = array('#content' => '');

  // Get all the submitted data
  $submission = _fsa_report_problem_get_submission();

  // Some defaults
  $content = array();
  $step_count = 2;
  $current_step = 1;
  $step_title = _fsa_report_problem_text('step_title_postcode_search');

  // The start URL for the service
  $start_url = _fsa_report_problem_get_start_path();

  // Get the current page URL
  $request_path = request_path();

  // Get the path after the start path
  $path = trim(str_replace($start_url, '', $request_path), '/');

  // If it's a local authority path, trim off everything after the first /
  if (strpos($path, 'authority/') === 0) {
    $path = substr($path, 0, strpos($path, '/'));
  }

  switch($path) {

    // Step 1: Postcode search
    default:
      module_load_include('php', 'fsa_report_problem', 'forms/postcode_search_form');
      $content = drupal_get_form('fsa_report_problem_postcode_search_form', $delta, $path);
      break;

    // Step 2: Local authority details page
    case 'authority':

      // Get all the submitted data
      $submission = _fsa_report_problem_get_submission();

      // If we have no submission, we can't really display this page, so we
      // need to redirect to the start page
      if (empty($submission)) {
        drupal_set_message(t('Sorry, an error seems to have happened. Please try again.'), 'error');
        drupal_goto(url(_fsa_report_problem_get_start_path()));
      }

      // Get the local authority data
      $local_authority = _fsa_report_problem_get_submission('local_authority');

      // Get the postcode - if supplied
      $postcode = !empty($submission->postcode) ? _fsa_report_problem_format_postcode($submission->postcode) : '';

      // Which version of intro text should we use. Depends on whether we are
      // doing a postcode-based search.
      $intro_text = !empty($postcode) ? 'local_authority_intro_postcode' : 'local_authority_intro';

      // Add the intro text to the block content
      $content['intro_text'] = array(
        '#type' => 'form_intro',
        '#text' => _fsa_report_problem_text($intro_text, array('food_establishment' => !empty($submission->business) ? $submission->business : array('name' => 'this business', 'postcode' => $postcode))),
      );

      // Add the local authority details
      $content['local_authority_details'] = array(
        '#theme' => 'local_authority_details',
        '#local_authority' => $local_authority,
        '#delta' => $delta,
      );

      // Embed the rating widget - if set
      $rating_widget = _fsa_report_problem_selected_rating_widget();
      if (!empty($rating_widget)) {
        $content['rate_widget'] = _fsa_report_problem_rate_widget($rating_widget);
      }

      $current_step = $step_count;
      $step_title = _fsa_report_problem_text('step_title_local_authority_details');

      // Clear the submission details. Do we need this here?
      _fsa_report_problem_clear_submission();
      break;
  }

  // Return a partial render array.
  return array(
    '#content' => $content,
    '#step_count' => $step_count,
    '#current_step' => $current_step,
    '#step_title' => $step_title,
  );

}


/**
 * Helper function: generates block content for the full report problem service
 */
function _fsa_report_problem_block_content__report_problem_form($delta = '') {

  // An empty array for the block content
  $block_content = array('#content' => '');

  // Get all the submitted data
  $submission = _fsa_report_problem_get_submission();

  // Some defaults
  $content = array();
  $step_count = !empty($submission->step_count) ? $submission->step_count : 3;
  $current_step = !empty($submission->current_step) ? $submission->current_step : 1;
  $step_title = _fsa_report_problem_text('step_title_find_business');

  // Get the current page URL
  $request_path = request_path();

  // Get the path after the start path
  $path = trim(str_replace(_fsa_report_problem_get_start_path(), '', $request_path), '/');

  switch($path) {

    // Step 1: Search for business by name and location
    default:
      // As this is the first stage, let's clear any preexisting submission data
      _fsa_report_problem_clear_submission();
      // Reset step count - in case we have any data from previous submissions
      $step_count = 3;
      module_load_include('php', 'fsa_report_problem', 'forms/business_lookup_form');
      $content = drupal_get_form('fsa_report_problem_business_lookup_form', 'report');
      break;

    // Step 2: Select a business from search results - no autocomplete
    case 'select-business':
      $step_count = 4;
      module_load_include('php', 'fsa_report_problem', 'forms/business_results_form');
      $content = drupal_get_form('fsa_report_problem_business_results_form', 'report', $step_count);
      $current_step = 2;
      $step_title = _fsa_report_problem_text('step_title_choose_business');
      break;

    // Step 3: Make a report
    case 'report':
      module_load_include('php', 'fsa_report_problem', 'forms/make_report_form');
      $content = drupal_get_form('fsa_report_problem_make_report_form');
      $step_title = _fsa_report_problem_text('step_title_make_report');
      $step_count = $step_count > 3 ? $step_count : 3;
      $current_step = $step_count - 1;
      break;

    // Step 3a: Make a report - manual version
    case 'report/manual':
      module_load_include('php', 'fsa_report_problem', 'forms/make_report_form');
      $content = drupal_get_form('fsa_report_problem_make_report_form', TRUE);
      $step_title = _fsa_report_problem_text('step_title_make_report');
      $step_count = 2;
      $current_step = 1;
      break;

    // Step 4: Report complete
    case 'complete':
      module_load_include('php', 'fsa_report_problem', 'forms/report_complete_form');
      $content = drupal_get_form('fsa_report_problem_report_complete_form');
      $step_title = _fsa_report_problem_text('step_title_report_complete');
      $current_step = $step_count;
      // Clear the submission data
      _fsa_report_problem_clear_submission();
      break;
  }

  // Return a partial render array.
  return array(
    '#content' => $content,
    '#step_count' => $step_count,
    '#current_step' => $current_step,
    '#step_title' => $step_title,
  );
}


/**
 * Helper function: Get CTools cache data
 *
 * @param string $key
 *   (optional) The specific key from the cache object that we want to return.
 */
function _fsa_report_problem_get_submission($key = NULL) {
  // Include the CTools object cache
  ctools_include('object-cache');
  // Get CTools object cache data
  $submission = ctools_object_cache_get(FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_TYPE, FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_NAME);
  // If no $key parameter is supplied, simply return all the data
  if (empty($key)) {
    return $submission;
  }
  // If a $key parameter is supplied and it exists, return it. Otherwise return
  // NULL.
  if (is_object($submission) && property_exists($submission, $key)) {
    return $submission->$key;
  }
  else {
    return NULL;
  }
}


/**
 * Helper function: Set CTools object cache data
 */
function _fsa_report_problem_set_submission($data = NULL) {
  // The cached data needs to be an object. If it's an array, we turn it into
  // an object now.
  if (is_array($data)) {
    $data = (object) $data;
  }
  // Include the CTools object cache
  ctools_include('object-cache');
  // Set the CTools object cache data
  ctools_object_cache_set(FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_TYPE, FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_NAME, $data);
}


/**
 * Helper function: Clears submission data from the CTools cache
 */
function _fsa_report_problem_clear_submission() {
  // Include the CTools object cache
  ctools_include('object-cache');
  // Clear the submission
  ctools_object_cache_clear(FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_TYPE, FSA_REPORT_PROBLEM_CTOOLS_OBJECT_CACHE_NAME);
}


/**
 * Class for text entries
 */
class FsaReportProblemTextEntry implements ArrayAccess {

  public $value;
  private $format;
  private $default;
  private $data;

  /**
   * Constructor function
   */
  function __construct($value = NULL, $format = 'html_text', $default = NULL, $data = NULL) {
    $this->setValue($value, $default);
    $this->format = $format;
    $this->data = $data;
  }

  /**
   * Set the text value
   *
   * @prarm string $text
   *   The text to use for the value property - if set
   *
   * @param string $default
   *   (optional) The default text to use if none is set
   */
  public function setValue($text, $default = NULL) {
    $this->value = !empty($text) ? $text: $default;
  }


  /**
   * Replace tokens method
   */
  private function replaceTokens() {
    return token_replace($this->value, $this->data);
  }


  /**
   * Tostring function - allows the $value to be printed directly
   */
  function __toString() {
    return $this->replaceTokens();
  }


  /**
   * Offset exists method
   */
  public function offsetExists($offset) {
    return property_exists($this, $offset);
  }


  /**
   * Offset unset
   */
  public function offsetUnset($offset) {
    unset($this->$offset);
  }


  /**
   * Offset get
   */
  public function offsetGet($offset) {
    if ($offset == 'value') {
      return $this->replaceTokens();
    }

    return isset($this->$offset) ? $this->$offset : NULL;
  }


  /**
   * Offset set
   */
  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }
}


/**
 * Helper function: returns an array of text entry categories and descriptions
 */
function _fsa_report_problem_text_categories() {
  $categories = array(
    FSA_REPORT_PROBLEM_TEXT_CATEGORY_ERROR => t('Error messages'),
    FSA_REPORT_PROBLEM_TEXT_CATEGORY_STEP_TITLE => t('Step titles'),
    FSA_REPORT_PROBLEM_TEXT_CATEGORY_SERVICE_STATUS => t('Service status'),
    FSA_REPORT_PROBLEM_TEXT_CATEGORY_GENERAL => t('General'),
  );
  return $categories;
}


/**
 * Implements hook_page_build().
 *
 * We use this function to add the blocks to the relevant pages.
 */
function fsa_report_problem_page_build(&$page) {
  // Get the menu object to find out what node (if any) is currently loaded
  $menu_object = menu_get_object();
  // Try to get the nid from the menu object
  $nid = !empty($menu_object) && !empty($menu_object->nid) ? $menu_object->nid : NULL;
  // No nid? We're not on a node, so exit now
  if (empty($nid)) {
    return;
  }
  // Get a list of nids associated with blocks from this module.
  $nids = _fsa_report_problem_nids();
  // Is the current node in the list? If not, exit now
  if (!key_exists($nid, $nids)) {
    return;
  }
  // Get the delta of the block to display
  $delta = $nids[$nid];
  // Get the block content and add it to the page content
  $block = module_invoke('fsa_report_problem', 'block_view', $delta);
  $page['content'][$delta] = $block['content'];
}


/**
 * Helper function: returns an array of node IDs associated with block deltas
 */
function _fsa_report_problem_nids() {
  $nids = &drupal_static(__FUNCTION__);
  if (!isset($nids)) {
    $services = module_invoke('fsa_report_problem', 'block_info');
    $nids = array();
    foreach ($services as $name => $details) {
      $node_details = variable_get('fsa_report_problem_' . $name . '_node_nid');
      if (!empty($node_details)){
          $nids[_fsa_report_problem_extract_nid($node_details)] = $name;
      }
    }
  }
  return $nids;
}
