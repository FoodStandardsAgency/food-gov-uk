<?php
/**
 * @file
 * Module file for the FSA Report a problem module.
 */

/**
 * Alpha status
 */
define('FSA_REPORT_PROBLEM_STATUS_ALPHA', 1);

/**
 * Beta status
 */
define('FSA_REPORT_PROBLEM_STATUS_BETA', 2);

/**
 * Production status
 */
define('FSA_REPORT_PROBLEM_STATUS_PRODUCTION', 0);

/**
 * Offline status
 */
define('FSA_REPORT_PROBLEM_STATUS_OFFLINE', 3);

/**
 * Status
 */
define('FSA_REPORT_PROBLEM_STATUS', variable_get('fsa_report_problem_service_status', FSA_REPORT_PROBLEM_STATUS_PRODUCTION));

/**
 * Group name for this module's variables
 */
define('FSA_REPORT_PROBLEM_VARIABLE_GROUP_NAME', 'fsa_report_problem');

/**
 * URL for the report a food problem service
 */
define('FSA_REPORT_PROBLEM_PATH', 'enforcement/report-problem');


/**
 * Implements hook_permission().
 */
function fsa_report_problem_permission() {

  $permissions = array();

  $permissions['view food problem reports'] = array(
    'title' => t('View food problem reports'),
    'description' => t('View reports of problems with food premises'),
  );

  $permissions['administer food problem reporting'] = array(
    'title' => t('Administer food problem reporting'),
    'description' => t('Perform administration functions relating to the food problem reporting system'),
  );

  return $permissions;

}

/**
 * Implements hook_menu().
 */
function fsa_report_problem_menu() {
  $items = array();

  $items['admin/reports/food-problems'] = array(
    'title' => t('Food problem reports'),
    'description' => t('View reports of problems with food premises'),
    'access arguments' => array('view food problem reports'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_view_reports'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/reports/food-problems/%'] = array(
    'title' => t('Food problem report'),
    'page callback' => 'problem_report_view',
    'page arguments' => array(3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/reports/food-problems/%/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/reports/food-problems/%/forward'] = array(
    'title' => t('Forward'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_report_forward_form', 3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/reports/food-problems/%/authority'] = array(
    'title' => t('Set local authority'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_report_local_authority_form', 3),
    'access arguments' => array('view food problem reports'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/foodproblems'] = array(
    'title' => t('Food problem reporting'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer food problem reporting'),
    'page arguments' => array('fsa_food_report_admin_form'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/config'] = array(
    'title' => t('Configuration'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer food problem reporting'),
    'page arguments' => array('fsa_food_report_admin_form'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/config/foodproblems/text'] = array(
    'title' => t('Edit text'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_food_report_text_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 10,
  );

  $items['admin/config/foodproblems/emails'] = array(
    'title' => t('Manage emails'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_food_report_email_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => 20,
  );

  $items['admin/config/foodproblems/authorities'] = array(
    'title' => t('Local authority data'),
    'page callback' => 'fsa_report_problem_local_authorities_new',
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  $items['admin/config/foodproblems/authorities/%'] = array(
    'title' => t('View Local authority data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_view_form', 4),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/%/view'] = array(
    'title' => 'View',
    'weight' => -10,
  );

  $items['admin/config/foodproblems/authorities/%/edit'] = array(
    'title' => t('Edit Local authority data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form', 4),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/add'] = array(
    'title' => t('Add new local authority'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/add/%'] = array(
    'title' => t('Edit Local authority data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authority_edit_form', '0', 5),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  $items['admin/config/foodproblems/authorities/import'] = array(
    'title' => t('Import local authority data'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fsa_report_problem_authorities_import_form_new'),
    'access arguments' => array('administer food problem reporting'),
    'file' => 'fsa_report_problem.admin.inc',
  );

  return $items;
}


/**
 * Implements hook_block_info().
 */
function fsa_report_problem_block_info() {
  $blocks = array();
  $blocks['report_problem_form'] = array(
    'info' => t('Report a food problem form'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}


/**
 * Implements hook_block_view().
 */
function fsa_report_problem_block_view($delta = '') {

  // Array to hold the block.
  $block = array();

  switch($delta) {

    // Search for an establishment form
    case 'report_problem_form':
      if (FSA_REPORT_PROBLEM_STATUS == FSA_REPORT_PROBLEM_STATUS_OFFLINE) {
        $block['content'] = array(
          'heading' => array(
            '#type' => 'html_tag',
            '#tag' => 'h2',
            '#value' => t('Service currently unavailable'),
            '#attributes' => array(
              'class' => array('service-offline'),
            ),
          ),
          'message' => array(
            '#type' => 'html_tag',
            '#tag' => 'p',
            '#value' => _fsa_report_problem_status_message(FSA_REPORT_PROBLEM_STATUS_OFFLINE),
            '#attributes' => array(
              'class' => array('service-offline'),
            ),
          ),
          '#attached' => array(
            'css' => array(
              drupal_get_path('module', 'fsa_report_problem') . '/css/report-problem.css',
            ),
          ),
        );
        break;
      }
      module_load_include('inc', 'fsa_report_problem', 'includes/form');
      $block['content'] = drupal_get_form('fsa_report_problem_form');

      if (!empty($block['content'])) {
        $contextual_links = array(
          'admin/config/foodproblems',
          array(),
        );
        $block['content']['#contextual_links']['fsa_report_problem'] = $contextual_links;
      }

      break;
  }

  return $block;
}


/**
 * Returns the results of a search for premises.
 *
 * This function is not currently used as it has been superseded by the
 * Google Places search.
 *
 * @deprecated Use Google Places instead
 */
function fsa_report_problem_get_results($name, $address) {
  if (empty($name) || empty($address)) {
    return '';
  }

  $endpoint = 'Establishments';
  $args = array();
  $params = array(
    'name' => $name,
    'address' => $address,
  );

  $request = fhrs_api_make_request($endpoint, $args, $params);

  if (!empty($request)) {
    $data = drupal_json_decode($request);
    return $data;

    // Get results meta data
    $meta = !empty($data['meta']) ? $data['meta'] : array();
    $total_count = !empty($meta['totalCount']) ? $meta['totalCount'] : 0;

    if ($total_count === 0) {
      return array(
        '#prefix' => '<p>',
        '#markup' => t('Sorry, we couldn\'t find any matching establishments.'),
        '#suffix' => '</p>',
      );
    }

    if (!empty($data['meta']['totalCount'])) {
      $establishments[] = array(
        '#markup' => format_plural($data['meta']['totalCount'], 'Your search for "%name" in "%address" brought up 1 result.', 'Your search for "%name" in "%address" brought up @count results.', array('%name' => $name, '%address' => $address)),
      );
    }
    if (!empty($data['establishments'])) {
      foreach ($data['establishments'] as $establishment) {
        $tester = array(
          '#type' => 'food_establishment',
          'establishment_details' => $establishment,
        );
        $establishments[] = $tester;
      }
    }
  }

  return $establishments;
}



/**
 * Get the parameters supplied - either in query string or POST
 */
function _fsa_report_problem_get_params() {
  $params = $_SERVER['REQUEST_METHOD'] == 'POST' ? $_POST : $_GET;
  return array_merge($_GET, $_POST);
  return $params;
}



/**
 * Implements hook_element_info().
 */
function fsa_report_problem_element_info() {
  $types['food_establishment'] = array(
    '#theme' => 'food_establishment',
    '#pre_render' => array('fsa_report_problem_pre_render_food_establishment'),
  );
  $types['form_intro'] = array(
    '#input' => FALSE,
    '#theme' => 'form_intro',
  );
  return $types;
}



/**
 * Implements hook_theme().
 */
function fsa_report_problem_theme($existing, $type, $theme, $path) {
  return array(
    'food_establishment' => array(
      'render element' => 'elements',
      'template' => 'theme/food-establishment',
    ),
    'problem_report' => array(
      'template' => 'theme/problem-report',
      'variables' => array(
        'report' => NULL,
      ),
    ),
    'form_intro' => array(
      'template' => 'theme/form-intro',
      'render element' => 'element',
    ),
  );
}


/**
 * Implements hook_theme_registry_alter().
 *
 * We use this hook to add the generic preprocess function to every relevant
 * hook.
 */
function fsa_report_problem_theme_registry_alter(&$theme_registry) {
  // List of relevant theme hooks.
  $hooks = array(
    'problem_report',
  );
  // Add the generic preprocess function to the start of the array for each of
  // the relevant hooks.
  foreach ($hooks as $hook) {
    if (!empty($theme_registry[$hook])) {
      array_unshift($theme_registry[$hook]['preprocess functions'], '_fsa_report_problem_preprocess_problem_report');
    }
  }
}



/**
 * Preprocess function for food establishment elements
 * @param array $variables
 *   Template variables - passed by reference
 *
 * @see food-establishment.tpl.php
 */
function template_preprocess_food_establishment(&$variables) {
  //dpm($variables);

//  $establishment = $variables['elements'];
//  $variables['name'] = $establishment['name'];
//  $variables['address_array'] = $establishment['address'];
//  $variables['postcode'] = $establishment['postcode'];
//  $variables['local_authority_name'] = $establishment['local_authority_name'];
//  $variables['report_link'] = array(
//    '#theme' => 'link',
//    '#text' => t('Report this business'),
//    '#path' => request_path(),
//    '#options' => array(
//      'attributes' => array(),
//      'html' => FALSE,
//      'query' => array(
//        'fhrsid' => $establishment['FHRSID'],
//      ),
//    ),
//  );

  $establishment = $variables['elements'];


  //dpm($establishment);

  $variables['id'] = $establishment['#establishment_details']['test_id'];
  $variables['name'] = $establishment['name'];
  $variables['address'] = $establishment['address'];
  $variables['classes_array'][] = 'food-establishment-' . $establishment['id'];

//  $variables['submit_button'] = array(
//    '#type' => 'submit',
//    '#value' => $variables['name'],
//    '#value' => t('Report this business'),
//    '#name' => 'op' . $variables['id'],
//    '#submit' => array('fsa_report_problem_form_submit'),
//    '#attributes' => array(
//      'data-business-id' => $variables['id'],
//      'id' => 'edit-' . $variables['id'],
//    ),
//  );

}

/**
 * Process function for food establishment elements
 */
function template_process_food_establishment(&$variables) {
  // Make the address into a string for rendering.
  //$variables['address'] = !empty($variables['address_array']) ? implode(', ', $variables['address_array']) : '';
}


/**
 * Pre-render function for food establishments.
 */
function fsa_report_problem_pre_render_food_establishment($element) {
  //dpm($establishment);

  //dpm($element);


//  // Get the establishment details
//  $establishment_details = !empty($element['establishment_details']) ? $element['establishment_details'] : array();
//
//  // Get the establishment name
//  $element['name'] = !empty($establishment_details['BusinessName']) ? $establishment_details['BusinessName'] : '';
//
//  // Get the FHRSID
//  $element['FHRSID'] = !empty($establishment_details['FHRSID']) ? $establishment_details['FHRSID'] : '';
//
//  // Get the address
//  $element['address'] = array();
//  for ($i = 0; $i < 5; $i++) {
//    if (!empty($establishment_details["AddressLine$i"])) {
//      $address[] = $establishment_details["AddressLine$i"];
//    }
//  }
//
//  $element['postcode'] = !empty($establishment_details['PostCode']) ? $establishment_details['PostCode'] : '';
//
//  $element['address'] = $address;
//
//  $element['local_authority_name'] = !empty($establishment_details['LocalAuthorityName']) ? $establishment_details['LocalAuthorityName'] : '';
//  //$element['postcode'] = $postcode;
//
//  //dpm($element);


  $establishment_details = !empty($element['#establishment_details']) ? $element['#establishment_details'] : array();
  $element['id'] = $establishment_details['id'];
  $element['name'] = $establishment_details['name'];
  $element['address'] = $establishment_details['formatted_address'];
  $element['lat'] = !empty($establishment_details['geometry']['location']['lat']) ? $establishment_details['geometry']['location']['lat'] : 0;
  $element['lng'] = !empty($establishment_details['geometry']['location']['lng']) ? $establishment_details['geometry']['location']['lng'] : 0;
  return $element;
}




function fsa_report_problem_show_report_form() {

  $params = _fsa_report_problem_get_params();
  if (empty($params['fhrsid'])) {
    //dpm('No ID');
    return '';
  }

  $establishment = fsa_report_problem_get_establishment_details($params['fhrsid']);

  return drupal_get_form('fsa_report_problem_report_form', $establishment);




}


function fsa_report_problem_get_establishment_details($fhrsid = NULL) {

  if (empty($fhrsid)) {
    return NULL;
  }

  $endpoint = 'Establishments';
  $args = array($fhrsid);
  $params = array();

  $establishment_details = fhrs_api_make_request($endpoint, $args, $params);

  return drupal_json_decode($establishment_details);


}



function fsa_report_problem_show_establishment_search_form() {

  $params = _fsa_report_problem_get_params();
  if (!empty($params['fhrsid'])) {
    return '';
  }



  return drupal_get_form('fsa_report_problem_establishment_search_form');
}



/**
 * Implements hook_entity_info().
 */
function fsa_report_problem_entity_info() {

  // An array to hold the entity information.
  $info = array();

  $info['problem_report'] = array(
    'label' => t('Problem report'),
    'base table' => 'problem_reports',
    'entity keys' => array(
      'id' => 'rid',
    ),
    'entity class' => 'Entity',
    'controller class' => 'ProblemReportEntityController',
    'uri callback' => 'problem_report_uri',
    'module' => 'fsa_report_problem',
    'fieldable' => TRUE,
    'bundles' => array(),
  );

  $info['local_authority'] = array(
    'label' => t('Local authority'),
    'base table' => 'local_authority_details',
    'entity keys' => array(
      'id' => 'aid',
    ),
    'entity class' => 'Entity',
    'controller class' => 'LocalAuthorityEntityController',
    'uri callback' => 'local_authority_uri',
    'module' => 'fsa_report_problem',
    'fieldable' => TRUE,
    'bundles' => array(),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function fsa_report_problem_entity_property_info() {
  $entity_property_info = array();

  $entity_property_info['local_authority'] = array(
    'properties' => array(
      'local_authority_id' => array(
        'label' => t('FHRS ID'),
        'type' => 'integer',
        'description' => t('Local authority ID from FHRS'),
        'schema field' => 'local_authority_id',
      ),
    ),
  );


  return $entity_property_info;
}


/**
 * Extending the EntityAPIController for the Project entity.
 */
class ProblemReportEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);


    $build['#report'] = $entity;
    $build['test'] = array(
      '#markup' => 'hello world',
    );

    return $build;
  }

}

/**
 * Extending the EntityAPIController for the Project entity.
 */
class LocalAuthorityEntityController extends EntityAPIController {

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);


    $build['#report'] = $entity;
    $build['test'] = array(
      '#markup' => 'hello world',
    );

    return $build;
  }

}



/**
 * Entity uri callback.
 */
function problem_report_uri($report) {
  return array(
    'path' => 'admin/reports/food-problems/' . $report->rid,
  );
}

/**
 * Entity uri callback.
 */
function local_authority_uri($local_authority) {
  return array(
    'path' => 'admin/config/foodproblems/authorities/' . $local_authority->aid,
  );
}



/**
 * Preprocess function for problem_reports.
 */
function template_preprocess_problem_report(&$variables) {

  $report = !empty($variables['report']) ? $variables['report'] : NULL;


  $variables['unsent_warning'] = empty($report->email_sent) ? t('Please note, this report has not yet been forwarded to the relevant local authority') : '';
  if (empty($report->email_sent)) {
  }



  $variables['local_authority_email'] = !empty($variables['local_authority_email']) ? l($variables['local_authority_email'], 'mailto:' . $variables['local_authority_email']) : '';

  $variables['local_authority'] = array(
    '#type' => 'item',
    '#markup' => $variables['local_authority_name'] . (!empty($variables['local_authority_email']) ? ', ' . $variables['local_authority_email'] : ''),
    '#title' => t('Local authority'),
  );


  $variables['reporter_name'] = array(
    '#type' => 'item',
    '#markup' => $variables['reporter_name'] . (!empty($variables['reporter_email']) ? ', ' . l($variables['reporter_email'], 'mailto:' . $variables['reporter_email']) : ''),
    '#title' => t('Reported by'),
  );

  $variables['problem_date'] = array(
    '#type' => 'item',
    '#title' => t('Date the problem occurred'),
    '#markup' => format_date($report->problem_date, 'medium'),
  );

  $variables['problem_details'] = array(
    '#type' => 'item',
    '#title' => t('Problem details'),
    '#markup' => check_markup($variables['problem_details'], 'full_html'),
  );

}




/**
 * Get results from the Google Places API via text search.
 *
 * @param string $name
 *   The name of the business
 *
 * @param string $location
 *   The location of the business
 *
 * @param integer $max_results
 *   The maximum number of results to return
 *
 * @return array
 *   An array of Google Places results
 */
function fsa_report_problem_get_google_results($name, $location, $user_location = NULL, $max_results = 60) {
  $endpoint = 'https://maps.googleapis.com/maps/api/place/textsearch/json';
  $api_key = 'AIzaSyBKglgVV8ILtw8Y6zPwCA9t9CNi4Ymdm_I'; // MF account
  //$api_key = 'AIzaSyA3EzfGM0KCsRjrmbNuEVOfDs4Nm4di1sk'; // FSA account

  // Number of results returned per request. This is set by Google.
  $results_per_request = 20;

  $query = "$name $location";
  $options = array(
    'query' => array(
      'key' => $api_key,
      'query' => $query,
      'types' => 'establishment',
      'components' => 'country:GB', // This doesn't actually appear to work
    ),
  );

  $use_location = FALSE;
  if ($use_location) {
    $client_ip = !empty($_SERVER['HTTP_X_REAL_IP']) ? $_SERVER['HTTP_X_REAL_IP'] : '';
    $location = !empty($user_location) ? $user_location : _fsa_report_problem_get_location_by_ip($client_ip);
    if (!empty($location)) {
      $options['query']['location'] = $location;
      $options['query']['radius'] = 50000;
    }
  }

  $results = array();
  $next_page_token = '';
  $request_count = 0;

  // Set the minimum number of results
  $result_threshold = 5;
  do {
    if ($request_count > 0) {
      sleep(1);
    }
    if (!empty($next_page_token)) {
      $options['query']['pagetoken'] = $next_page_token;
    }
    $url = url($endpoint, $options);
    $places = drupal_http_request($url);
    $request_count++;
    if (!empty($places->data)) {
      $data = drupal_json_decode($places->data);
      $next_page_token = $data['next_page_token'];
      if (!empty($data['results'])) {
        foreach ($data['results'] as $key => $result) {
          if (strpos($result['formatted_address'], 'United Kingdom') !== FALSE || strpos($result['formatted_address'], 'UK') !== FALSE) {
            $results[] = $result;
          }
        }
      }
    }
  }
  while($request_count < $max_results/$results_per_request && count($results) < $result_threshold);

  if (!empty($results)) {
    return $results;
  }
  else {
    return array();
  }
}


function fsa_report_problem_get_local_authority($lng, $lat){
  $endpoint = 'http://mapit.mysociety.org/point/4326';
  $url = url("$endpoint/$lng,$lat", array('query' => array('type' => 'DIS,UTA,LBO,LGD')));
  $area_data = drupal_http_request($url);
  return current(drupal_json_decode($area_data->data));
}


function fsa_report_problem_get_local_authority_by_postcode($postcode = NULL) {

  if (empty($postcode)) {
    return array();
  }
  $postcode = urlencode($postcode);
  $endpoint = 'http://mapit.mysociety.org/postcode';
  $url = url("$endpoint/$postcode");
  $area_data = drupal_http_request($url);
  $data = drupal_json_decode($area_data->data);
  $areas = !empty($data['areas']) ? $data['areas'] : array();
  $area_types = array('DIS', 'UTA', 'LBO', 'LGD');
  $selected_area = array();
  foreach ($areas as $id => $area) {
    if (!empty($area['type']) && in_array($area['type'], $area_types)) {
      $selected_area = $area;
    }
  }
  return $selected_area;
}

/**
 * Returns an email address for a local authority, based on the MapIt area ID
 *
 * Local authority email addresses are provided by the FHRS API via its
 * Authorities endpoint. In order to get the correct ID to query the FHRS API,
 * we have to map the MapIt area ID to the corresponding FHRS local authority
 * ID. We do this through the `local_authority_areas` table. If we find no
 * match, then we return an empty string.
 *
 * @param int $id
 *   The MapIt area ID
 *
 * @return string
 *   If a corresponding local authority is returned by the FHRS API, then we
 *   return the email address associated with it.
 *   If no email address is found, or if something else goes wrong, we return
 *   a zero-length string.
 *
 * @see fsa_report_problem_get_fhrs_authorities().
 */
function fsa_report_problem_get_local_authority_email_address($id) {

  // If we don't have an ID or it's not a number, return an empty string now.
  if (empty($id) || !is_numeric($id)) {
    return '';
  }


  // Query the local_authority_areas table to find a corresponding ID for use in
  // the FHRS API. Return the results as an associative array keyed on the ID.
  $query = db_select('local_authority_areas', 'l');
  $query->fields('l');
  $query->fields('d', array('email'));
  $query->leftJoin('local_authority_details', 'd', 'l.local_authority_id = d.local_authority_id');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  // If we don't have a corresponding FHRS ID, return an empty string.
  if (empty($results[$id]) || empty($results[$id]->local_authority_id)) {
    return '';
  }

  // If we already have an email address in our override table, use that.
  // Otherwise, Query the FHRS API, passing the local authority ID to see if we
  // can get any results.
  $local_authority = !empty($results[$id]->email) ? (object) array('Email' => $results[$id]->email) : fsa_report_problem_get_fhrs_authorities($results[$id]->local_authority_id);

  // The returned value should be an object, and its Email property should
  // contain the local authority's email address. If not, return an empty
  // string.
  if (!is_object($local_authority) || empty($local_authority->Email)) {
    return '';
  }

  // Return the email address.
  return $local_authority->Email;

}

/**
 * Gets the local authority ID from FHRS, based on MapIt area ID.
 *
 * @param int $id
 *   Area ID from MapIt
 *
 * @return int
 *   ID of the local authority in the FHRS system. 0 if none found.
 */
function fsa_report_problem_get_local_authority_id($id) {
  // If we don't have an ID or it's not a number, return 0.
  if (empty($id) || !is_numeric($id)) {
    return 0;
  }

  // First query the locally-stored local authority data to see if we have a
  // match.
  // @todo Use EntityFieldQuery here instead. Need to expose area id first.
  $query = db_select('local_authority_details', l);
  $query->fields('l');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  //dpm($results);

  // Query the local_authority_areas table to find a corresponding ID for use in
  // the FHRS API. Return the results as an associative array keyed on the ID.
  $query = db_select('local_authority_areas', 'l');
  $query->fields('l');
  $query->condition('area_id', $id);
  $results = $query->execute()
    ->fetchAllAssoc('area_id');

  // If we don't have a corresponding FHRS ID, return an empty string.
  if (empty($results[$id]) || empty($results[$id]->local_authority_id)) {
    return 0;
  }

  return $results[$id]->local_authority_id;
}



function fsa_report_problem_get_mapit_areas($types = array('DIS', 'UTA', 'LBO', 'LGD')) {
  $endpoint = 'http://mapit.mysociety.org/areas';
  $url = "$endpoint/" . implode(',', $types);
  $areas = drupal_http_request($url);
  return drupal_json_decode($areas->data);
}

/**
 * Returns a MapIt area based on FHRS ID
 * @param int $id
 *   The FHRS ID of the local authority region.
 */
function fsa_report_problem_get_mapit_area_by_fhrs_id($id) {
  if (empty($id)) {
    return 0;
  }

  $query = db_select('local_authority_areas', 'l');
  $query->condition('local_authority_id', $id, '=');
  $query->fields('l', array('area_id'));
  $result = $query->execute()->fetchCol(0);
  return !empty($result[0]) ? $result[0] : 0;
}


/**
 * Returns a local authority object based on MapIt area ID
 * @param type $area_id
 */
function fsa_report_problem_get_local_authority_by_area_id($area_id = 0) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'local_authority')
    ->propertyCondition('area_id', $area_id);
  $result = $query->execute();
  $authorities = entity_load('local_authority', array_keys($result['local_authority']));
  if (empty($authorities)) {
    return FALSE;
  }
  else {
    return current($authorities);
  }
}


function fsa_report_problem_get_fhrs_authorities($id = NULL) {
  $endpoint = 'Authorities';
  $args = !empty($id) ? array($id) : array();
  $params = array();
  $request = fhrs_api_make_request($endpoint, $args, $params);

  if (empty($request->success) || empty($request->data)) {
    return array();
  }

  if (!is_array($request->data)) {
    return $request->data;
  }

  $fhrs_authorities = array();

  foreach ($request->data as $fhrs_authority) {
    $fhrs_authorities[$fhrs_authority->LocalAuthorityId] = $fhrs_authority;
  }

  return $fhrs_authorities;

  //return !empty($request->success) && !empty($request->data) ? $request->data : array();


  return $request->data;


  if (empty($id)) {
    return json_decode($request)->authorities;
  }
  else {
    return json_decode($request);
  }
}



/**
 * Implements hook_mail().
 *
 * @param type $key
 * @param type $message
 * @param type $params
 */
function fsa_report_problem_mail($key, &$message, $params) {

  $options = array(
    'langcode' => $message['language']->language,
  );

  switch ($key) {
    case 'problem_report':

      $report = $params['report'];

      $message_details = _fsa_report_problem_email('problem_report');
      $message_body = !empty($message_details['message']) ? $message_details['message'] : '';

      // If we have no local authority email, set priority to high as someone
      // will need to forward it on. Many email clients will take no notice of
      // this, but some may treat these messages differently.
      if (empty($report->local_authority_email)) {
        $message['headers']['X-Priority'] = "1 (Highest)";
      }

      $message['to'] = !empty($report->local_authority_email) ? $report->local_authority_email : $message_details['default_recipient'];

      $message['from'] = !empty($message_details['sender_email']) ? $message_details['sender_email'] : $message['from'];
      $message['headers']['From'] = $message['from'];

      $message['subject'] = FSA_REPORT_PROBLEM_STATUS > FSA_REPORT_PROBLEM_STATUS_PRODUCTION ? 'TEST :: ' : '';
      $message['subject'] .= empty($report->local_authority_email) ? t('ACTION REQUIRED: ') : '';

      $message['subject'] .= token_replace($message_details['subject'], array('report' => $params['report']));
      //$message['subject'] .= t('Food Problem report');
      //$message['subject'] .= !empty($params['report']->business_name) ? ' - ' . $params['report']->business_name : '';
      //$message['body'][] = drupal_render($message_body);

      if (FSA_REPORT_PROBLEM_STATUS > FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
        $status_message = _fsa_report_problem_text('email_development_notice');
        if (!empty($status_message['value'])) {
          $message['body'][] = $status_message['value'];
        }
      }

      $message['body'][] = token_replace($message_body, array('report' => $params['report']));
      break;

    case 'report_forward':
      $message['body'][] = $params['message'];
      $message['subject'] = $params['subject'];
      break;

    case 'acknowledgement':
      $report = $params['report'];
      $message_body = array(
        '#theme' => 'report_acknowledgement_email',
        '#report' => $report,
      );
      //$message['subject'] = t('Thank you for submitting a report');
      //$message['body'][] = drupal_render($message_body);
      $message_details = _fsa_report_problem_email('acknowledgement');
      $message['subject'] .= token_replace($message_details['subject'], array('report' => $params['report']));

      if (!empty($params['report']->reporter_name)) {
        $message['body'][] = t('Dear @reporter_name', array('@reporter_name' => $params['report']->reporter_name));
      }
      else {
        $message['body'][] = t('Dear Sir or Madam');
      }

      $message['body'][] = token_replace($message_details['message'], array('report' => $params['report']));

      if (!empty($params['report']->local_authority_email)) {
        $contact = _fsa_report_problem_text('contact_local_authority', array('report' => $params['report']));
        $message['body'][] = "\r\n\r\n" . $contact['value'];
      }
      break;
  }
}


function fsa_report_problem_mail_send($report = NULL) {

  //$message = !empty($entry) && !empty($entry->message) ? $entry->message : '';


  //dpm($report->local_authority_email);

  $module = 'fsa_report_problem';
  $key = 'problem_report';

  $to = !empty($report->local_authority_email) ? $report->local_authority_email : 'farrow.matt@gmail.com';
  $from = variable_get('site_mail', 'content@food.gov.uk');

  $language = language_default();

  $send = TRUE;

  //$message = 'This is a test message.';
  $message = $report->business_name;

  $params = array(
    'message' => $message,
    'subject' => 'Food problem report - test',
    'report' => $report,
  );
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}

function fsa_report_problem_mail_forward($report = NULL, $to = NULL, $from = NULL, $subject = NULL, $message = NULL) {

  $module = 'fsa_report_problem';
  $key = 'report_forward';

  $to = !empty($to) ? $to : $report->local_authority_email;
  $from = !empty($from) ? $from : variable_get('site_mail', 'content@food.gov.uk');

  $language = language_default();

  $send = TRUE;

  $params = array(
    'message' => $message,
    'subject' => $subject,
    'report' => $report,
  );
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}

function fsa_report_problem_acknowledgement_send($report = NULL) {
  $module = 'fsa_report_problem';
  $key = 'acknowledgement';
  $to = $report->reporter_email;
  $from = variable_get('site_mail', 'content@food.gov.uk');
  $send = TRUE;
  $params = array(
    'report' => $report,
  );
  $language = language_default();
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  return $result;
}


/**
 * General preprocess function for problem reports.
 *
 * @param array $variables
 *   Template variables - passed by reference
 *
 * @see report-acknowledgement-email.tpl.php
 * @see problem-report-email.tpl.php
 * @see problem-report.tpl.php
 */
function _fsa_report_problem_preprocess_problem_report(&$variables) {
  // Get the report object
  $report = !empty($variables['report']) ? $variables['report'] : NULL;
  // If we don't have a report object, return now.
  if (empty($report)) {
    return;
  }

  // Populate variables from the report object
  $vars = array(
    'reporter_name',
    'reporter_email',
    'business_name',
    'business_location',
    'business_postcode',
    'local_authority_name',
    'local_authority_email',
    'problem_details',
  );

  foreach ($vars as $var) {
    $variables[$var] = !empty($report->$var) ? $report->$var : '';
  }

}

/**
 * Preprocess function for form intro text
 *
 * @param array $variables
 *   Template variables - passed by reference.
 */
function template_preprocess_form_intro(&$variables) {
  // Get the render element
  $element = !empty($variables['element']) ? $variables['element'] : NULL;

  // Get the text. We want it to be an array, so if it's a string - ie a single
  // paragraph, turn it into an array instead.
  $text = !empty($element['#text']) ? $element['#text'] : array();

  if (is_array($text)) {
    if (array_key_exists('value', $text)) {
      $format = array_key_exists('format', $text) ? $text['format'] : 'plain_text';
      if ($format != 'plain_text') {
        $text = array($text['value']);
      }
    }
    else {
      foreach($text as $index => $t) {
        $text[$index] = "<p>$t</p>";
      }
    }
  }
  else {
    $text = array("<p>$text</p>");
  }

  $variables['text'] = $text;
}



function _fsa_report_problem_status_description($status = FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
  $status_descriptions = array(
    FSA_REPORT_PROBLEM_STATUS_ALPHA => t('Alpha'),
    FSA_REPORT_PROBLEM_STATUS_BETA => t('Beta'),
    FSA_REPORT_PROBLEM_STATUS_PRODUCTION => t('Production'),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => t('Offline')
  );
  return $status_descriptions[$status];
}


function _fsa_report_problem_status_message($status = FSA_REPORT_PROBLEM_STATUS_PRODUCTION) {
  $messages = array(
    //FSA_REPORT_PROBLEM_STATUS_ALPHA => t('This is a prototype service – your <a href="@feedback_link">feedback</a> will help us to improve it. No information you share here will leave this test system.', array('@feedback_link' => 'mailto:digital.communications@foodstandards.gsi.gov.uk?subject=Feedback%20on%20Report%20a%20food%20problem%20service%20[ALPHA%20phase]&amp;body=Hello%2C%20%0A%0AYou%20asked%20for%20my%20feedback.%20Here%20it is:')),
    //FSA_REPORT_PROBLEM_STATUS_BETA => t('This service is currently in beta. If you notice any problems, please contact us.'),
    //FSA_REPORT_PROBLEM_STATUS_OFFLINE => t('This service is currently offline. We apologise for any inconvenience.'),
    FSA_REPORT_PROBLEM_STATUS_ALPHA => _fsa_report_problem_text('service_status_alpha'),
    FSA_REPORT_PROBLEM_STATUS_BETA => _fsa_report_problem_text('service_status_beta'),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => _fsa_report_problem_text('service_status_offline'),
  );
  return !empty($messages[$status]['value']) ? $messages[$status]['value'] : '';
}

function _fsa_report_problem_text($key = NULL, $data = array()) {

  $text = array(
    'find_business_intro' => array(
      'title' => t('Business search form intro'),
      'description' => t('This is the text that appears at the top of the business lookup form.'),
      'default' => t('Hello, this is the first stage. This is a test.'),
    ),
    'find_business_extra' => array(
      'title' => t('Business search additional info'),
      'description' => t('This text displays beneath the form on the introductory page.'),
    ),
    'choose_business_intro' => array(
      'title' => t('Business choice form intro'),
      'description' => t('This text appears at the top of the screen where users can select a business'),
      'default' => t('Please choose from the business listed below.'),
    ),
    'no_matching_business' => array(
      'title' => t('No matching business'),
      'description' => t('This text appears at the top of the business search results when no matching business is found.'),
      'default' => t('Sorry, we could not find any matching businesses.'),
    ),
    'choose_business_bottom' => array(
      'title' => t('Text beneath business choice'),
      'description' => t('This text appears beneath the list of businesses.'),
      'default' => '<h3>' . t('Business not listed?') . '</h3><p>' . t('Couldn\'t find the business you were looking for? <a href="@try_again">Try again</a> or <a href="@manual_entry">enter the details manually</a>.', array('@try_again' => '', '@manual_entry' => '?manual=true')) . '</p>',
    ),
    'make_report_intro' => array(
      'title' => t('Report page intro'),
      'description' => t('Intro text for the main report page'),
      'default' => t('Please complete the form below, including as much detail as possible about the food problem you have seen. You may leave out your name and address if you wish to remain anonymous. When you submit your report, it will be sent to [local_authority:name], who will investigate the problem.'),
    ),
    'make_report_intro_manual' => array(
      'title' => t('Report page intro - manual entry'),
      'description' => t('Intro text for the manual entry version of the main report page'),
      'default' => t('Please complete the form below, including as much detail as possible about the food problem you have seen and the establishment where you saw it. Please try to include the postcode if you know it. You may leave out your name and address if you wish to remain anonymous. When you submit your report, it will be forwarded to the relevant local authority, who will investigate the problem.'),
    ),
    'report_complete' => array(
      'title' => t('Report complete text'),
      'description' => t('Report complete text'),
      'default' => t('Thank you for your report, which will be forwarded to [local_authority:name] for investigation.'),
    ),
    'report_complete_manual' => array(
      'title' => t('Report complete text - manual entry'),
      'description' => t('Report complete text - manual entry'),
      'default' => t('Thank you for your report. It will be forwarded to the relevant local authority for investigation.'),
    ),
    'contact_local_authority' => array(
      'title' => t('Contact your local authority'),
      'description' => t('Contact details for the local authority - if available'),
      'default' => 'If you need to contact [local_authority:name] about your report, you can do so at <a href="mailto:[local_authority:email]">[local_authority:email]</a>.',
      'type' => array('email', 'page'),
    ),
    'email_development_notice' => array(
      'title' => t('Under development notice - email'),
      'description' => t('This notice will appear at the top of emails to local authorities when the system is under development.'),
      'default' => '** IMPORTANT: This is a test message generated by a system that is currently under development. Please ignore and delete it. ** ',
      'format' => 'plain_text',
    ),
    'service_status_alpha' => array(
      'title' => t('Service status - Alpha'),
      'description' => t('Description of service status when in Alpha'),
      'default' => t('This is a prototype service - your <a href="@feedback_url"><strong>feedback</strong></a> will help us to improve it. No information you share here will leave this test system.', array('@feedback_url' => "mailto:digital.communications@foodstandards.gsi.gov.uk?subject=Feedback%20on%20'Report%20a%20food%20problem'%20service%20[ALPHA%20phase]&amp;body=Hello%2C%20%0A%0AYou%20asked%20for%20my%20feedback.%20Here%20it is:")),
      'format' => 'plain_text',
    ),
    'service_status_beta' => array(
      'title' => t('Service status - Beta'),
      'description' => t('Description of service status when in Beta'),
      'default' => t('This is a prototype service - your <a href="@feedback_url"><strong>feedback</strong></a> will help us to improve it. No information you share here will leave this test system.', array('@feedback_url' => "mailto:digital.communications@foodstandards.gsi.gov.uk?subject=Feedback%20on%20'Report%20a%20food%20problem'%20service%20[ALPHA%20phase]&amp;body=Hello%2C%20%0A%0AYou%20asked%20for%20my%20feedback.%20Here%20it is:")),
      'format' => 'plain_text',
    ),
    'service_status_offline' => array(
      'title' => t('Service status - Offline'),
      'description' => t('Description of service status when it is offline'),
      'default' => t('We\'re sorry, but this service is currently unavailable. We are making every effort to restore it, so please check back soon. Please accept our apologies for any inconvenience.'),
      'format' => 'plain_text',
    ),
  );

  if (empty($key)) {
    return $text;
  }

  if (array_key_exists($key, $text)) {
    $variable_name = "fsa_report_problem_text_${key}";
    $text_content = variable_get("fsa_report_problem_text_${key}");
    return array(
      'value' => token_replace(!empty($text_content['value']) ? $text_content['value'] : (!empty($text[$key]['default']) ? $text[$key]['default'] : ''), $data),
      'format' => !empty($text[$key]['format']) ? $text[$key]['format'] : 'full_html',
    );
  }
  else {
    return '';
  }


}




/**
 * Implements hook_token_info().
 */
function fsa_report_problem_token_info() {
  $types = array(
    'local_authority' => array(
      'name' => t('Local authority'),
      'description' => t('Local authority information as used in the report a problem module'),
      'needs-data' => 'local_authority',
    ),
    'food_report' => array(
      'name' => t('Food problem report'),
      'description' => t('Food problem report properties'),
      'needs-data' => 'problem_report',
    ),
  );

  $local_authority['name'] = array(
    'name' => t('Local authority name'),
    'description' => t('The name of the local authority'),
  );

  $local_authority['email'] = array(
    'name' => t('Local authority email address'),
    'description' => t('The email address of the local authority as held on the FHRS database'),
  );

  $food_report['id'] = array(
    'name' => t('Report ID'),
    'description' => t('The unique ID of the report as stored on the system'),
  );

  return array(
    'types' => $types,
    'tokens' => array(
      'local_authority' => $local_authority,
      'food_report' => $food_report,
    )
  );


}

/**
 * Implements hook_tokens().
 *
 * @param type $type
 * @param type $tokens
 * @param array $data
 * @param array $options
 */
function fsa_report_problem_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $replacements = array();
  foreach ($tokens as $name => $original) {

    if (!empty($data['local_authority'])) {
      $local_authority = $data['local_authority'];
    }
    elseif (!empty($data['report'])) {
      $report = $data['report'];
      $local_authority = new stdClass();
      $local_authority->name = !empty($report->local_authority_name) ? $report->local_authority_name : '';
      $local_authority->email = !empty($report->local_authority_email) ? $report->local_authority_email : '';
    }


    if ($type == 'local_authority' && !empty($local_authority)) {
      switch ($name) {
        case 'name':
          if (!empty($local_authority->name)) {
            $replacements[$original] = $local_authority->name;
          }
          break;
        case 'email':
          if (!empty($local_authority->email)) {
            $replacements[$original] = $local_authority->email;
          }
          break;
      }
    }

    if (!empty($data['report'])) {
      $report = $data['report'];
    }

    if ($type == 'food_report' && !empty($report)) {
      //dpm($report);
      switch ($name) {
        case 'id':
          if (!empty($report->rid)) {
            $replacements[$original] = $report->rid;
          }
          break;
        case 'business_name':
          if (!empty($report->business_name)) {
            $replacements[$original] = $report->business_name;
          }
          break;
        case 'business_address':
          if (!empty($report->business_location)) {
            $replacements[$original] = $report->business_location;
          }
          break;
        case 'business_map_link':
          if (!empty($report->coordinates)) {
            $map_link = "http://www.google.co.uk/maps?q=" . $report->coordinates;
          }
          else {
            $map_link = '';
          }
          $replacements[$original] = $map_link;
          break;
        case 'report_date':
          if (!empty($report->problem_date)) {
            $replacements[$original] = format_date($report->problem_date, 'medium');
          }
          break;
        case 'problem_details':
          if (!empty($report->problem_details)) {
            $replacements[$original] = $report->problem_details;
          }
          break;
        case 'reporter':
          if (empty($report->reporter_name) && empty($report->reporter_email)) {
            $replacements[$original] = t('The reporter withheld his/her details.');
          }
          else {
            $reporter = array();
            if (!empty($report->reporter_name)) {
              $reporter[] = $report->reporter_name;
            }
            if (!empty($report->reporter_email)) {
              $reporter[] = $report->reporter_email;
            }
            $replacements[$original] = implode(', ', $reporter);
          }
          break;
      }
    }

  }

  return $replacements;
}




function _fsa_report_problem_service_statuses() {
  return array(
    FSA_REPORT_PROBLEM_STATUS_ALPHA => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_ALPHA),
    FSA_REPORT_PROBLEM_STATUS_BETA => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_BETA),
    FSA_REPORT_PROBLEM_STATUS_PRODUCTION => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_PRODUCTION),
    FSA_REPORT_PROBLEM_STATUS_OFFLINE => _fsa_report_problem_status_description(FSA_REPORT_PROBLEM_STATUS_OFFLINE),
  );
}




function _fsa_report_problem_email($key = NULL) {

  $emails = array();

  $emails['problem_report'] = array(
    'subject' => t('Food problem report - [food_report:business_name]'),
    'message' => t('This is a food problem report from a member of the public via food.gov.uk.'),
    'default_recipient' => 'test@test.com',
    'title' => t('Problem report email'),
    'sender_email' => 'reports@food.gov.uk', // @todo update this when we know what it should be
    'description' => t('This is the email that will be sent to the local authority to notify them of a problem. If no email address is available for the local authority, then an email will be sent instead to the default recipient email address.'),
  );

  $emails['acknowledgement'] = array(
    'subject' => t('Thank you for your report'),
    'message' => t('Thank you for reporting a food problem at [food_report:business_name], [food_report:business_address].'),
    'recipient' => '',
    'title' => t('Acknowledgement email'),
    'sender_email' => 'reports@food.gov.uk', // @todo update this when we know what it should be
    'description' => t('This is the acknowledgement email that will be sent to the user on submission of the report if he or she has included his/her email address.'),
  );

  if (empty($key)) {
    return $emails;
  }

  if (array_key_exists($key, $emails)) {
    $email = $emails[$key];
    $email['recipient'] = !empty($email['recipient']) ? $email['recipient'] : NULL;
    $variable_name = "fsa_report_problem_email_${key}";
    $email['message'] = variable_get("${variable_name}_message", $email['message']);
    $email['subject'] = variable_get("${variable_name}_subject", $email['subject']);
    $email['recipient'] = variable_get("${variable_name}_recipient", $email['recipient']);
    $email['sender_email'] = variable_get("${variable_name}_sender_email", !empty($email['default_recipient']) ? $email['default_recipient'] : NULL);
    $email['default_recipient'] = variable_get("${variable_name}_default_recipient", !empty($email['default_recipient']) ? $email['default_recipient'] : NULL);
    return $email;
  }
  else {
    return array();
  }

}


/**
 * Formats a UK postcode
 *
 * @param string $postcode
 *   A string containing a UK postcode.
 *
 * @return string
 *   Either a properly formatted postcode or the original string if not suitable
 *
 */
function _fsa_report_problem_format_postcode($postcode) {

  $original = $postcode;

  // First, get rid of spaces and reverse the string
  $postcode = strrev(str_replace(' ', '', $postcode));

  // UK postcodes are between 6 and 8 characters in length including the space.
  // If it's longer or shorter than this, there's not much we can do with it, so
  // we just return what we're given
  if (strlen($postcode) < 5 || strlen($postcode) > 7) {
    return $original;
  }

  // UK postcodes are divided into two parts - inward and outward. The inward
  // part is the last three characters (after the space). To get both parts, we
  // reverse the string and use the first three characters as the inward part
  // and the following characters as the outward part.
  $inward = strrev(substr($postcode, 0, 3));
  $outward = strrev(substr($postcode, 3));

  // Convrert it to uppercase and add a space for syntactic correctness.
  $postcode = strtoupper("$outward $inward");

  // Return the result.
  return $postcode;
}



/**
 * Updates local authority data held in Drupal from the FHRS API.
 */
function _fsa_report_problem_update_fhrs_data() {
  //$fhrs_authorities = array();


  //$fhrsa = fsa_report_problem_get_fhrs_authorities();
  //dpm($fhrsa);

  // Get the local authority data from FHRS.
  $fhrs_authorities = fsa_report_problem_get_fhrs_authorities();

  // If we have no FHRS authorities, return FALSE now.
  if (empty($fhrs_authorities)) {
    return FALSE;
  }

  //foreach ($fhrsa as $fhrs_authority) {
  //  $fhrs_authorities[$fhrs_authority->LocalAuthorityId] = $fhrs_authority;
  //}

  // Load up all of the local authority entities from Drupal
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'local_authority');
  $result = $query->execute();
  $aids = array_keys($result['local_authority']);
  $authorities = entity_load('local_authority', $aids);

  foreach ($authorities as $authority) {

    $email_override = !empty($authority->email) && !empty($authority->fhrs_email) && $authority->email != $authority->fhrs_email ? TRUE : FALSE;

    $fhrs_auth = $fhrs_authorities[$authority->local_authority_id];

    if (!empty($fhrs_auth)) {
      $authority->fhrs_name = $fhrs_auth->Name;
      $authority->fhrs_email = $fhrs_auth->Email;
      if (!empty($authority->fhrs_email) && (empty($authority->email) || !$email_override)) {
        $authority->email = $authority->fhrs_email;
      }
      $authority->save();
    }

  }
  // If we've got this far, assume everything has been successful.
  return TRUE;

}



/**
 * Implements hook_cron().
 */
function fsa_report_problem_cron() {

  // Get the last time the FHRS data was updated
  $last_import = variable_get('fsa_report_problem_fhrs_last_import', 0);

  // If the data has already been updated today, exit now. There should be no
  // need to run this job more than once a day, but there will be a manual
  // override within the GUI and a Drush command to force an update.
  if (date('dmY', REQUEST_TIME) == date('dmY', $last_import)) {
    watchdog('Food report', t('FHRS authority update already run today. Exiting.'));
    return;
  }

  // Update the FHRS data. If we're successful, set a variable to stop this
  // from happening again today.
  if (_fsa_report_problem_update_fhrs_data()) {
    variable_set('fsa_report_problem_fhrs_last_import', REQUEST_TIME);
    watchdog('Food report', t('FHRS authority data updated.'));
  }
  // Looks like the update failed for some reason. Let Watchdog know and don't
  // set the variable, so it'll try on the next Cron run.
  else {
    watchdog('Food report', t('An error occurred updating the FHRS data. Will try again on next Cron run.'), array(), WATCHDOG_NOTICE);
  }
}


/**
 * Implements hook_ctools_plugin_api().
 */
function fsa_report_problem_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == "context" && $api == "context") {
    return array("version" => "3");
  }
}


/**
 * Implementation of hook_context_default_contexts().
 */
function fsa_report_problem_context_default_contexts() {
  $export = array();
  $context = new stdClass();
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->api_version = 3;
  $context->name = 'report_food_problem';
  $context->description = 'Adds food problem report form to the relevant pages';
  $context->tag = 'Report food problem';
  $context->conditions = array(
    'path' => array(
      'values' => array(
        FSA_REPORT_PROBLEM_PATH . '*' => FSA_REPORT_PROBLEM_PATH . '*',
      ),
    ),
  );
  $context->reactions = array(
    'block' => array(
      'blocks' => array(
        'fsa_report_problem-report_problem_form' => array(
          'module' => 'fsa_report_problem',
          'delta' => 'report_problem_form',
          'region' => 'content',
          'weight' => '-10',
        ),
      ),
    ),
  );
  $context->condition_mode = 0;

  // Translatables
  // Included for use with string extractors like potx.
  t('Adds food problem report form to the relevant pages');

  $export[$context->name] = $context;
  return $export;
}


/**
 * Gets location (latitude and longitude) based on IP address.
 *
 * @param string $ip
 *   (optional) The IP address to look up. If no IP address is supplied, we use
 *   the client's IP address.
 *
 * @return string
 *   The location in the form of latitude,longitude. If no location is found, we
 *   return an empty string.
 */
function _fsa_report_problem_get_location_by_ip($ip = NULL) {
  $client_ip = !empty($ip) ? $ip : $_SERVER['HTTP_X_REAL_IP'];
  $endpoint = 'http://www.geoplugin.net/php.gp';
  $options = array(
    'query' => array(
      'ip' => $client_ip,
    ),
  );
  $result = drupal_http_request($endpoint, $options);
  if ($result->code != '200') {
    return '';
  }

  $data = unserialize($result->data);
  if (!empty($data['geoplugin_latitude']) && !empty($data['geoplugin_longitude'])) {
    return $data['geoplugin_latitude'] . ',' . $data['geoplugin_longitude'];
  }
  else {
    return '';
  }
}


/**
 * Implements hook_init().
 *
 * We use this to handle non-existent paths that set $_GET parameters used
 * within the report a food problem service.
 */
function fsa_report_problem_init() {

  $request_path = request_path();
  $path = FSA_REPORT_PROBLEM_PATH;

  // Make sure that the path for the report a problem service is the first part
  // of the current path. If not, exit now.
  if (strpos($request_path, $path) !== 0) {
    return;
  }

  $path_suffix = str_replace("$path/", '', $request_path);

  // Define a set of path suffixes and the $_GET keys and values associated
  // with them
  $path_mappings = array(
    // Allows us to turn off autcomplete.
    'na' => array(
      'ac' => 0,
    ),
    // Manual entry of business details
    'manual' => array(
      'manual' => 1,
    ),
    // Process complete
    'complete' => array(
      'complete' => 1,
    ),
  );

  // Check to see if anything after the path is in our array of $path_mappings.
  // If so, set the $_GET['q'] parameter to our standard path and add $_GET
  // elements for each of the items in the array within $path_mappings.
  if (array_key_exists($path_suffix, $path_mappings)) {
    $_GET['q'] = drupal_get_normal_path($path);
    if (is_array($path_mappings[$path_suffix])) {
      foreach ($path_mappings[$path_suffix] as $param => $value) {
        $_GET[$param] = $value;
      }
    }
  }

}


/**
 * Implements hook_block_configure().
 */
function fsa_report_problem_block_configure($delta = '') {
  // Make sure we're on our block.
  if ($delta != 'report_problem_form') {
    return;
  }
  // Include the configuration form for the module
  module_load_include('inc', 'fsa_report_problem', 'fsa_report_problem.admin');
  $form_state = array();
  $form = fsa_food_report_admin_form(array(), $form_state);
  $form['config_interface_link'] = array(
    '#type' => 'item',
    '#title' => t('More configuration options'),
    '#markup' => t('Full configuration options for the Report a Food Problem service can be found at <a href="@config_link">Admin > Configuration > Food problem reporting</a>.', array('@config_link' => url('admin/config/foodproblems'))),
  );
  // Remove the submit button from the included form. It will cause duplication.
  unset($form['actions']);
  return $form;
}


/**
 * Implements hook_block_save().
 */
function fsa_report_problem_block_save($delta = '', $edit = array()) {
  // Make sure we're on our block.
  if ($delta != 'report_problem_form') {
    return;
  }

  if (isset($edit['fsa_report_problem_service_status'])) {
    variable_set('fsa_report_problem_service_status', $edit['fsa_report_problem_service_status']);
  }

  if (isset($edit['fsa_report_problem_service_status_message'])) {
    variable_set('fsa_report_problem_service_status_message', $edit['fsa_report_problem_service_status_message']);
  }

}
