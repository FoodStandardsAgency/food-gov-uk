<?php

/**
 * @file
 * Filter for preserving content.
 */

/**
 * Implements hook_filter_info().
 */
function preserve_filter_filter_info() {
  $filters = array();
  $filters['preserve_filter'] = array(
    'title' => t('Preserve formatter'),
    'description' => t('Preserve HTML found within preserve tags.'),
    'prepare callback' => '_preserve_filter_prepare',
    'process callback' => '_preserve_filter_process',
    'cache' => TRUE,
  );
  return $filters;
}

/**
 * Implements filter prepare callback.
 * Store preserved content and add placeholders before other filters are run.
 */
function _preserve_filter_prepare($text, $filter) {
  $text = preg_replace_callback('/<preserve>(.*?)<\/preserve>/s', '_preserve_filter_placeholders', $text);
  return $text;
}

/**
 * Implements callback_filter_process().
 *
 * Fill in placeholders with preserved content after other filters have run.
 */
function _preserve_filter_process($text, $filter) {

  $text = preg_replace_callback('/----preserve----(.*?)----\/preserve----/s', '_preserve_filter_placeholders_fill', $text);
  $text = str_replace('----preserve----', '', $text);
  $text = str_replace('----/preserve----', '', $text);
  return trim($text);
}

/**
 * Replace preserved elements with a placeholder so the rest of the content can be sanitised.
 *
 **/
function _preserve_filter_placeholders($matches) {

  static $count = 0;
  $count++;
  _preserve_filter_preserved($matches[1]);

  return '----preserve----' . $count . '----/preserve----';
}

/**
 * Replace placeholders with orginal text after content has been sanitised.
 *
 **/
function _preserve_filter_placeholders_fill($matches) {

  static $count = 0;
  $count++;
  $content = _preserve_filter_preserved();

  return $content[$count - 1];
}

/**
 * Store preserved content temporarely.
 *
 **/
function _preserve_filter_preserved($match = NULL) {
  static $matches = array();

  if ($match) {
    $matches[] = $match;
  }

  return $matches;
}
