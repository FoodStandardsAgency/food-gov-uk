<?php
/**
 * @file
 * Module code for the FSA GovDelivery integration module
 */


/**
 * Implements hook_form_FORM_ID_alter().
 */
function fsa_govdelivery_form_taxonomy_form_vocabulary_alter(&$form, $form_state, &$edit = array()) {

  // Add our custom submit function at the start of the array.
  //array_unshift($form['#submit'], 'fsa_govdelivery_taxonomy_form_vocabulary_submit');
  $form['#submit'][] = 'fsa_govdelivery_taxonomy_form_vocabulary_submit';

  // Get the vocabulary object, if defined.
  $vocabulary = !empty($form['#vocabulary']) ? $form['#vocabulary'] : NULL;

  // Get the GovDelivery settings for this vocabulary, if set.
  $govdelivery_settings = !empty($vocabulary->vid) ? get_object_vars(_fsa_govdelivery_get_entity_settings('vocabulary', $vocabulary->vid)) : array();

  // If this vocabulary is already mapped to a vocabulary, get the mapping ID.
  $form['#govdelivery_mapping_id'] = !empty($govdelivery_settings['gid']) ? $govdelivery_settings['gid'] : NULL;

  // Get the options array for the GovDelivery mapping, if set.
  $govdelivery_options = !empty($govdelivery_settings['options']) ? $govdelivery_settings['options'] : array();

  // Add a fieldset for the GovDelivery settings
  $form['govdelivery_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('GovDelivery settings'),
  );

  // Check GovDelivery API status
  $govdelivery_status = _govdelivery_api_available();
  // If it's not healthy, show a message and return.
  if (!$govdelivery_status->isHealthy()) {
    $form['govdelivery_settings']['unavailable'] = array(
      '#theme' => 'govdelivery_api_status_description',
      '#status' => $govdelivery_status,
    );
    return;
  }

  // Get GovDelivery categories
  $categories = govdelivery_api_get_categories();
  $options = array();
  foreach ($categories as $category) {
    $options[$category->code] = $category->name;
  }
  $options['new_category'] = t(' * Create new category');

  $form['govdelivery_settings']['govdelivery_category'] = array(
    '#type' => 'select',
    '#title' => t('Linked GovDelivery category'),
    '#description' => t('Select a GovDelivery category to which this vocabulary should be linked. If you want to create a new category in GovDelivery, select the last item in this list.'),
    '#options' => $options,
    '#empty_option' => t('- None -'),
    '#default_value' => !empty($govdelivery_settings['govdelivery_code']) ? $govdelivery_settings['govdelivery_code'] : NULL,
  );


  $form['govdelivery_settings']['govdelivery_readonly'] = array(
    '#type' => 'checkbox',
    '#title' => t('Read-only'),
    '#description' => t('If a GovDelivery category is read-only, its title and description will NOT be overwritten by the Drupal values.'),
    '#default_value' => isset($govdelivery_options['readonly']) ? $govdelivery_options['readonly'] : 1,
    '#states' => array(
      'invisible' => array(
        ':input[name="govdelivery_category"]' => array('value' => ''),
      ),
    ),
  );

  unset($options['new_category']);
  $form['govdelivery_settings']['govdelivery_parent_category'] = array(
    '#type' => 'select',
    '#title' => t('Parent GovDelivery category (new categories only)'),
    '#description' => t('If you are creating a new GovDelivery category linked to this vocabulary, do you want it to be a child of an existing category?.'),
    '#options' => $options,
    '#empty_option' => t('- None -'),
    //'#default_value' => !empty($govdelivery_settings['govdelivery_code']) ? $govdelivery_settings['govdelivery_code'] : NULL,
    '#states' => array(
      'visible' => array(
        ':input[name="govdelivery_category"]' => array('value' => 'new_category'),
      ),
    ),
  );

  $form['govdelivery_settings']['govdelivery_child_type'] = array(
    '#type' => 'select',
    '#title' => t('Child item type'),
    '#description' => t('What type of GovDelivery items (if any) should be mapped to child items of this vocabulary?'),
    '#options' => array(
      'none' => t('None'),
      'category' => t('Category'),
      'topic' => t('Topic'),
    ),
    '#default_value' => !empty($govdelivery_options['child_type']) ? $govdelivery_options['child_type'] : 'none',
    '#states' => array(
      'invisible' => array(
        ':input[name="govdelivery_category"]' => array('value' => ''),
      ),
    ),
  );

  $quick_subscribe_pages = _govdelivery_api_get_quick_subscribe_pages();
  if (!empty($quick_subscribe_pages)) {
    $form['govdelivery_settings']['govdelivery_child_quick_subscribe_page'] = array(
      '#type' => 'select',
      '#title' => t('Child item quick subscribe page'),
      '#description' => t('Which quick subscribe page should be associated with child items of this vocabulary?'),
      '#options' => $quick_subscribe_pages,
      '#empty_option' => t('Please choose...'),
      '#default_value' => !empty($govdelivery_options['child_quick_subscribe_page']) ? $govdelivery_options['child_quick_subscribe_page'] : NULL,
      '#states' => array(
        'invisible' => array(
          ':input[name="govdelivery_category"]' => array('value' => ''),
        ),
      ),
    );
  }

}


/**
 * Additional submit handler for the vocabulary form
 */
function fsa_govdelivery_taxonomy_form_vocabulary_submit($form, &$form_state) {

  $vocabulary = !empty($form['#vocabulary']) ? $form['#vocabulary'] : NULL;
  $govdelivery_category = isset($form_state['values']['govdelivery_category']) ? $form_state['values']['govdelivery_category'] : NULL;

  if (isset($govdelivery_category) && !empty($vocabulary)) {

    $govdelivery_settings = array();

    if (!empty($form_state['values']['govdelivery_child_type'])) {
      $govdelivery_settings['child_type'] = $form_state['values']['govdelivery_child_type'];
    }

    if (!empty($form_state['values']['govdelivery_readonly'])) {
      $govdelivery_settings['readonly'] = $form_state['values']['govdelivery_readonly'];
    }

    if (!empty($form_state['values']['govdelivery_child_quick_subscribe_page'])) {
      $govdelivery_settings['child_quick_subscribe_page'] = $form_state['values']['govdelivery_child_quick_subscribe_page'];
    }

    // Attempt to create a new category - if that option is selected.
    if ($govdelivery_category == 'new_category') {
      $categories = govdelivery_api_get_categories();
      $category_details = array(
        'category_name' => $vocabulary->name,
        'category_short_name' => $vocabulary->name,
        'category_description' => $vocabulary->description,
        'category_code' => _govdelivery_api_next_category_code($categories),
        'allow_subscriptions' => 'true',
        'default_open' => 'true',
      );
      if (!empty($form_state['values']['govdelivery_parent_category'])) {
        $category_details['parent_category'] = $form_state['values']['govdelivery_parent_category'];
      }
      $cat = govdelivery_api_create_category($category_details);
      $category_code = !empty($cat->result) ? $cat->result->{'to-param'} : NULL;
      // @todo Check that the creation was successful, and if not raise
      // an exception.
    }

    $category_code = empty($category_code) ? $form_state['values']['govdelivery_category'] : $category_code;
    $delete = FALSE;

    if (isset($form['#govdelivery_mapping_id'])) {
      if (empty($govdelivery_category)) {
        $query = db_delete('govdelivery_mapping')
          ->condition('gid', $form['#govdelivery_mapping_id']);
        $delete = TRUE;
      }
      else {
        $query = db_update('govdelivery_mapping')
          ->condition('gid', $form['#govdelivery_mapping_id']);
      }
    }
    else {
      $query = db_insert('govdelivery_mapping');
    }
    if (!$delete) {
      $query->fields(array(
        'entity_id' => $vocabulary->vid,
        'entity_type' => 'vocabulary',
        'govdelivery_type' => 'category',
        'govdelivery_code' => $category_code,
        'options' => serialize($govdelivery_settings),
      ));
    }
    $result = $query->execute();
  }


}


/**
 * Helper function - retrieves settings from the GovDelivery mapping table
 *
 * @param string $entity_type
 *   The type of entity for which we want to retrieve GovDelivery mapping info,
 *   eg 'vocabulary', 'node', 'term'.
 * @param string $entity_id
 *   The ID of the entity for which we want to retrieve GovDelivery mapping
 *   info, eg the tid of a term or the nid or a node.
 *
 * @return object
 *   An object representing mapping properties, such as entity ID, entity type,
 *   GovDelivery type, GovDelivery code, together with various other properties
 *   such as parent entities, Quick Subscribe pages etc.
 */
function _fsa_govdelivery_get_entity_settings($entity_type = NULL, $entity_id = NULL) {
  $query = db_select('govdelivery_mapping', 'g')
    ->fields('g')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $entity_id);
  $result = $query->execute()->fetchObject();

  // Return early if there is no entry.
  if (empty($result)) {
    return $result;
  }

  // Get the options - if set.
  $options = !empty($result->options) ? unserialize($result->options) : array();

  // Unserialize the options array here.
  $result->options = $options;

  // Set some typical values from the options array as properties of the object
  $keys = array('parents', 'pages', 'quick_subscribe_page', 'child_type', 'child_quick_subscribe_page', 'readonly', 'override_parent');
  foreach ($keys as $key) {
    if (isset($options[$key])) {
      $result->{$key} = $options[$key];
    }
  }
  // Return the result object
  return $result;
}


/**
 * Helper function - retrieves a GovDelivery mapping based on mapping id
 */
function _fsa_govdelivery_get_mapping($gid = NULL) {
  if (empty($gid)) {
    return new stdClass();
  }

  $query = db_select('govdelivery_mapping', 'g')
    ->fields('g')
    ->condition('gid', $gid);
  $result = $query->execute()->fetchObject();
  return $result;
}


/**
 * Implements hook_govdelivery_category_delete().
 */
function fsa_govdelivery_govdelivery_category_delete($category_code = NULL) {
  if (empty($category_code)) {
    return;
  }
  $query = db_delete('govdelivery_mapping')
    ->condition('govdelivery_type', 'category')
    ->condition('govdelivery_code', $category_code);
  $result = $query->execute();
  watchdog('fsa_govdelivery', 'Deleted mapping for GovDelivery category %category_code', array('%category_code' => $category_code), WATCHDOG_INFO);
}


/**
 * Implements hook_taxonomy_vocabulary_update().
 */
function fsa_govdelivery_taxonomy_vocabulary_update($vocabulary) {

  // Get the $vid for the vocabulary
  $vid = $vocabulary->vid;

  // Get the GovDelivery mapping data, if any
  $query = db_select('govdelivery_mapping', 'g')
    ->fields('g')
    ->condition('entity_type', 'vocabulary')
    ->condition('entity_id', $vid);
  $result = $query->execute()->fetchObject();

  // If we don't have a mapping, exit now
  if (empty($result->gid)) {
    return;
  }

  // Get the options for the mapping, or set some sane defaults if empty.
  $options = !empty($result->options) ? unserialize($result->options) : array('child_type' => 'none', 'readonly' => 1);

  // We want to add the vocabulary to the queue only if it's not read-only
  if ($options['readonly'] == 1) {
    _fsa_govdelivery_queue_add_items(array($result->gid));
  }

  // Create the child mappings, if required
  $child_type = $options['child_type'];
  $quick_subscribe_page = !empty($options['child_quick_subscribe_page']) ? $options['child_quick_subscribe_page'] : NULL;
  if ($child_type != 'none') {
    $terms = taxonomy_get_tree($vid);
    foreach ($terms as $term) {
      $params = array(
        'entity_id' => $term->tid,
        'entity_type' => 'term',
        'govdelivery_type' => $child_type,
        'govdelivery_code' => NULL,
      );
      // Get any existing mapping details for the term.
      $term_mapping = _fsa_govdelivery_get_entity_settings('term', $term->tid);

      // Overwrite child options only if they are not set.
      if (empty($term_mapping->override_parent)  && !empty($quick_subscribe_page)) {
        $params['options']['quick_subscribe_page'] = $quick_subscribe_page;
      }
      $gid = fsa_govdelivery_add_mapping($params);
      _fsa_govdelivery_queue_add_items(array($gid));
    }
  }
}


/**
 * Adds or edits a GovDelivery entity mapping
 */
function fsa_govdelivery_add_mapping($variables) {
  extract($variables);
  $existing = _fsa_govdelivery_get_entity_settings($entity_type, $entity_id);
  $fields = array(
    'entity_id' => $entity_id,
    'entity_type' => $entity_type,
    'govdelivery_type' => $govdelivery_type,
  );

  if (!empty($govdelivery_code)) {
    $fields['govdelivery_code'] = $govdelivery_code;
  }

  if (!empty($options)) {
    $fields['options'] = serialize($options);
  }

  if (empty($existing)) {
    $query = db_insert('govdelivery_mapping')
      ->fields($fields);
    $result = $query->execute();
    if (!empty($result)) {
      return $result;
    }
    else {
      return 0;
    }
  }

  else {
    if ($existing->govdelivery_type != $govdelivery_type) {
      $fields['govdelivery_code'] = '';
    }

    $query = db_update('govdelivery_mapping')
      ->condition('gid', $existing->gid)
      ->fields($fields);
    $result = $query->execute();
    return ($existing->gid);
  }

}


/**
 * Implements hook_cron_queue_info().
 *
 *
 * @return array
 *   Queues to be executed on Cron.
 *
 */
function fsa_govdelivery_cron_queue_info() {
  $queues = array();
  $queues['fsa_govdelivery'] = array(
    'worker callback' => '_fsa_govdelivery_sync_item',
    'time' => 60,
  );
  // Temporarily disable while testing.
  //return $queues;
}

/**
 * Syncs a Drupal entity with the relevant items in GovDelivery
 *
 * @param type $item
 * @return type
 */
function _fsa_govdelivery_sync_item($item) {

  $mapping = _fsa_govdelivery_get_mapping($item);

  if (empty($mapping->gid) || empty($mapping->govdelivery_type)) {
    return;
  }

  $entity = new stdClass();
  $parent = NULL;

  // Get the options for the mapping.
  $options = !empty($mapping->options) ? unserialize($mapping->options) : array('readonly' => 0);

  // Load the relevant Drupal entity - vocabulary or taxonomy term.
  switch ($mapping->entity_type) {

    case 'vocabulary':
      $entity = taxonomy_vocabulary_load($mapping->entity_id);
      break;

    case 'term':
      $entity = taxonomy_term_load($mapping->entity_id);
      $parent = $entity->vid;
      break;

    case 'node':
      $entity = node_load($mapping->entity_id);
      $entity->name = $entity->title;
      $entity->description = '';
      $entity->tid = $entity->nid;
      $parents = !empty($options['parents']) ? $options['parents'] : array();

      break;
  }


  switch ($mapping->govdelivery_type) {

    case 'category':
      $params = array(
        'category_name' => $entity->name,
        'category_short_name' => $entity->name,
        'category_description' => $entity->description,
      );

      if (!empty($options['quick_subscribe_page'])) {
        $params['qs_page'] = $options['quick_subscribe_page'];
      }

      if (!empty($parent)) {
        watchdog('fsa_govdelivery', $mapping->entity_type);
        watchdog('fsa_govdelivery', $parent);

        $parent_category = _fsa_govdelivery_get_entity_settings('vocabulary', $parent);
        watchdog('fsa_govdelivery', serialize($parent_category));
        $params['parent_category'] = $parent_category->govdelivery_code;
      }

      if (empty($options['readonly'])) {
        watchdog('fsa_govdelivery', 'Not readyonly - ' . serialize($mapping));
        if (!empty($mapping->govdelivery_code)) {
          $params['category_code'] = $mapping->govdelivery_code;
          $category = govdelivery_api_update_category($params);
        }
        else {
          $categories = govdelivery_api_get_categories();
          $params['category_code'] = _govdelivery_api_next_category_code($categories);
          $category = govdelivery_api_create_category($params);
        }

        if (!empty($category->result->{'to-param'})) {
          $variables = array(
            'entity_id' => $entity->tid,
            'entity_type' => $mapping->entity_type,
            'govdelivery_type' => 'category',
            'govdelivery_code' => $category->result->{'to-param'},
          );
          fsa_govdelivery_add_mapping($variables);
        }
      }
      break;


    case 'topic':

      $params = array(
        'topic_name' => $entity->name,
        'topic_description' => $entity->description,
      );

      $categories = array();
      foreach($parents as $parent) {
        $m = _fsa_govdelivery_get_entity_settings($parent['type'], $parent['id']);
        if (!empty($m->govdelivery_code)) {
          $categories[] = $m->govdelivery_code;
        }
      }

      if (!empty($options['pages'])) {
        $params['pages'] = $options['pages'];
      }

      if (is_array($categories)) {
        $params['categories'] = $categories;
      }

      if (!empty($mapping->govdelivery_code)) {
        $params['topic_code'] = $mapping->govdelivery_code;
        $topic = govdelivery_api_update_topic($params);
      }
      else {
        $topic = govdelivery_api_create_topic($params);
      }

      if (!empty($topic->result->element_code)) {
        $variables = array(
          'entity_id' => $entity->tid,
          'entity_type' => $mapping->entity_type,
          'govdelivery_type' => 'topic',
          'govdelivery_code' => $topic->result->element_code,
        );

        fsa_govdelivery_add_mapping($variables);
      }
      break;
  }


}

/**
 * Adds URLs to be purged from CloudFlare to the queue.
 *
 * @param array $items
 *   An array of fully-qualified URLs to be purged from the CloudFlare cache
 *
 * @return NULL
 *
 * @see _fsa_cache_clear_cloudflare_queue_url()
 * @see fsa_cache_clear_file_entity_edit_submit()
 */
function _fsa_govdelivery_queue_add_items($items) {

  // If there are no items to queue, exit now.
  if (empty($items)) {
    return;
  }

  // Create or open the queue.
  $queue = DrupalQueue::get('fsa_govdelivery');

  // Add each URL to the queue
  foreach ($items as $item) {
    $queue->createItem($item);
  }
}


/**
 * Implements hook_taxonomy_term_presave().
 */
function fsa_govdelivery_taxonomy_term_insert($term) {
  // We need a vid. If we don't have one, return now.
  if (empty($term->vid)) {
    return;
  }

  // Get a GovDelivery mapping for the term's vocabulary - if set.
  $mapping = _fsa_govdelivery_get_entity_settings('vocabulary', $term->vid);
  // No mapping? Leave now.
  if (empty($mapping)) {
    return;
  }
  $options = $mapping->options;
  $child_type = !empty($options['child_type']) ? $options['child_type'] : 'none';
  if ($child_type == 'none') {
    return;
  }
  $params = array(
    'entity_id' => $term->tid,
    'entity_type' => 'term',
    'govdelivery_type' => $child_type,
    'govdelivery_code' => NULL,
  );
  $gid = fsa_govdelivery_add_mapping($params);
  _fsa_govdelivery_queue_add_items(array($gid));

}


/**
 * Implements hook_taxonomy_term_update().
 */
function fsa_govdelivery_taxonomy_term_update($term) {
  fsa_govdelivery_taxonomy_term_insert($term);
}


/**
 * Implements hook_taxonomy_term_delete().
 */
function fsa_govdelivery_taxonomy_term_delete($term) {
  $params = array(
    'entity_type' => 'term',
    'entity_id' => $term->tid,
  );
  fsa_govdelivery_delete_mapping($params);
}


/**
 * Deletes a GovDelivery entity mapping
 */
function fsa_govdelivery_delete_mapping($params) {


  $query = db_delete('govdelivery_mapping');


  if (!empty($params['gid'])) {
    $query->condition('gid', $params['gid']);
  }
  else {
    $query->condition('entity_type', $params['entity_type']);
    $query->condition('entity_id', $params['entity_id']);
  }

  $result = $query->execute();
  //dpm($result);





}






/**
 * Implements hook_node_update().
 */
function fsa_govdelivery_node_update($node) {

  // Create an entity_metadata_wrapper() to get node values.
  $wrapper = entity_metadata_wrapper('node', $node);

  // Get the site section
  $sections = !empty($wrapper->field_site_section) ? $wrapper->field_site_section->value() : NULL;

  // If we have no site section, return now.
  if (empty($sections)) {
    return;
  }

  // Check to see if we're in the Guidance section.
  $guidance_section_name = 'Guidance';
  $guidance = FALSE;

  foreach ($sections as $section) {
    if (!empty($section->name) && $section->name == $guidance_section_name) {
      $guidance = TRUE;
    }
  }

  // If we're not in the Guidance section, exit now
  if (!$guidance) {
    return;
  }

  // Get the topics from the node
  $topics = !empty($wrapper->field_topic) ? $wrapper->field_topic->value() : NULL;

  $categories = array();
  foreach ($topics as $topic) {
    $categories[] = array(
      'type' => 'term',
      'id' => $topic->tid,
    );
  }

  $options = array(
    'parents' => $categories,
    //'pages' => array(url('node/' . $node->nid, array('absolute' => TRUE))),
    // Enforce URLs from production - change this?
    'pages' => array(url('node/' . $node->nid, array('absolute' => TRUE, 'base_url' => 'http://www.food.gov.uk'))),
  );

  $variables = array(
    'entity_type' => 'node',
    'entity_id' => $node->nid,
    'govdelivery_type' => 'topic',
    'options' => $options,
  );

  $gid = fsa_govdelivery_add_mapping($variables);
  _fsa_govdelivery_queue_add_items(array($gid));


}


/**
 * Implements hook_node_insert().
 */
function fsa_govdelivery_node_insert($node) {
  fsa_govdelivery_node_update($node);
}



/**
 * Creates node mappings for existing nodes
 */
function _fsa_govdelivery_create_node_mappings() {

  // Get the site section term that corresponds to 'Guidance'
  $terms = taxonomy_get_term_by_name('Guidance');
  $term = !empty($terms) ? current($terms) : NULL;
  if (empty($terms) || empty($term)){
    return;
  }
  $tid = !empty($term->tid) ? $term->tid : NULL;
  if (empty($tid)) {
    return;
  }

  // Use EntityFieldQuery to load up all matching nodes
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'document_page')
    ->fieldCondition('field_site_section', 'tid', $tid);
  $result = $query->execute();
  $nids = !empty($result['node']) ? array_keys($result['node']) : array();
  $nodes = node_load_multiple($nids);

  // Call fsa_govdelivery_node_update() for all of the loaded nodes.
  foreach ($nodes as $node) {
    fsa_govdelivery_node_update($node);
  }
}


/**
 * Implements template_preprocess_page().
 */
function fsa_govdelivery_preprocess_page(&$variables) {

  $node = !empty($variables['node']) ? $variables['node'] : NULL;
  $nid = !empty($node) && !empty($node->nid) ? $node->nid : NULL;
  if (empty($node) || empty($nid)) {
    return;
  }

  // Get GovDelivery entity mappings - if available
  $govdelivery_settings = _fsa_govdelivery_get_entity_settings('node', $nid);

  if (empty($govdelivery_settings)) {
    return;
  }

  $quick_subscribe_code = NULL;

  // Get the parents
  $parents = !empty($govdelivery_settings->parents) ? $govdelivery_settings->parents : array();
  foreach ($parents as $parent) {
    $parent_options = _fsa_govdelivery_get_entity_settings($parent['type'], $parent['id']);
    if (!empty($parent_options->options)) {
      $parent_options = $parent_options->options;
      if (!empty($parent_options['quick_subscribe_page'])) {
        $quick_subscribe_code = $parent_options['quick_subscribe_page'];
        break;
      }
    }
  }

  // If we don't have a quick subscribe code, return now.
  if (empty($quick_subscribe_code)) {
    return;
  }

  // Add quick subscribe link
  $variables['page']['content']['govdelivery_quick_subscribe_link'] = array(
    '#theme' => 'govdelivery_quick_subscribe_link',
    '#quick_subscribe_code' => $quick_subscribe_code,
    '#weight' => -10,
  );


  //dpm($variables);
}


/**
 * Implements hook_theme().
 */
function fsa_govdelivery_theme() {
  return array(
    'govdelivery_quick_subscribe_link' => array(
      'template' => 'theme/govdelivery-quick-subscribe-link',
      'variables' => array(
        'quick_subscribe_code' => NULL,
      ),
    ),
  );
}


/**
 * Preprocess function for GovDelivery quick subscribe page links
 */
function template_preprocess_govdelivery_quick_subscribe_link(&$variables) {

  $variables['link_url'] = NULL;

  if (empty($variables['quick_subscribe_code'])) {
    return;
  }

  $link_url = _govdelivery_api_quick_subscribe_page_public_url($variables['quick_subscribe_code']);
  //dpm($link_url);

  //$variables['link_url'] = url('https://stage-public.govdelivery.com/accounts/UKFSA/subscriber/topics', array('query' => array('qsp' => $variables['quick_subscribe_code'])));
  $variables['link_url'] = $link_url;
}


/**
 * Implements hook_form_FORMID_alter().
 *
 * Used to modify the taxonomy term form.
 */
function fsa_govdelivery_form_taxonomy_form_term_alter(&$form, &$form_state) {

  // If we're on the delete confirmation form, leave it alone.
  if (!empty($form['delete']['#value'])) {
    return;
  }

  // Get the term and tid data, if set.
  $term = !empty($form['#term']) ? $form['#term'] : NULL;
  //$tid = is_array($term) && !empty($term) && !empty($term['tid']) ? $term['tid'] : NULL;
  $tid = !empty($form['tid']) ? $form['tid'] : NULL;

  // Get the GovDelivery settings for the term - if available.
  $govdelivery_settings = !empty($tid) ? _fsa_govdelivery_get_entity_settings('term', $tid) : NULL;

  // Get GovDelivery categories
  $categories = govdelivery_api_get_categories();

  // Get GovDelivery topics
  $topics = govdelivery_api_get_topics();

  // Add our custom submit function at the start of the array.
  $form['#submit'][] = 'fsa_govdelivery_taxonomy_form_term_submit';


  // Add a fieldset for the GovDelivery settings
  $form['govdelivery_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('GovDelivery settings'),
  );

  // Check GovDelivery API status
  $govdelivery_status = _govdelivery_api_available();
  // If it's not healthy, show a message and return.
  if (!$govdelivery_status->isHealthy()) {
    $form['govdelivery_settings']['unavailable'] = array(
      '#theme' => 'govdelivery_api_status_description',
      '#status' => $govdelivery_status,
    );
    return;
  }

  // Override status
  $form['govdelivery_settings']['override_parent'] = array(
    '#type' => 'checkbox',
    '#title' => t('Override parent settings'),
    '#description' => t('Tick this box if you want to modify the GovDelivery settings for this term only. Otherwise, the settings for the vocabulary will be used.'),
    '#default_value' => !empty($govdelivery_settings->override_parent) ? $govdelivery_settings->override_parent : 0,
  );

  // GovDelivery element type
  $form['govdelivery_settings']['govdelivery_type'] = array(
    '#type' => 'select',
    '#title' => t('GovDelivery type'),
    '#description' => t('Select the type of GovDelivery element that is associated with this term.'),
    '#options' => array(
      'category' => t('Category'),
      'topic' => t('Topic'),
    ),
    '#empty_option' => t('None'),
    '#default_value' => !empty($govdelivery_settings->govdelivery_type) ? $govdelivery_settings->govdelivery_type : NULL,
    '#states' => array(
      'disabled' => array(
        ':input[name="override_parent"]' => array('checked' => FALSE),
      ),
    ),
  );

  // GovDelivery categories
  $form['govdelivery_settings']['govdelivery_category'] = array(
    '#type' => 'select',
    '#title' => t('GovDelivery category'),
    '#options' => _fsa_govdelivery_select_options($categories),
    '#default_value' => !empty($govdelivery_settings->govdelivery_code) ? $govdelivery_settings->govdelivery_code : NULL,
    '#empty_option' => t('Please choose...'),
    '#states' => array(
      'visible' => array(
        ':input[name="govdelivery_type"]' => array('value' => 'category'),
      ),
      'disabled' => array(
        ':input[name="override_parent"]' => array('checked' => FALSE),
      ),
    ),
  );

  // GovDelivery Topics
  $form['govdelivery_settings']['govdelivery_topic'] = array(
    '#type' => 'select',
    '#title' => t('GovDelivery topic'),
    '#options' => _fsa_govdelivery_select_options($topics),
    '#default_value' => !empty($govdelivery_settings->govdelivery_code) ? $govdelivery_settings->govdelivery_code : NULL,
    '#empty_option' => t('Please choose...'),
    '#states' => array(
      'visible' => array(
        ':input[name="govdelivery_type"]' => array('value' => 'topic'),
      ),
      'disabled' => array(
        ':input[name="override_parent"]' => array('checked' => FALSE),
      ),
    ),
  );

  // Quick Subscribe page
  $form['govdelivery_settings']['quick_subscribe_page'] = array(
    '#type' => 'select',
    '#title' => t('GovDelivery Quick Subscribe page'),
    '#options' => _govdelivery_api_get_quick_subscribe_pages(),
    '#default_value' => !empty($govdelivery_settings->quick_subscribe_page) ? $govdelivery_settings->quick_subscribe_page : NULL,
    '#empty_option' => t('Please choose...'),
    '#states' => array(
      'visible' => array(
        ':input[name="govdelivery_type"]' => array('value' => 'category'),
      ),
      'disabled' => array(
        ':input[name="override_parent"]' => array('checked' => FALSE),
      ),
    ),
  );

}


/**
 * Helper function: provides an array suitable for using in a select list
 *
 * @param $results GovDeliveryResult
 *   A GovDelivery result object
 *
 * @return array
 *   An associative array suitable for use as the #options element of a
 *   Form API select item. The keys will be the GovDelivery codes and the
 *   values will be the GovDelivery names.
 */
function _fsa_govdelivery_select_options($results = array()) {
  $options = array();
  foreach ($results as $result) {
    $options[$result->code] = $result->name;
  }
  return $options;
}


/**
 * Custom submit handler: taxonomy term edit form.
 */
function fsa_govdelivery_taxonomy_form_term_submit(&$form, &$form_state) {

  // Get the form values from $form_state;
  $values = $form_state['values'];

  // Get the term and tid data, if set.
  $term = !empty($form_state['term']) ? $form_state['term'] : NULL;
  $tid = !empty($form_state['tid']) ? $form_state['tid'] : NULL;

  // No term? No tid? Exit now.
  if (empty($term) || empty($tid)) {
    return;
  }

  // Get the GovDelivery type and code - if provided
  $govdelivery_type = !empty($values['govdelivery_type']) ? $values['govdelivery_type'] : NULL;
  $govdelivery_code = !empty($govdelivery_type) && !empty($values["govdelivery_$govdelivery_type"]) ? $values["govdelivery_$govdelivery_type"] : NULL;

  // If we don't hvae a GovDelivery type or code, we need go no further.
  if (empty($govdelivery_type) || empty($govdelivery_code)) {
    return;
  }

  // Get any parent details
  $parent = !empty($term->vid) ? _fsa_govdelivery_get_entity_settings('vocabulary', $term->vid) : NULL;

  // Build the options array
  $options = array(
    'quick_subscribe_page' => !empty($values['quick_subscribe_page']) ? $values['quick_subscribe_page'] : (!empty($parent->child_quick_subscribe_page) ? $parent->child_quick_subscribe_page : NULL),
    'override_parent' => $values['override_parent'],
  );

  // Build the variables array to be passed to fsa_govdelivery_add_mapping().
  $variables = array(
    'entity_type' => 'term',
    'entity_id' => $tid,
    'govdelivery_type' => $govdelivery_type,
    'govdelivery_code' => $govdelivery_code,
    'options' => $options,
  );

  // Call fsa_govdelivery_add_mapping().
  $gid = fsa_govdelivery_add_mapping($variables);
  if (!empty($gid)) {
    _fsa_govdelivery_queue_add_items(array($gid));
  }

}
