<?php
/**
 * @file
 * Code for the Sitewide feature.
 */

include_once 'sitewide_feature.features.inc';


/**
 * Implements hook_query_TAG_alter().
 *
 * We use this hook to alter the query built by the entity reference module to
 * validate selections for node fields. By default, entity reference fields can
 * reference only published nodes, but we have a requirement to reference those
 * nodes that are yet to be published. We simply remove the condition that
 * specifies that nodes be published.
 *
 * @see Ticket #102052: Drupal: invalid node
 * @see Ticket #10861: Drupal: linking to unpublished pages
 * @see EntityReference_SelectionHandler_Generic_node::buildEntityFieldQuery()
 */
function sitewide_feature_query_entityreference_alter(QueryAlterableInterface $query) {
  // If there are no alter tags or we're not on an entity reference field,
  // exit now.
  if (empty($query->alterTags) || empty($query->alterTags['node_access']) || empty($query->alterTags['entityreference'])) {
    return;
  }
  // Get the field name that is being validated
  $field_name = !empty($query->alterMetaData) && !empty($query->alterMetaData['field']) && !empty($query->alterMetaData['field']['field_name']) ? $query->alterMetaData['field']['field_name'] : NULL;
  // An array of field names for which we want to allow unpublished nodes to be
  // referenced.
  $field_names = array(
    'field_child_page',
  );
  // If field name is empty or it's not one of the ones we're interested in,
  // exit now.
  if (empty($field_name) || !in_array($field_name, $field_names)) {
    return;
  }
  // Get the conditions by reference - so we can alter them
  $conditions =& $query->conditions();
  // Find the node status condition and remove it.
  foreach ($conditions as $key => $condition) {
    if (!empty($condition['field']) && $condition['field'] == 'node.status') {
      unset($conditions[$key]);
    }
  }
}


/**
 * Implements hooK_redirect_alter($redirect)
 *
 * We use this hook to replace redirects to the old version of National Archives
 * links with the new URL.
 */
function sitewide_feature_redirect_alter($redirect) {
  $redirect->redirect = _sitewide_feature_national_archives_url_update($redirect->redirect);
}


/**
 * Implements template_preprocess_field().
 *
 * We use this hook to replace old-style National Archives URLs stored in the
 * field_url field used on external_link nodes with the new version of the URL.
 */
function sitewide_feature_preprocess_field(&$variables) {
  // Get the element
  $element = !empty($variables['element']) ? $variables['element'] : array();
  // Get the field name
  $field_name = !empty($element['#field_name']) ? $element['#field_name'] : NULL;
  // If the field name is other than 'field_url', leave now
  if ($field_name != 'field_url') {
    return;
  }
  // Get the field items
  $items = !empty($variables['items']) ? $variables['items'] : array();
  // Replace the URL
  foreach ($items as $key => $item) {
    $variables['items'][$key]['#element']['url'] = _sitewide_feature_national_archives_url_update($item['#element']['url']);
    $variables['items'][$key]['#element']['display_url'] = _sitewide_feature_national_archives_url_update($item['#element']['display_url']);
  }
}


/**
 * Helper function: replace old-styls National Archives URLs with new versions
 */
function _sitewide_feature_national_archives_url_update($url) {
  // This is hte old National Archives URL
  $old_domain = 'http://tna.europarchive.org';
  // And this is the new one
  $new_domain = 'http://webarchive.nationalarchives.gov.uk';
  // Replace the old with the new in the URL and display URL elements
  if (strpos($url, $old_domain) !== FALSE) {
    $url = str_replace($old_domain, $new_domain, $url);
  }
  return $url;
}
