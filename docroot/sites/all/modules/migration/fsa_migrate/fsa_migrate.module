<?php

/**
 * @file
 * This file contains the specific hooks used for the migration of FSA.
 */

/**
 * When nodes are programmatically updated, we seem to loose pathauto settings.
 * To prevent field collections from updating node aliases for general pages,
 * we disable pathauto for general document pages during the main migration.
 * @param $node
 *
 *
 */
function fsa_migrate_node_update($node) {
  $pathauto_restrict = variable_get('fsa_migrate_pathauto_restrict', FALSE);
  if (in_array($node->type, array('document_page', 'faq'))) {
    $conditions = array('source' => 'node/' . $node->nid, 'language' => LANGUAGE_NONE);
    $path = path_load($conditions);
    if ($path) {
      $node->path['alias'] = $path['alias'];
      //module_load_include('inc', 'pathauto');
      //$uri = entity_uri('node', $node);
      //$pathauto_alias = pathauto_create_alias('node', 'return', $path, array('node' => $node), 'document_page', LANGUAGE_NONE);
      //$node->path['pathauto'] = ($path != $uri['path'] && $path == $pathauto_alias);

      if ($pathauto_restrict) {
        $node->path['pathauto']=false;
      }
    }
  }
}

/**
 * Get hold of the Node id for an alterian id
 * @param $action
 * @param null $value
 * @return null
 */
function fsa_migrate_global_id_map($action, $value = null){
  $map = &drupal_static(__FUNCTION__);
  $result = null;
  if ($action == 'reset') {
    $map = null;
  }
  if (!$map) {
    // initialise the map
    $map = array();
    $tables = array(
      'migrate_map_fsaalertdocument',
      'migrate_map_fsaauditreport',
      'migrate_map_fsaconsultationpage',
      'migrate_map_fsadocumentpage',
      'migrate_map_fsafaqpage',
      'migrate_map_fsamultibranchdocument',
      'migrate_map_fsanewsdocument',
      'migrate_map_fsatreebranchdocument',
      'migrate_map_fsaresearchproject',
      'migrate_map_fsaresearchprogramme',
      'migrate_map_fsaexternalsite'
    );
    // loop through all our map tables and create one array
    foreach ($tables as $table) {
      $map_query = db_select($table,'m')->fields('m', array('sourceid1','destid1'))->execute();
      while ($values = $map_query->fetchAssoc()) {
        $map[$values['sourceid1']] = $values['destid1'];
      }
    }
  }
  switch($action) {
    case 'dest':
      if (array_key_exists($value,$map)) {
        $result = $map[$value];
      }
    break;
  }
  return $result;
}

/**
 * Returns a connection resource to alterian oracle db.
 *
 * @return null|resource
 */
function fsa_alterian_db_connect() {
  global $conf;
  $dbOracleDetails = $conf['oracle_db'];
  $connectionOracle = oci_connect($dbOracleDetails['username'], $dbOracleDetails['password'], $dbOracleDetails['connection_string'], 'AL32UTF8');
  if (!$connectionOracle) {
    $e = oci_error();
    trigger_error(htmlentities($e['message'], ENT_QUOTES), E_USER_ERROR);
    return NULL;
  }
  else {
    return $connectionOracle;
  }
}

/**
 * Return the child of a given alterian id.
 * The child is compared to an existing object.
 *
 * @param $objectIdSearched
 * @param $objectIdExisting
 * @return string
 *  Alterian Object id.
 */
function fsa_migrate_getChildAlterianId($objectIdSearched, $objectIdExisting) {
  GLOBAL $connectionOracle;

  // Extracts the object path.
  $childSQLRequest = <<<'ENDSQL'
    SELECT LINK.PARENTID, OBJ.NAME, OBJ.OBJECTID, OBJTYPE.NAME, LINKTYPE.LINKTYPENAME
    FROM OBJ, LINK, OBJTYPE, LINKTYPE
    WHERE LINK.CHILDID = OBJ.OBJECTID
    AND LINK.LINKTYPEID = LINKTYPE.LINKTYPEID
    AND OBJTYPE.OBJECTTYPEID = OBJ.OBJECTTYPEID
    AND LINK.PARENTID IN ( :obj_id )
ENDSQL;

  $replacedQuery = str_replace(':obj_id', $objectIdSearched, $childSQLRequest);
  $sqlResult = FSAMigration::oracleQueryAll($replacedQuery, array(), $connectionOracle);

  if (!is_null($sqlResult)) {
    foreach ($sqlResult['OBJECTID'] as $objectId) {
      if ($objectId !== $objectIdExisting) {
        return $objectId;
      }
    }
  }
}
